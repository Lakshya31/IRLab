zmodem asynchronous inter application file transfer protocol chuck forsberg omen technology inc chuck forsberg omen technology inc v northwest sauvie island road portland oregon voice  modem telegodzilla  speed  compuserve  uucp  tektronix reed omen caf chapter rev printed  chapter rev printed  intended audience document intended system programmer technically qualified people choose implement asynchronous file transfer protocol dialup network related environment acknowledgment encouragement suggestion stuart mathison thomas buck john wale ward christensen irv hoff gratefully acknowledged related document following file available reference studying document ymodemdoc describes xmodem ymodem file transfer protocol zmodemh provides definition manifest constant referenced herein rzc szc rbsbc unix source code operating zmodem program rz sz manual page rz sz zmc zmodemh operating system independent zmodem subroutine header file rosetta stone definition reflect current vernacular computer medium attempt identify file transfer protocol rather specific program frame zmodem frame consists header packet data packet xmodem refers original file transfer etiquette introduced ward christensen modem program also called modem modem protocol unaware modem unusual batch file mode call modem alias include  cpm user group   term ii ftp  protocol supported every serious communication program universality simplicity reasonable performance xmodemcrc replaces xmodem byte checksum two byte cyclical redundancy check crc giving modern error detection protection chapter rev printed  chapter rev printed  ymodem refers xmodemcrc protocol throughput andor batch transmission enhancement described ymodemdoc zmodem zmodem second generation streaming protocol text binary file transmission application running microcomputer mainframe develop zmodem since development half decade ago ward christensen modem protocol enabled wide variety computer system interchange data hardly communication program nt least claim support protocol called xmodem advance computing modem networking spread xmodem protocol far beyond micro micro environment designed application exposed weakness user interface suitable computer hobbyist three four command must keyboarded transfer file short block length cause throughput suffer used timesharing system packet switched network satellite circuit buffered error correcting modem bit checksum unprotected transaction allow undetected error disrupted file transfer one file sent per command file name given twice first sending program receiving program transmitted file accumulates many extraneous byte modification date file attribute lost xmodem requires complete bit transparency code xmodem operate network need flow control number protocol developed year none displaced xmodem date lack public domain documentation example program kept proprietary protocol mnp blast others tightly bound fortune supplier hardware andor software complexity discourages widespread application bisync sdlc hdlc x xpc protocol chapter rev printed  chapter rev printed  link level protocol x xpc mnp manage application application file transfer kermit protocol developed allow file transfer environment hostile xmodem performance compromise necessary accomodate non transparent environment limit kermits efficiency even completely transparent channel kermit control character quoting limit efficiency binary file transfer per cent kermit sliding window  superkermit  improves throughput network cost increased complexity superkermit state transition encoded special language  wart  requires c compiler superkermit c code requires full duplex communication ability check presence character input queue precluding implementation operating system number submodes used various kermit program including different method transferring binary file two kermit program mysteriously fail operate submodes matched number extension xmodem protocol made collective name ymodem ymodemk us byte block reduce overhead transmission delay per cent compared xmodem network delay still degrade performance network may transmit byte packet unmodified handling file multiple byte awkward especially file length known change transmission ymodemg provides efficient batch file transfer preserving exact file length file modification date ymodemg essentially insensitive network delay support error recovery ymodemg usually used hardwired reliable link level protocol ymodemg detects crc error data transfer aborted ymodemg easy implement closely resembles xmodemcrc another xmodem  extension  protocol cheating referred  turbo download  overthruster sometimes improve xmodem throughput  kermit program support run length encoding chapter rev printed  chapter rev printed  expense error recovery zmodem protocol proposed mean addressing weakness described maintaining much xmodem simplicity prior art possible zmodem protocol design criterion design file transfer protocol engineering compromise conflicting requirement  ease use zmodem allows either program initiate file transfer passing command andor modifier program file name need entered menu selection possible wild card name may used batch transfer minimum keystroke required initiate transfer zrqinit packet sent sending program trigger automatic downloads zmodem step ymodem end support zmodem  throughput zmodem designed optimum performance minimum degradation caused delay introduced packet switched network timesharing system zmodem optimized best throughput line hit occur infrequently assumption markedly reduces code complexity memory requirement zmodem protocol feature enhance rapid error recovery compared network compatible xmodem implementation assumed many transfer originate timesharing system connected packet switched network zmodem provides feature allow simple efficient implementation timesharing host  omen technology trademark provided transmission medium accomodates ymodem chapter rev printed  chapter rev printed  file transfer begin immediately regardless program started first without second delay associated xmodem  integrity robustness packet protected bit crc proprietary alogrithyms needed reliable transfer security challenge guard againgst trojan horse message  ease implementation zmodem accomodates wide variety system microcomputer overlap disk serial io microcomputer overlap serial send receive computer andor network requiring xonxoff flow control computer check serial input queue presence data without wait data arrive although zmodem provides  hook  multiple  thread  zmodem intended replace link level protocol x zmodem accomodates network timesharing system delay continuously transmitting data unless receiver interrupt sender request retransmission garbled data zmodem effect us entire file window zmodem provides general purpose application application file transfer protocol may used directly reliable link level protocol x mnp fastlink etc zmodem basic  unique professionalyam powercom etc streaming strategey discussed coming chapter chapter rev printed  chapter rev printed   packetization zmodem frame somewhat different xymodem block xymodem block used following reason block number limited provision variable length block line hit corrupt protocol signal causing failed file transfer particular modem error sometimes generate false block number false eots false acks false acks troublesome cause sender lose synchronization receiver state art xymodem program professionalyam powercom overcome weakness clever proprietary code stronger protocol desired difficult determine beginning end xymodem block line hit cause loss synchronization precludes rapid error recovery  link escape encoding zmodem acheives data transparency extending bit character set code escape sequence based zmodem data link escape character zdle link escape coding permit variable length data packet without overhead separate byte count allows beginning frame detected without special timing technique facilitating rapid error recovery link escape coding add overhead worst case file consisting entirely zdle character would incur overhead zdle character special zdle represents control sequence sort zdle character appears data sent within binary packet prefixed zdle sent zdlee value zdle octal ascii particular value chosen allow string character abort zmodem session compatible xymodem session abort  constant defined zmodemh include file please note constant leading octal constant c chapter rev printed  chapter rev printed  since used normal terminal operation communication program monitor data flow zdle following character scanned detect zrqinit packet invitation automatically download command file two successive character abort zmodem session experience ymodem file transfer suggests impair robustness protocol minimum sent zmodem subroutine modified require successive character signal abort receiving program decode sequence zdle followed byte bit set bit reset upper case letter either parity equivalent control character inverting bit allows transmitter escape control character sent communication medium zmodem software currently escape zdle addition receiver recognizes escape character need escaped  header packet information zmodem frame begin header packet may sent binary hex form zmodem us single routine recognize binary hex header packet either form header packet contains raw information type byte future extension zmodem may use high order bit type byte indicate thread selection four byte data indicating flag andor numeric quantity depending packet type figure order byte header packet type packet type f flag least significant byte p file position least significant p file position significant type f f f f        type p p p p  packet type cardinal number beginning minimize state transition table memory requirement chapter rev printed  chapter rev printed   binary header packet binary header packet sent sending program receiving program binary header packet begin sequence zpad zdle zbin frame type byte zdle encoded four positionflags byte zdle encoded two byte crc frame type positionflag byte zdle encoded binary data packet follow depending frame type function zsbhdr transmits binary header packet function zgethdr receives binary hex header packet figure binary header packet zdle type fp fp fp fp crc crc  hex header packet receiver sends response hex header packet sender also us hex header packet followed binary data packet hex encoding required support xonxoff flow control hex header receiving routine ignores flow control character use kermit style encoding control paritied character considered rejected increased possibility interacting timesharing system line edit function use hex packet receiving program allows control character used interrupt sender error detected except header packet type imply data packet follow hex header packet may used place binary header packet hex header packet begin sequence zpad zpad zdle zhex zgethdr routine synchronizes zpadzdele sequence extra zpad allows part program detect zmodem packet call zgethdr receive packet type byte four positionflag byte crc thereof sent hex using character set abcdef upper case hex digit allowed false trigger xymodem program carriage return line feed xon appended hex header packet considered part crlf aid debugging printout xon release sender spurious xoff flow control character generated line noise common occurrence chapter rev printed  chapter rev printed  ascii encoded data packet follow depending frame type function zshhdr sends hex header packet figure hex header packet zdle type fp fp fp fp crc crc cr lf xon type f  f crc crc sent two hex digit  binary data packet binary data packet immediately follow associated binary header packet binary data packet contains byte data recommended length value byte bps bps data link known relatively error free padding used binary data packet data byte zdle encoded transmitted zdle frameend sent followed two zdle encoded crc byte crc accumulates data byte frameend function zsbdata sends binary data packet function zrbdata receives binary data packet  ascii encoded data packet format ascii encoded data packet currently specified would used server command etc protocol transaction overview xmodem recommendation zmodem timing receiver driven transmitter time except abort program packet received extended period time say one minute start zmodem file transfer session sending program called name desired file option sending program sends string  rzr  invoke receiving program possible command mode  rz  followed carriage return activates zmodem receive program command already active  special consideration apply sending command chapter rev printed  chapter rev printed  sender may display message intended human consumption list file requested etc sender sends zrqinit packet zrqinit packet cause previously started receive program send zrinit packet without delay interactive conversational mode receiving application may monitor data stream zdle following character may scanned b indicating zrqinit packet command download command data sending program awaits command receiving program start file transfer  c   g  nak received xmodem ymodem file transfer indicated file transfer use xymodem protocol note zmodem ymodem batch sending program provides file name xmodem zmodem receive program start immediately sends zrinit packet initiate zmodem file transfer zchallenge packet verify sending program receive program resends packet repsonse time interval suitable period time second typical falling back xymodem protocol receiving program receives zrqinit packet resends zrinit packet sending program receives zchallenge packet place data zp  zp answering zack packet receiving program receives zrinit packet echo indicating sending program operational eventually sending program correctly receives zrinit packet sender may respond optional zsinit frame set receiving program attention string receiver sends zack packet response containing serial number receiving program sender sends zfile header zmodem conversion management transport option followed zcrcw data packet containing file name file length modification date information identical used ymodem batch receiving program insure pathname option compatible operating environment local security requirement  see zfile packet type chapter rev printed  chapter rev printed  receiver file name length may respond zcrc packet requires sender permorm bit crc file transmit crc zp  zp zcrc packet receiver us information determine whether accept file skip sequence triggered zmcrc management option receiver may respond zskip packet cause sender process next file batch zrpos packet receiver initiate transmission file data starting offset file specified zrpos packet normally receiver specifies data transfer begin begin offset file receiver may start transfer file allows file transfer interrupted loss carrier system crash completed next connection without requiring entire file retransmitted downloading file timesharing system becomes sluggish transfer interrupted resumed later loss data sender sends zdata binary header packet file position followed one data packet receiver compare file position zdata header number character successfully received file agree zrpos error response generated force sender right position within file data packet terminated zcrcgo crc elicit response unless error detected data packet follow immediately zcrcq data packet expect zack response file offset error otherwise zrpos response last good file offset another data packet continues immediately zcrcq packet used receiver indicate fdx ability canfdx bit zcrcw data packet expect response next frame sent receiver indicate overlapped io capability  apply file translated zmspars option used receiver instead seek position zdata packet chapter rev printed  chapter rev printed  canovio bit setting buffer size sender us zcrcw allow receiver write buffer sending data zero length data frame may used sending idle packet prevent receiver timing case data immediately available sender absence fatal error sender eventually encounter end file end file encountered within frame frame closed zcrce data packet elicit response except case error sender sends zeof packet file ending offset equal number character file receiver compare number number character received receiver received file close file file close satisfactory receiver responds zrinit receiver received byte file receiver sends zrpos current file offset forcing sender resend missing data receiver properly close file zferr packet sent file processed protocol error prevent sending program returning success status sender close session zexit header packet receiver acknowledges zexit packet sender receives acknowledging packet sends two character  oo  exit operating system application invoked receiver wait briefly   character exit whether received  session cancel packet cancel packet consists two zpad character eight character optional ten backspace character first attn sequence executed receiving program receiving data streaming mode zpad character allow sending program sample reverse data stream check single character code indicating packet receiver trailing backspace character attempt erase effect character received command interpreter static char canistr zpad zpad chapter rev printed  chapter rev printed  zmodem streaming technique zmodem allows choice several data streaming method selected according limitation sending environment receiving environment transmission channel  full streaming sampling computer overlap serial io disk io sender sample reverse channel presence data without wait full streaming used attn sequence required sender begin data transmission zdata header continuous zcrcg data packet receiver detects error executes attn sequence sends zrpos packet force sender back correct position within file end transmitted packet sender check presence error packet receiver sender may sample reverse data stream presence zpad character program would sample reverse channel zpad seen empty zcrcw data packet sent case receiver still reading packet receiver response packet read acted upon code fragment szc beginning notdefdos would perform function  full streaming interrupt method used reverse data stream sampled without entering io wait alternate method instruct receiver interrupt sending program error detected receiver interrupt sender control character break signal combination thereof specified zsinit frame sent sending program sending program  catch  interrupt read hex packet normally zrpos receiver take appropriate action unix sbc program us setjmplongjmp call getinsync function read receiver error packet take appropriate action chapter rev printed  chapter rev printed   full streaming sliding window none method applicable hope yet lost sender buffer response receiver sender use zcrcq packet get acks receiver without interrupting transmission data sufficient number zcrcq packet sent sender read one one packet arrived receive interrupt buffer problem method probability wasting excessive amount time responding receiver error packet  streaming receiver overlap serial disk io us zrinit frame specify buffer length sender overflow sending program sends zcrcw packet wait zack packet sending next segment file sending program support reverse data stream sampling interrupt error recovery faster average protocol ymodem sends  monolithic  block attention sequence receiving program sends attn sequence whenever detects error need interrupt sending program default attn string value empty attn sequence receiving program reset attn empty default transfer session sender speficies attn sequence optional zsinit frame attn string terminated null two metacharacters perform special function  octal sends break signal  octal pause one second packetframe type numeric value value shown boldface given zmodemh chapter rev printed  chapter rev printed   zrqinit sent sending program trigger receiving program send zrinit packet aviods aggravatimg startup delay associated xmodem kermit transfer zf contains zcommand program attempting send command otherwise  zrinit sent receiving program zf zf contain bitwise receiver capability flag define canfdx  rx send receive fdx  define canovio  rx receive disk io  define canbrk  rx send break signal  define cancry  receiver decrypt  zp zp contain size receiver buffer byte nonstop io allowed  zsinit sender sends capability flag currently none currently defined followed binary data packet terminated zcrcw data packet contains null terminated attn sequence maximum length byte including terminating null  zack acknowedgement zsinit header packet zchallenge header packet zcrcw data packet zp zp contain file offset response zchallenge contains bit received  zfile packet denotes beginning file transmission attempt zf zf zf may contain option value byte implies special treatment option specified reciever override option specified sender exception zcbin option override conversion option  zf conversion option receiver recognize conversion option application dependent default conversion may apply zcbin  binary  transfer inhibit conversion unconditionally chapter rev printed  chapter rev printed  zcnl convert received end line local end line convention suported end line convention crlf ascii based operating system except unix macintosh nl unix neither two end line convention violate permissible ascii definition carriage return line feednew line zcrecov recover interrupted file transfer start transfer location corresponding receiver end file option apply source file shorter file converted eg zcnl subject single ended transport option transfer recovered  zf management option receiver recognize management option file transferred normally zmnew compare source destination file transfer file source newer different length zmcrc compare source destination file transfer different file length crc zmapnd append source file content existing destination file zmclob replace existing destination file ztspars special processing sparse file file segment transmitted separate frame frame necessarily contiguous  zf transport option receiver implement particular transport option file copied without conversion later processing ztlzw lempelziv compression transmitted data identical produced compress  operating computer vax byte ordering using bit encoding ztcrypt encryption initial null terminated string identifies key detail determined ztrle run length encoding detail determined zcrcw data packet follows file name file length modification date information described later chapter chapter rev printed  chapter rev printed   zskip sent receiver response zfile make sender skip next file  znak indicates last packet header garbled see also zrpos  zabort sent receiver terminate batch file transfer requested user sender initiate zfin sequence  zfin sent sending program terminate zmodem session receiver responds zfin  zrpos sent receiver force file transfer resume file offset given zp  zp  zdata zp  zp contain file offset one data packet follow  zeof sender report end file zp  zp contain ending file offset  zferr error reading writing file protocol equivalent zabort  zcrc request receiver response sender file crc zp zp contain bit file crc  zcompl case server mode chapter rev printed  chapter rev printed   zchallenge request echo random number zp  zp zack frame sent receiving program sending program verify connected operating program activated spurious data trojan horse message  zcompl request completed  zcan pseudo frame type returned gethdr response cancel sequence  zfreecnt sending program request zack frame zp  zp containing number free byte current file system value represents indefinite amount free space  zcommand zcommand sent binary header packet zp  zp contain unique cardinal number differentiate command command zf contains zcack zcrcw data packet follows ascii text command string terminated null character command intended executed operating system hosting receiving program eg  shell escape  must   first character otherwise command meant executed application program received command zf contained zcack receiver immediately responds zcompl header otherwise receiver responds zcompl header operation completed exit status completed command stored zp  zp zcack exit status implies nominal completion command command caused file transmitted command sender see zrqinit frame computer attempting send  currently unused chapter rev printed  chapter rev printed  data sender examines zf received zrqinit packet determine echo zrqinit packet illegal sending program command receiving program send command transaction example  simple file transfer simple transaction one file error challenge overlapped io sender receiver  rzr  zrqinit zrinit zfile zrpos zdata data  zeof zrinit zfin zfin oo  challenge command download sender receiver  rzr  zrqinit zcommand zchallenge rnd zack samernd zrinit zcommand perform command zcompl zfin zfin oo chapter rev printed  chapter rev printed  zfile frame file information zmodem sends file information zfile frame data ymodem batch sends block nb pathname file name part required batch transfer pathname pathname conventionally file name sent null terminated ascii string filename format used handle oriented msdos tm function c library fopen function assembly language example follows db foobar space included pathname normally file name stem directory prefix transmitted unless sender selected yam f option send full relative pathname source drive designator b etc sent filename consideration file name translated lower case unless sending system support upperlower case file name convenience user system unix store filename upper lower case receiver accommodate file name lower upper case rb program unix system normally translates filename lower case unless one letter filename already lower case transmitting file different operating system file name must acceptable sender receiving operating system directory included delimited ie  subdirfoo  acceptable  subdirfoo  length file length succeeding field optional length field stored decimal string counting number data byte file zmodem receiver us file length display progress reporting purpose actual length determined  field may skipped chapter rev printed  chapter rev printed  data transfer modification date single space separate modification date file length mod date optional filename length may sent without requiring mod date sent mod date sent octal number giving time content file last changed measured second jan universal coordinated time gmt date implies modification date unknown left date file received standard format chosen eliminate ambiguity arising transfer different time zone two microsoft blunder complicate use modification date file transfer msdos tm system first lack timezone standardization msdos file creation time known unless timezone system wrote file known unix solved problem planet earth anyway stamping file universal time gmt microsoft would include timezone origin directory entry professionalyam get around problem using z parameter set number minute local time lag gmt file known originate different timezone zt option may used specify timezone individual file transfer second problem lack separate file creation date do since backup scheme used do rely file creation date select file copied archive backdating file modification date could interfere safety transferred file reason professionalyam modify date received file header information unless parameter non zero mode single space separate file mode modification date file mode stored octal string unless file originated unix system file mode set  rb check file mode x bit indicates unix type regular file file x bit set assumed sent another unix similar system  necessarily transmitting system chapter rev printed  chapter rev printed  us file convention file translated way serial number single space separate serial number file mode serial number transmitting program stored octal string program serial number omit field set receiver use field optional file information terminated null pathname sent pathname terminated two null length file information packet including trailing null must exceed byte typical length le byte performance result  throughput two single task pcxt computrers telenet link local telenet superkermit gave chsec throughput baud ymodemk yielded charssec zmodem provided chat sec zmodem measured would given much le  error recovery test zmodem protocol performance made pcat sco sys v xenix do  connected pc do  either directly bps unbuffered dialup bps modem zmodem software configured use byte packet length bps otherwise time delay necessary normal file transfer per file negotiation much faster ymodem observed impidiment time required program update logging file file transfer short line hit seen receiver usually induces crc error interrupt packet usually seen sender next packet sent resultant loss data throughput average half packet bps would  second lost per hit  error rate would degrade throughput per cent throughput degradation increase channel delay packet transit channel discarded error longer noise burst affect receiver sender reception interrupt packet usually cause sender remain silent receiver time second round trip channel delay exceeds receiver second timeout recovery chapter rev printed  chapter rev printed  type error may become difficult noise affecting sender usually ignored one common exception spurious xoff character generated noise stop sender receiver time sends interrupt packet concludes xon summation zmodem performance presence error resembles xpc superkermit short burst cause minimuml data loss long burst pulse dialing noise often require timeout error restore flow data packet switched network consideration flow control necessary printing message directory streaming file transfer protocol including kermit sliding window zmodem non transparent flow control incompatible xmodem ymodem transfer xmodem ymodem protocol require complete transparency bit code operate properly desireable flow control x hardware ct unavailable  eat  character pad buffer almost fill xoff emitted buffer longer nearly full send xon otherwise network neither generate eat xon xoff control character telenet met setting ccit x   end network best throughput parameter advance ack set something like packet sent packet full byte moderate delay  ymodem pad buffering guarantee minimum character sent burst without loss data generation flow control character failure provide buffering generate excessive retries ymodem figure flow control compatibility connectivity interactive xmodem kermit zmodem direct connection yes yes yes yes network flow control yes network transparent fc yes yes yes yes network semitransparent fc yes yes yes network bit yes yes operate streaming mode kermit slow byte max packet size zmodem adjust burst length maximum faster transfer chapter rev printed  chapter rev printed  parity bit must encoded slowing binary transfer extension possible encoding data bit performance comparision table  round trip delay time  includes time last byte packet propagate operating system network receiver plus time receiver response packet propogate back sender figure shown calculated round trip delay time millisecond second shift register two computer pair modem generate round trip delay time order millisecond operation busy timesharing computer network easily generate round trip delay five second round trip delay cause visible interruption data transfer using xmodem protocol subjective effect delay greatly exaggerated especially user paying connect time byte binary file randomly distributed code sent bps data bit stop bit calculation assume transmission error protocol per file function considered processor io overhead included ymk refers ymodem byte packet ymg refers ymodem  g  option zmodem us byte packet example superkermit us maximum packet size bit transparent transmission run length compression comparison straight  dump  file content file management error checking take second figure protocol overhead information protocol xmodem ymk ymg zmodem skermit protocol round trip trip time m trip time overhead character transfer time transfer time m transfer time chapter rev printed  chapter rev printed  figure transmission time comparision second round trip  xmodem  ymodemk  superkermit sliding window  ymodemg  zmodem figure yzmodem header information usage program batch length date mode sn ymodemg zmodem unix rbsb yes yes yes yes sb unix rzsz yes yes yes yes sz yes vms rbsb yes yes proyam yes yes yes yes yes yes cpm yam yes kmdimp yes yes mex information information may obtained calling telegodzilla  uucp site obtain nrofftroff source file uucp omen usrcafpubliczmodemmm tmp continually updated list available file stored usrspooluucppublicfiles following lsys line call site  omen  yia uucp telegodzilla us proyam host operation response  name please  uucico give proyam  link  command user name password giznoid control access xenix system connected ibm pc serial port communication proyam xenix use bps yam convert caller speed finally calling uucico log uucp omen acu  e  e link giznoid n  n uucp chapter rev printed  chapter rev printed  zmodem program demonstration version professionalyam available yamdemoarc telegodzilla file must unpacked  arc  program version later copy arc available  arcexe   arccom  telegodzilla may used test zmodem ymodem implementation flashup tree structured help file processor provided yamhelplqr ymodem program unix program supporting ymodem protocol available telegodzilla  upgrade  subdirectory rbsbshq squeezed shell archive unix like system supported including v sys iii  bsd sys v idris coherent regulus version vaxvms available vrbsbshq directory irv hoff added ymodem k packet ymodem batch transfer kmd imp series program replace xmodem modemmdmxx series respectively overlay available wide variety cpm system many program including mex mexpc also support ymodem extension question ymodem professionalyam communication program request evaluation copy may directed chuck forsberg omen technology inc v sauvie island road portland oregon voice  modem telegodzilla  usenet  tektronix reed omen caf compuserve  source tce truly chapter rev printed  content intended audience                 acknowledgment                  related document                 rosetta stone                  develop zmodem                zmodem protocol design criterion             ease use                  throughput                  integrity robustness             ease implementation             zmodem basic                   packetization                 link escape encoding               header packet information             binary header packet               hex header packet                binary data packet               ascii encoded data packet            protocol transaction overview              session cancel packet             zmodem streaming technique               full streaming sampling            full streaming interrupt            full streaming sliding window         streaming                attention sequence                 packetframe type                  zrqinit                   zrinit                   zsinit                   zack                    zfile                    zskip                    znak                    zabort                   zfin                    zrpos                    zdata                    zeof                    zferr                    zcrc                    zchallenge                  zcompl                   zcan                    zfreecnt                   zcommand                  transaction example                 simple file transfer              challenge command download          zfile frame file information             performance result                 throughput                  error recovery                packet switched network consideration          performance comparision table             information                 zmodem program                  ymodem program                  ii list figure figure order byte header packet          figure binary header packet              figure hex header packet               figure flow control compatibility            figure protocol overhead information           figure transmission time comparision           figure yzmodem header information usage          iii zmodem asynchronous inter application file transfer protocol chuck forsberg omen technology inc abstract zmodem file transfer protocol greatly simplifies file transfer compared xmodem addition supporting transparent user interface zmodem provides personal computer user efficient accurate robust file transfer method zmodem provides especially efficient file transfer timesharing system satellite relay wide area packet switched network choice buffering windowing mode allow zmodem operate efficiently system support streaming protocol zmodem provides advanced file management feature including autodownload remote file compare aborted transfer recovery selective file transfer security verified command downloading 