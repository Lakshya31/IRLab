chapter element language chapter begin description language bit tutorial nature rest manual ill start describing elementary building block language language program first let establish mean say one hand name assembly language intel family ibmpc compatible computer statement written language used specify machine instruction family allocate memory space program data hand name program called assembler translates human readable statement machine readable form input assembler source file list source file containing assembly language statement output assembler file containing binary program code either run program pc combined module using linker make program general category element statement source file classified three general category instruction statement data allocation statement assembler directive instruction statement us easily remembered name mnemonic possibly one operand specify machine instruction generated data allocation statement reserve optionally initializes memory space program data assembler directive statement give special instruction assembler directive unlike instruction data allocation statement specify actual content memory example three type statement given provided give general idea different kind statement look like instruction statement mov ax bx call sortprocedure add al data allocation statement avariable dw db hello assembler directive code segment itemcount equ  statement source file made keywords identifier number string special character comment keyword symbol special meaning assembler instruction mnemonic mov call reserved word assembly language db segment equ identifier programmerdefined symbol used represent thing variable label code numerical constant identifier may contain letter number character must begin letter identifier name considered unique character length character example identifier count l abyte number may expressed decimal hexadecimal octal binary must begin decimal digit except case decimal hexadecimal number must end  x  followed letter identifying base number number without identifying base hexadecimal first digit decimal first digit example number decimal abc hexadecimal xq octal xb binary string character enclosed single quote example string st string signon message v single quote one many special character used assembly language others run together list  space tab character also special character used separator assembly language compatibility assembler also accept double quote string comment sequence character used program documentation ignored assembler comment begin semicolon run end line started example line comment shown entire line comment mov ax bx comment next instruction statement alternatively compatibility assembler provide comment directive next nonblank character comment delimiter comment run across many line text ignored second instance delimiter seen example comment comment run across two line  nt like comment think dangerous example two comment program forget close first one assembler happily ignore source code comment source code happen contain label referenced elsewhere error may detected program blow multiline comment urge simply start line semicolon statement line oriented mean statement may broken across line boundary source line may entered free form fashion without regard column orientation symbol special character please note line free formatted need put operand instruction separate column organize thing column want visually scan column practically never scan operand separate opcodes reason assemblylanguage program world operand separate column ibm assembler written back required make sense operand separate column stop operand typing code generation strongly typed assembly language mean operand instruction register variable label constant type attribute associated tell assembler something example operand type number tell assembler numerical constant rather register address code data following discussion explains type associated instruction operand type information used generate particular machine opcodes general purpose instruction mnemonic register general purpose word twobyte register ax bx cx dx si di bp sp first four register subdivided general purpose onebyte register ah al bh bl ch cl dh dl also bit segment register c d e s used addressing memory implicit instructionpointer register referred ip although  ip  part assembly language variable variable unit program data symbolic name residing specific location memory variable given type time defined indicates number byte associated symbol variable defined db statement given type byte one byte defined dw statement given type word two byte example  bytevar db byte variable wordvar dw word variable label label symbol referring location program code defined identifier followed colon used represent location particular instruction data structure label may line may immediately precede instruction statement line following example label label label mov al bl instruction label label mov al bl assembly language label type identical constant thus instruction mov bx label accepted code move immediate constant address label bx generated important must understand distinction label variable may generate different instruction intended confuse example declare x dw colon following x mean x label instruction mov si x move immediate constant address x si register hand declare x dw colon x word variable instruction mov si x something different load runtime value memory word x si register constant constant numerical value computed assemblytime expression example represent constant constant differs variable specifies pure number known assembler program run rather number fetched memory program running generating opcodes general purpose mnemonic assembly language modeled intel asm language us general purpose mnemonic represent class machine instruction rather different mnemonic opcode example mov mnemonic used following move byte register byte register load word register memory load byte register constant move word register memory move immediate value word register move immediate value memory etc feature save distinguish  move   load   move constant   move memory   move byte   move word  etc  general purpose mnemonic apply several different machine opcodes us type information associated instruction operand determining particular opcode produce type information associated instruction operand also used discover programmer error attempting move word register byte register example follow illustrate use operand type generating machine opcodes discovering programmer error example mov instruction produce different opcode error symbol used example assumed defined follows bvar byte variable wvar word variable lab label examine mov instruction notice case operand right considered source operand left destination general rule applies twooperand instruction statement mov ax bx b move word register word register mov ax bl error type conflict word byte mov cx b move constant word register mov bvar al move al register byte memory mov al wvar error type conflict byte word mov lab error ca nt use labelconstant dest mov mov wvar si move word register word memory mov bl error constant large fit byte 