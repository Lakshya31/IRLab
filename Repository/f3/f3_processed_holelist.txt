please contribute sending email scott santafeedu  quoting compsecurityunix faq security hole manifest broadly four way physical security hole potential problem caused giving unauthorised person physical access machine might allow perform thing nt able good example would public workstation room would trivial user reboot machine singleuser mode muck around workstation filestore precaution taken another example need restrict access confidential backup tape may otherwise read user access tape tape drive whether meant permission software security hole problem caused badly written item  privledged  software daemon cronjobs compromised thing nt oughta famous example  sendmail debug  hole see bibliography would enable cracker bootstrap  root  shell could used delete filestore create new account copy password file anything contrary popular opinion crack attack via sendmail restricted infamous  internet worm  cracker could using  telnet  port target machine story behind similar hole time emacs  movemail  software described stoll new hole like appear time best hope try structure system little software possible run rootdaemonbin privilege known robust b subscribe mailing list get detail problem andor fix quickly possible act receive information wes morgan morgan eduukyms c installingupgrading given system try installenable software package immediate foreseeable need many package include daemon utility reveal information outsider instance system v unix accounting package includes acctcom default allow user review daily accounting data user many tcpip packa ge automatically installrun program rwhod fingerd occasionally tftpd present security problem careful system administration solution program initializedstarted boot time may wish modify boot script usually etc etcrc etcrcxd directory pre vent execution may wish remove utility completely utility simple chmod prevent access unauthorized user summary nt trust installation scriptsprograms facility tend installrun everything package without asking installation documentation includes list  program included package  sure review incompatible usage security hole lack experience fault hisher system manager assembles combination hardware software used system seriously flawed security point view incompatibility trying two unconnected useful thing creates security hole problem like pain find system set running better build system mind never late rethink though example detailed let go would spoil surprise choosing suitable security philosophy maintaining gene spafford spaf cspurdueedu fourth kind security problem one perception understanding perfect software protected hardware compatible component nt work unless selected appropriate security policy turned part system enforce best password mechanism world worthless user think login name backwards good password security relative policy set policy operation system conformance policy  hacking subject hacking idea date  please contribute sending email scott santafeedu  many idea taken haxnet apg v guide finding new hole note think divided general category general principle looking hole src item looking binary distribution looking site specific configuration following general classification suggest suidsgid return codeserror condition unexpected input race condition authentication implicit trust parameter permission interrupt io symbolic link daemon particularly taking user input kernel race condition else please add category suggested splitting main subcatagories suid binary script unexpected user interaction flawed liberary call implicit assumption external condition sym link loc path race condition ii daemon running priviliged uids race condition poor file protectons implicit file protection trust authentication iii kernel problem kernel race condition device driver code following four step method created system development corporation report success rate flaw hypothesis generated comprehensive search operating system flaw requires four step step knowledge system control structure  find security hole identifying design weakness necessary understand system control structure layer one able list security object item protected ie user file b control object item protect security object ie inode c mutual object object class ie password file list possible graphically represent control hierarchy identify potential point attack making flow chart give visual breakdown relationship definitely help reading various user operator administrator manual provide information following para probably moved  legal  section reading greping source code also prove valuable without source licence would suggest use linux net bsd distribution order stay legal future time may able form working contract someone company legal access distribution member actively participating project appears extract proprietary code may used academic study long reused commercial product checking necessary though step generate inventory suspected flaw ie flaw hypothesis  particular want code history unix src particular flavor derive important cross reference often one vendor patch certain code may get reused unpatched reincarnation others solid cross reference checked bug o version prevents u duplicating work good start would listing suid binary various o flavorsversions try work program suid ie rcp suid root must use privilaged port user name authentication often code never designed suid made suid durring porting solve file access problem need develope data base able look pair triplet data specificly program name suid sgid object accessed prog suidsgid o flavorversion flavvers geniology sugestions implement db step confirm hypothesis test exploit flaw  step make generalization underlying system weakness flaw represents specific instance  tool box  agrep suggest everyone obtain install agrep ftp csarizonaedu agrepagreptarz agrep support  windowing  look routine subroutine also support logical operator thus ideally suited automating search many following flaw ie psudocode agrep window suid taintperl usrlocalpl agrep window suid sgid system popen execlp execvp usrlocalsrcc permutation program another tool worth producing program generate possible permutation command line flagsarguments order uncover undocumented feature try produce error tcov crash posted usenet ftp archive descrip paper several paper discus method finding flaw present test suite emphirical study reliability unix utility barton p miller lars fredriksen bryan comm acm v n pp dec  describes test suite testing random input string result indicated program hung crashed misbehaved one case o crashed understanding buffer register layout environment question expected input likely produce desired result mothra tool set proceeding nd hawaii international conference system software page  kona hi january  extending mutation testing find environmental bug eugene h spafford software practice experience  feb  paper ibm mentioned submitted usenix year ago anyone citation specific flaw check  look routine nt boundary checking verify input ie get family routine possible overwrite buffer boundary sprintf get etc also strcpy src define scypyn b strcpy b sizeof suidsgid routine written one shell instead c perl suidsgid routine written perl nt use  taintperl  program suidsgid routine use system popen execlp execvp call run something else program us relative path name inside program use relative path name specify dynamically linked library look makefile routine nt check error return code system call ie fork suid etc setuid rather famous rcp bug hole often found code ported new environment b receives unexpected input c interacts local software access system file like passwd lsys etc e read input publicly writable filedirectory f diagnostic program typically userproofed test code unexpected input coverage data flow mutation testing tool available look man page user guide warning x try variation x ditto  bug  section look seldom used unusual function command read backwards particular looking undocumented flagsarguments may prove useful check flag prior release o version check option program might use instance telnet us h option login  right loginc seen getuid hflag syslog exit look race condition failure software authenticate really communicating desired software hardware module want accessing lack error detection reset protection mechanism following error poor implementation resulting example condition code improperly tested implicit trust routine b assumes routine parameter correct routine system process system store data reference user parameter user address space inter process communication return condition passwd ok illegal parameter segment error etc provide significant wedge esp combined user parameter may adequately checked address overlap refer system area condition code check may omitted failure anticipate unusual extraordinary parameter look system level module involved written different programmer group programmer hole likely found register point location parameter value instead passing value program running system privilege many progs given uid facilitate access certain table etc group world readable temporary file buffer etc lack threshold value lack loggingnotification triggered changing parameter critical system area prior execution concurrent process race condition inadequate boundary checking compile time example user may able execute machine code disguised data data area text data area shared improperly handling user generated asynchronous interrupt user interrupting process performing operation either returning continue process begin another frequently leave system unprotected state partially written file left open improper writing protection infraction message improper setting protection bit etc often occur code us fopen without setting umask eg etc general code reset real effective uid forking trace friend truss svr helping figure system call program using scan usrlocal f closely many admins install software net often find tcpdump top nfswatch  suid root ease use check suid program see one originally put system admins sometimes put passwd replacement le secure distributed version look program install software loadable kernel module dynamically linked program general remember ldpreload think variable io channel programming prime target look logical error inconsistency omission see possible io channel program modify loop back execute newly modified code instruction preload may screw io channel act independent processor may unlimited access memory thus system code may modified memory prior execution look bug requiring flaw multiple piece software ie say program used change config file etca program b assumes information correct lead unexpected result look many program trust etcutmp program especially suidsgid allow shell escape 