 opcodes instruction description aaa ascii adjust al carry ah addition aad ascii adjust division ax ah al aam ascii adjust multiply al ahquo alrem f aa ascii adjust al borrow ah subtraction ib adc al ib add carry immediate byte al iw adc ax iw add carry immediate word ax  ib adc eb ib add carry immediate byte ea byte r adc eb rb add carry byte register ea byte  ib adc ew ib add carry immediate byte ea word  iw adc ew iw add carry immediate word ea word r adc ew rw add carry word register ea word r adc rb eb add carry ea byte byte register r adc rw ew add carry ea word word register ib add al ib add immediate byte al iw add ax iw add immediate word ax  ib add eb ib add immediate byte ea byte r add eb rb add byte register ea byte  ib add ew ib add immediate byte ea word  iw add ew iw add immediate word ea word r add ew rw add word register ea word r add rb eb add ea byte byte register r add rw ew add ea word word register f add add cl nibble bcd d si e di cl even nz ib al ib logicaland immediate byte al iw ax iw logicaland immediate word ax  ib eb ib logicaland immediate byte ea byte r eb rb logicaland byte register ea byte  ib ew ib logicaland immediate byte ea word  iw ew iw logicaland immediate word ea word r ew rw logicaland word register ea word r rb eb logicaland ea byte byte register r rw ew logicaland ea word word register r arpl ew rw adjust rpl ea word smaller rpl rw r bound rw md int rw md md inclusive cd call cd call far segment immediate byte address e cw call cw call near offset relative next instruction ff  call ed call far segment address ea doubleword ff  call ew call near offset absolute ea word f ff ib call ib call emulation code int number ib cbw convert byte word ah top bit al f clc clear carry flag fc cld clear direction flag si di increment fa cli clear interrupt enable flag interrupt disabled  f  clrbit eb cl clear bit cl eb f  clrbit ew cl clear bit cl ew f ib clrbit eb ib clear bit ib eb f b ib clrbit ew ib clear bit ib ew f clts clear task switched flag f cmc complement carry flag c ib cmp al ib subtract immediate byte al flag iw cmp ax iw subtract immediate word ax flag  ib cmp eb ib subtract immediate byte ea byte flag r cmp eb rb subtract byte register ea byte flag  ib cmp ew ib subtract immediate byte ea word flag  iw cmp ew iw subtract immediate word ea word flag r cmp ew rw subtract word register ea word flag r cmp rb eb subtract ea byte byte register flag b r cmp rw ew subtract ea word word register flag f cmps compare cl nibble cd d si e di cl even nz cmps mb mb compare byte e di si advance si di cmps mw mw compare word e di si advance si di cmpsb compare byte e di d si advance si di cmpsw compare word e di d si advance si di cwd convert word doubleword dx top bit ax daa decimal adjust al addition f da decimal adjust al subtraction fe  dec eb decrement ea byte ff  dec ew decrement ea word rw dec rw decrement word register f  div eb unsigned divide ax ea byte alquo ahrem f  div ew unsigned divide dxax ea word axquo dxrem c iw enter iw make stack frame iw byte local storage level c iw enter iw make stack frame iw byte local storage level c iw ib enter iw ib make stack frame iw byte local storage ib level fany floating point set chapter f hlt halt f  idiv eb signed divide ax ea byte alquo ahrem f  idiv ew signed divide dxax ea word axquo dxrem f  imul eb signed multiply ax al ea byte f  imul ew signed multiply dxax ax ea word b r ib imul rw ib signed multiply immediate byte word register r iw imul rw iw signed multiply immediate word word register r iw imul rw ew iw signed multiply rw ea word immediate word b r ib imul rw ew ib signed multiply rw ea word immediate byte e ib al ib input byte immediate port al ec al dx input byte port dx al e ib ax ib input word immediate port ax ed ax dx input word port dx ax fe  inc eb increment ea byte ff  inc ew increment ea word rw inc rw increment word register c in eb dx input byte port dx di in ew dx input word port dx di c insb input byte port dx e di insw input word port dx e di  cc int interrupt trap debugger far call flag cd ib int ib interrupt numbered immediate byte pushed first ce interrupt overflow flag cf iret interrupt return far return pop flag cb ja cb jump short cf zf aboveunsigned cb jae cb jump short equal cf cb jb cb jump short cf belowunsigned cb jbe cb jump short equal cf zf cb jc cb jump short carry cf e cb jcxz cb jump short cx register zero cb je cb jump short equal zf f cb jg cb jump short greater zf sfof greatersigned cb jge cb jump short greater equal sfof c cb jl cb jump short le sfof lesssigned e cb jle cb jump short le equal zf sfof eb cb jmp cb jump short signed byte relative next instruction ea cd jmp cd jump far byte immediate address e cw jmp cw jump near word offset relative next instruction ff  jmp ew jump near ea word absolute offset ff  jmp md jump far byte address memory doubleword cb jna cb jump short cf zf cb jnae cb jump short equal cf cb jnb cb jump short cf cb jnbe cb jump short equal cf zf cb jnc cb jump short carry cf cb jne cb jump short equal zf e cb jng cb jump short greater zf sfof c cb jnge cb jump short greater equal sfof cb jnl cb jump short le sfof f cb jnle cb jump short le equal zf sfof cb jno cb jump short overflow b cb jnp cb jump short parity pf cb jns cb jump short sign sf cb jnz cb jump short zero zf cb jo cb jump short overflow cb jp cb jump short parity pf cb jpe cb jump short parity even pf b cb jpo cb jump short parity odd pf cb j cb jump short sign sf cb jz cb jump short zero zf f lahf load ah flag sf zf xx af xx pf xx cf f r lar rw ew load high rw access right byte selector ew c r lds rw ed load ea doubleword d word register r lea rw calculate ea offset given place rw c leave set sp bp pop bp revers previous enter c r le rw ed load ea doubleword e word register f  lgdt load byte global descriptor table reg f  lidt load byte interrupt descriptor table reg f  lldt ew load selector ew local descriptor table reg f  lmsw ew load ea word machine status word f lock prefix assert buslock signal next instruction  f r lodbits rb rb load ax d si bit rb incr si rb rb bit f b ib lodbits rb ib load ax d si bit rb incr si rb ib bit ac lods mb load byte si al advance si ad lods mw load word si ax advance si ac lodsb load byte si al advance si ad lodsw load word si ax advance si e cb loop cb noflags dec cx jump short cx e cb loope cb noflags dec cx jump short cx equal zf e cb loopne cb noflags dec cx jump short cx equal e cb loopnz cb noflags dec cx jump short cx zf e cb loopz cb noflags dec cx jump short cx zero zf f r lsl rw ew load rw segment limit selector ew f  ltr ew load ea word task register iw mov al xb move byte variable offset iw al iw mov ax xw move word variable offset iw ax e  mov d mw move memory word d e  mov d rw move word register d c  ib mov eb ib move immediate byte ea byte r mov eb rb move byte register ea byte e  mov e mw move memory word e e  mov e rw move word register e c  mov ew c move c ea word c  mov ew d move d ea word c  iw mov ew iw move immediate word ea word c  mov ew e move e ea word r mov ew rw move word register ea word c  mov ew s move s ea word brb ib mov rb ib move immediate byte byte register r mov rb eb move ea byte byte register brw iw mov rw iw move immediate word word register b r mov rw ew move ea word word register e  mov s mw move memory word s e  mov s rw move word register s iw mov xb al move al byte variable offset iw iw mov xw ax move ax word register offset iw movs mb mb move byte si e di advance si di movs mw mw move word si e di advance si di movsb move byte d si e di advance si di movsw move word d si e di advance si di  f  mul eb unsigned multiply ax al ea byte f  mul ew unsigned multiply dxax ax ea word f  neg eb two complement negate ea byte f  neg ew two complement negate ea word nil prefix special  donothing  opcode assembles code nop operation f  eb reverse bit ea byte f  ew reverse bit ea word f  notbit eb cl complement bit cl eb f  notbit ew cl complement bit cl ew f e ib notbit eb ib complement bit ib eb f f ib notbit ew ib complement bit ib ew c ib al ib logicalor immediate byte al iw ax iw logicalor immediate word ax  ib eb ib logicalor immediate byte ea byte r eb rb logicalor byte register ea byte  ib ew ib logicalor immediate byte ea word  iw ew iw logicalor immediate word ea word r ew rw logicalor word register ea word r rb eb logicalor ea byte byte register b r rw ew logicalor ea word word register e ib ib al output byte al immediate port number ib e ib ib ax output word ax immediate port number ib ee dx al output byte al port number dx ef dx ax output word ax port number dx e out dx eb output byte si port number dx advance si f out dx ew output word si port number dx advance si e outsb output byte d si port number dx advance si f outsw output word d si port number dx advance si f pop d set d top stack increment sp pop e set e top stack increment sp f  pop mw set memory word top stack increment sp rw pop rw set word register top stack increment sp pop s set s top stack increment sp popa pop di si bp sp bx dx cx ax sp value ignored popf set flag register top stack increment sp e push c set sp c decrement sp e push d set sp d decrement sp push e set sp e decrement sp ib push ib push signextended immediate byte iw push iw set sp immediate word decrement sp ff  push mw set sp memory word decrement sp rw push rw set sp word register decrement sp push s set sp s decrement sp pusha push ax cx dx bx original sp bp si di c pushf set sp flag register decrement sp  rcl eb rotate bit quantity cf ea byte left  rcl eb cl rotate bit quantity cf ea byte left cl time c  ib rcl eb ib rotate bit quantity cf ea byte left ib time  rcl ew rotate bit quantity cf ea word left  rcl ew cl rotate bit quantity cf ea word left cl time c  ib rcl ew ib rotate bit quantity cf ea word left ib time   rcr eb rotate bit quantity cf ea byte right  rcr eb cl rotate bit quantity cf ea byte right cl time c  ib rcr eb ib rotate bit quantity cf ea byte right ib time  rcr ew rotate bit quantity cf ea word right  rcr ew cl rotate bit quantity cf ea word right cl time c  ib rcr ew ib rotate bit quantity cf ea word right ib time f rep prefix repeat following movs lods stos in out cx time repc prefix repeat following cmps scas cx time cf f repe prefix repeat following cmps scas cx time zf repnc prfix repeat following cmps scas cx time cf f repne prfix repeat following cmps scas cx time zf f repnz prfix repeat following cmps scas cx time zf f repz prefix repeat following cmps scas cx time zf cb retf return far caller pop offset seg c ret return near caller pop offset ca iw retf iw ret far pop offset seg iw byte c iw ret iw ret near pop offset iw byte pushed call  rol eb rotate bit ea byte left  rol eb cl rotate bit ea byte left cl time c  ib rol eb ib rotate bit ea byte left ib time  rol ew rotate bit ea word left  rol ew cl rotate bit ea word left cl time c  ib rol ew ib rotate bit ea word left ib time f  rol eb rotate nibble hebleb hal leblal lalheb  ror eb rotate bit ea byte right  ror eb cl rotate bit ea byte right cl time c  ib ror eb ib rotate bit ea byte right ib time  ror ew rotate bit ea word right  ror ew cl rotate bit ea word right cl time c  ib ror ew ib rotate bit ea word right ib time f ror eb rotate nibble lebheb heblal aleb e sahf store ah flag sf zf xx af xx pf xx cf  sal eb multiply ea byte  sal eb cl multiply ea byte cl time c  ib sal eb ib multiply ea byte ib time  sal ew multiply ea word  sal ew cl multiply ea word cl time c  ib sal ew ib multiply ea word ib time  sar eb signed divide ea byte  sar eb cl signed divide ea byte cl time c  ib sar eb ib signed divide ea byte ib time  sar ew signed divide ea word  sar ew cl signed divide ea word cl time c  ib sar ew ib signed divide ea word ib time  c ib sbb al ib subtract borrow immediate byte al iw sbb ax iw subtract borrow immediate word ax  ib sbb eb ib subtract borrow immediate byte ea byte r sbb eb rb subtract borrow byte register ea byte  ib sbb ew ib subtract borrow immediate byte ea word  iw sbb ew iw subtract borrow immediate word ea word r sbb ew rw subtract borrow word register ea word r sbb rb eb subtract borrow ea byte byte register b r sbb rw ew subtract borrow ea word word register ae scas mb compare byte al e di advance di af scas mw compare word al e di advance di ae scasb compare byte ax e di advance di af scasw compare word ax e di advance di f  setbit eb cl set bit cl eb f  setbit ew cl set bit cl ew f c ib setbit eb ib set bit ib eb f ib setbit ew ib set bit ib ew f  sgdt store byte global descriptor table register  shl eb multiply ea byte  shl eb cl multiply ea byte cl time c  ib shl eb ib multiply ea byte ib time  shl ew multiply ea word  shl ew cl multiply ea word cl time c  ib shl ew ib multiply ea word ib time  shr eb unsigned divide ea byte  shr eb cl unsigned divide ea byte cl time c  ib shr eb ib unsigned divide ea byte ib time  shr ew unsigned divide ea word  shr ew cl unsigned divide ea word cl time c  ib shr ew ib unsigned divide ea word ib time f  sidt store byte interrupt descriptor table register f  sldt ew store local descriptor table register ea word f  smsw ew store machine status word ea word f stc set carry flag fd std set direction flag si di decrement fb sti set interrupt enable flag interrupt enabled f r stobits rb rb store ax e di bit rb incr di rb rb bit f  ib stobits rb ib store ax e di bit rb incr di rb ib bit aa stos mb store al byte di advance di ab stos mw store ax word di advance di aa stosb store al byte e di advance di ab stosw store ax word e di advance di f  str ew store task register ea word  c ib sub al ib subtract immediate byte al iw sub ax iw subtract immediate word ax  ib sub eb ib subtract immediate byte ea byte r sub eb rb subtract byte register ea byte  ib sub ew ib subtract immediate byte ea word  iw sub ew iw subtract immediate word ea word r sub ew rw subtract word register ea word r sub rb eb subtract ea byte byte register b r sub rw ew subtract ea word word register f sub sub cl nibble bcd d si e di cl even nz ib test al ib immediate byte al flag iw test ax iw immediate word ax flag f  ib test eb ib immediate byte ea byte flag r test eb rb byte register ea byte flag f  iw test ew iw immediate word ea word flag r test ew rw word register ea word flag r test rb eb ea byte byte register flag r test rw ew ea word word register flag f  testbit eb cl test bit cl eb set z flag f  testbit ew cl test bit cl ew set z flag f  ib testbit eb ib test bit ib eb set z flag f  ib testbit ew ib test bit ib ew set z flag b wait wait busy pin inactive high f  verr ew set zf segment read selector ew f  verw ew set zf segment written selector ew r xchg ax rw exchange word register ax r xchg eb rb exchange byte register ea byte r xchg ew rw exchange word register ea word r xchg rb eb exchange ea byte byte register r xchg rw ax exchange word register r xchg rw ew exchange ea word word register xlat mb set al memory byte bx unsigned al xlatb set al memory byte d bx unsigned al ib xor al ib exclusiveor immediate byte al iw xor ax iw exclusiveor immediate word ax  ib xor eb ib exclusiveor immediate byte ea byte r xor eb rb exclusiveor byte register ea byte  ib xor ew ib exclusiveor immediate byte ea word  iw xor ew iw exclusiveor immediate word ea word r xor ew rw exclusiveor word register ea word r xor rb eb exclusiveor ea byte byte register r xor rw ew exclusiveor ea word word register starred form execute  see note top chart instruction work nec chip see note top chart 