nfs tracing passive network monitoring matt blaze department computer science princeton university mab csprincetonedu abstract trace filesystem activity proven useful wide variety purpose ranging quantitative analysis system behavior tracedriven simulation filesystem algorithm trace difficult obtain however usually entailing modification filesystems monitored runtime overhead period trace largely difficulty surprisingly small number filesystem trace conducted sample workload available filesystem researcher paper describes portable toolkit deriving approximate trace nfs activity nonintrusively monitoring ethernet traffic file server toolkit us promiscuous ethernet listener interface packetfilter read reconstruct nfsrelated rpc packet intended server produce trace nfs activity well plausible set corresponding client system call tool currently use princeton site available via anonymous ftp motivation trace real workload form important part virtually analysis computer system behavior whether program hot spot memory access pattern filesystem activity studied case filesystem activity obtaining useful trace particularly challenging filesystem behavior span long time period often making necessary collect huge trace week even month modification filesystem collect trace data often difficult may result unacceptable runtime overhead distributed filesystems exa cerbate difficulty especially network composed large number heterogeneous machine result difficulty relatively small number trace unix filesystem workload conducted primarily computing research environment example trace since distributed filesystems work transmitting activity network would seem reasonable obtain trace system placing  tap  network collecting trace data based network traffic ethernet based network lend approach particularly well since traffic broadcast machine connected given subnetwork number generalpurpose network monitoring tool avail able  promiscuously  listen ethernet connected sun etherfind example tool tool useful observing collecting statistic specific type packet information provide low level useful building filesystem trace filesystem operation may span several packet may meaningful context previous operation work done characterizing impact nfs traffic network load example result study reported ethernet traffic monitored statistic gathered nfs activity useful understanding traffic pattern developing queueing model nfs load previous stu dy use network traffic analyze file access traffic pattern system focusing instead developing statistical model individual packet source destination type paper describes toolkit collecting trace nfs file access activity monitoring ethernet traffic  spy  machine promiscuous ethernet interface connected network file server nfsrelated packet analyzed trace produced appropriate level detail tool record low level nfs call approximation userlevel system call open close etc triggered activity partition problem deriving nfs activity raw network traffic two fairly distinct subprob lem decoding lowlevel nfs operation packet network translating lowlevel command back userlevel system call hence toolkit consists two basic part  rpc decoder  rpcspy  nfs analyzer  nfstrace rpcspy communicates lowlevel network monitoring facility sun nit packetfilter read reconstruct rpc transaction call reply make nfs command nfstrace take output rpcspy reconstructs sys tem call occurred well interesting data derive structure filesystem mapping nfs file handle unix file name since clean onetoone mapping system call lowerlevel nfs command nfstrace us simple heuristic guess reasonable approximation really occurred  spy view nfs protocol well beyond scope paper describe protocol used nfs detailed description nfs work reader referred follows brief overview nfs activity translates ethernet packet nfs network consists server filesystems physically connected client per form operation remote server filesystems disk locally connected particular machine client server client mount remote server filesystems local hierarchy local filesystems user perspective file nfs local filesystems part indistinguishable manipulated usual filesystem call interface client server defined term remote procedure call rpc operation remote file directory referred file handle uniquely identifies file server operation read write byte file read write obtain file attribute getattr obtain content directory lookup readdir create file create forth operation direct analog unix system call notably absent open close operation client state information maintained server need inform server explicitly file use client maintain buffer cache entry nfs file must verify block still valid checking last write time getattr operation using cached data rpc transaction consists call message argument client server reply me sage return data server client nfs rpc call transmitted using udpip connection le unreliable datagram protocol call message contains unique transaction identifier included reply message enable client match reply call data message encoded  external data representation  xdr provides machineindependent standard byte order etc note nfs server maintains state information client know nothing context operation outside argument operation rpcspy program rpcspy interface systemdependent ethernet monitoring facility produce trace rpc call issued given set client server present version rpcspy number bsdderived system including ultrix packetfilter sunos nit ibm rt running aos stanford enet filter rpc transaction monitored rpcspy produce ascii record containing timestamp name server client length time command took execute name rpc command executed command specific argument return data currently rpcspy understands decode nfs rpc command hook allow rpc service example ni added reasonably easily output may read directly piped another program nfstrace analysis mat designed reasonably friendly human reader program nfstrace awk since rpc transaction consists two message call reply rpcspy wait receives component emits single record entire transaction basic output format verticalbar separated field timestamp executiontime server client commandname argument replydata timestamp time reply message received executiontime time microsecond elapsed call reply server name ip address server client name ip address client followed userid issued command commandname name particular program invoked read write getattr etc argument replydata command dependent argument return value passed rpc program respectively exact format argument reply data dependent specific command issued level detail user want logged example typical nfs command recorded follows  paramount merckx read  bfc  ok example uid client  merckx  issued nfs read command server  paramount  reply issued unix time  second call command occurred microsecond earlier three argument logged read call file handle read represented hexadecimal string offset beginning file number byte read example byte requested starting beginning byte file whose handle  bfc  command completed successfully status  ok  byte returned course reply message also included byte data file field reply logged rpcspy rpcspy number configuration option control host rpc command traced call reply field printed ethernet interface tapped long wait reply message long run etc primary function provide input nfstrace program see section judi cious use option well program grep awk etc permit use simple nfs diag nostic performance monitoring tool screen output give surprisingly informative snapshot current nfs activity identified quickly using program several problem otherwise difficult pinpoint similarly short awk script provide breakdown active client server host sampled time period  implementation issue basic function rpcspy monitor network extract packet containing nfs data print data useful format since rpc transaction consists call reply rpcspy maintains table pending call packet removed emitted matching reply arrives normal operation reasonably fast workstation rarely requires two megabyte memory even busy net work unusually slow file server server go however queue pending call message never matched reply quickly become memory hog user specify maximum size table allowed reach  orphaned  call searched reclaimed file handle pose special problem nfs file handle fixed size number significant bit varies implementation implementation even within vendor two different release operating system might use completely different internal handle format unix implementation handle contains filesystem identifier inode number file sometimes augmented additional information version number since program using rpcspy output generally use handle unique file identifier important appear one handle file unfortunately sufficient simply consider handle bitstring maximum handle size since many operating system zero unused extra bit assigning handle fortunately server least consistent size handle assign rpcspy allows user specify command line startup file handle size host monitored handle server emitted hexadecimal string truncated length size specified guess made based common format reasonable size usually desirable emit ip address client server symbolic host name early ver sion software simply nameserver lookup time necessary quickly flooded network nameserver request nfs transaction current version maintains cache host name requires modest amount memory typical network le hundred host large network nfs service provided large number remote host could still potential problem last resort remote name resolution could disabled rpcspy configured translate ip address udpip datagrams may fragmented among several packet datagram larger maximum size single ethernet frame rpcspy look first fragment practice fragmentation occurs data field nfs read write transaction ignored anyway  nfstrace filesystem tracing package although rpcspy provides trace lowlevel nfs command sufficient obtaining useful filesystem trace lowlevel command reveal userlevel activity furth ermore volume data would need recorded potentially enormous order megabyte per hour useful would abstraction userlevel system call underlying nfs activity nfstrace filter rpcspy produce log plausible set user level filesystem command could triggered monitored activity record produced time file opened giving summary occurred summary detailed enough analysis use input filesystem simulator output format nfstrace consists field timestamp commandtime direction fileid client transferred size timestamp time open occurred commandtime length time open close direc tion either read write mkdir readdir count write read respectively fileid identifies server file handle client client user performed open transferred number byte file actually read written cache hit field size size file byte example record might follows  read bassobff frejus userid client frejus read file bff server basso file byte long able read client cache command started unix time  took microsecond server execute since sometimes useful know name corresponding handle mode information file nfstrace optionally produce map file handle file name mode enough information lookup readdir command received new name added name change time file deleted renamed time mapping considered valid recorded well mapping infor mation may always complete however depending much activity already observed also hard link confuse name mapping always possible determine several possible name file opened nfstrace produce approximation underlying user activity since nfs open close command program must guess system call occur taking advantage observation nfs fairly consistent file opened file local buffer cache getattr call made file verify changed since file cached otherwise actual byte file fetched read user possible part file cache part case getattr performed missing piece fetched occurs often demandpaged executable loaded nfstrace assumes sequence nfs read call file issued user client part single open read close assumed taken place last read sequence completes end read sequence detected client read beginning file timeout reading elapsed writes handled similar manner read entirely client cache bit harder every getattr command caused cache read cache read take place without getattr user level stat system call sometimes trigger getattr l l command fortunately attribute caching used implementation nfs seems eliminate many extraneous getattrs l command appear trigger lookup command time nfstrace assumes getattr file client read within past hour represents cache read otherwise ignored simple heuristic seems fairly accurate practice note also getattr might performed read occurs soon last read time threshold generally short enough rarely problem still cached read nfstrace report best estimate generally erring side overreporting way determine number byte actually read cache hit output nfstrace necessarily produced chronological order may sorted easily postprocessor nfstrace host option control level detail trace length timeouts facilitate production long trace output flushed checkpointed specified inter val automatically compressed using rpcspy nfstrace filesystem tracing clearly nfstrace suitable producing highly accurate trace cache hit estimated timing information imprecise data lost duplicated network packet accounted highly accurate trace required approach modification client server kernel must employed main virtue passivemonitoring approach lie simplicity baker et al describe trace distributed filesystem involved lowlevel modification several different operating system kernel contrast entire filesystem trace package consists le line code written single programmer week involves kernel modification installed monitor multiple heterogeneous server client knowledge even operating system running important parameter affecting accuracy trace ability machine rpcspy running keep network traffic although modern risc workstation reasonable ethernet interface able keep typical network load important determine much informa tion lost due packet buffer overrun relying upon trace data also important trace indeed nonintrusive quickly became obvious example logging traffic nfs filesystem problematic another parameter affecting usefulness trace validity heuristic used translate rpc call userlevel system call test shell script written performed l l touch cp wc command randomly small directory hierarchy keeping record file touched read time several hour nfstrace able detect writes uncached read  cached read cached read overreported even though l com mands cause  phantom  read made test activity test provides encouraging evidence accuracy trace conclusive since particular workload monitored may fool nfstrace unanticipated way research data collected behavior human subject privacy individu al observed concern although content file logged toolkit still possible learn something individual user examining file read write minimum user mon itored system informed nature trace us put case may necessary disable name translation nfstrace data provided others commercial site filename might reveal something proprietary project particularly sensitive concern trace filesystem activity princeton c department previous paper analyzed fiveday long trace filesystem activity conducted research worksta tions decsrc paper identified number file access property affect filesystem caching perfor mance difficult however know whether property unique artifact particular environment generally applicable help answer question necessary look similar trace computing environment relatively easy use rpcspy nfstrace conduct week long trace filesystem activity princeton university computer science department departmental computing facility serf community approximately user researcher faculty graduate student undergraduate researcher postdoctoral staff etc office staff system staff rest guest  external  user user work fulltime building use system heavily electronic mail netnews communication service well computer science research oriented task editing compiling executing program formatting document etc computing facility consists central auspex file server f user ordinarily log directly four dec elan hart atomic dynamic used shared cycle server assortment dedicated workstation next machine sun workstation ibmrts iris workstation etc indi vidual office laboratory user log one four cycle server via x window terminal located office terminal divided evenly among four server number ethernet throughout building central file server connected  machine room network  user terminal directly connected traffic file server outside machine room gatewayed via cisco router four cycle server local bin tmp filesystem filesystems including usr usrlocal user home directory nfs mounted f mail sent local machine delivered locally shared f usrspoolmail mail outside delivered directly f trace conducted connecting dedicated dec  local disk machine room net work network carry nfs traffic home directory access access nonlocal cycleserver file including activelyused program typical weekday million packet transmitted network nfstrace configured record open read write directory access individual read writes one week wednesday wednesday  open read  open write recorded occupying mb compressed disk space traffic four cycle server attempt made  normalize  workload trace period although user notified file access recorded provided opportunity ask excluded data collection user seemed simply continue normal work similarly correction made anomalous user activity may occurred trace  workload time intuitively volume traffic expected vary time day figure show number read writes per hour seven day trace particular volume write traffic seems mirror general level departmental activity fairly closely important metric nfs performance client buffer cache hit rate four cycle server allocates approximately mb memory buffer cache estimated aggregate hit rate percentage read served client cache seen file server surprisingly low  entire week given hour hit rate never exceeded figure plot actual server read estimated cache hit per hour trace week observe hit rate worst period heaviest read activity past study predicted much higher hit rate aggregate observed probable since traffic generated shared cycle server low hit rate attributed large number user competing cache space fact hit rate observed much higher singleuser worksta tions monitored study averaging overall suggests somewhat counterintuitively computer added network user private workstation server load would decrease considerably figure show actual cache miss estimated cache hit typical private work tation study thu  thu  thu  thu  fri  fri  fri  fri  sat  sat  sat  sat  sun  sun  sun  sun  mon  mon  mon  mon  tue  tue  tue  tue  wed  wed  wed  wed  readswrites per hour writes read figure read write traffic time  file sharing one property observed decsrc trace tendency file used multiple workstation make significant proportion read traffic small proportion write traffic important implication caching strategy since true file cached many place rarely need invalidated although princeton computing facility single workstation per user similar metric degree file read one user read written respect princeton trace similar decsrc trace file read one user make read traffic le write traffic file shared ten user make le  write traffic still read traffic figure plot number user previously read file number read writes  file  entropy  file decsrc trace demonstrated strong tendency  become  readonly read often probability next operation given file overwrite file drop shar ply proportion number time read past like sharing property implication caching strategy since probability cached data valid influence choice validation scheme find property strong princeton trace file access trace probability write file already read least since last written write probability drop file read least five time write probability drop fig ure plot observed write probability number read since last write thu  thu  thu  thu  fri  fri  fri  fri  sat  sat  sat  sat  sun  sun  sun  sun  mon  mon  mon  mon  tue  tue  tue  tue  wed  wed  wed  wed  total read per hour cache hit estimated cache miss actual figure cache hit miss time conclusion although filesystem trace useful tool analysis current proposed system difficulty collecting meaningful trace data make trace difficult obtain performance degradation introduced trace software volume raw data generated make trace long time period outside comput ing research facility particularly hard conduct although accurate direct kernelbased tracing passive network monitor one described paper permit tracing distributed system relatively easily ability limit data collected highlevel log data required make practical conduct trace several month long term trace presently conducted princeton part author research filesystem caching nonintrusive nature data collection make trace possible facility kernel modification impracti cal unacceptable author hope site particularly computing research make use toolkit make trace available filesystem researcher availability toolkit consisting rpcspy nfstrace several support script currently run several bsdderived platform including ultrix x sunos x ibmrtaos available anonymous ftp internet samadamsprincetonedu compressed tar file nfstracenfstracetarz thu  thu  thu  thu  fri  fri  fri  fri  sat  sat  sat  sat  sun  sun  sun  sun  mon  mon  mon  mon  tue  tue  tue  tue  wed  wed  wed  wed  read per hour cache hit estimated cache miss actual figure cache hit miss time private workstation n reader read writes used n user read writes figure degree sharing read writes read since last write    p next operation write figure probability write given n previous read acknowledgment author would like gratefully acknowledge jim robert steve beck help getting trace machine running rafael alonso helpful comment direction member pro gram committee valuable suggestion jim plank deserves special thanks writing jgraph software produced figure paper reference sandberg r goldberg kleiman walsh lyon b  design implementation sun net work file system  proc usenix summer mogul j rashid r accetta  packet filter efficient mechanism userlevel network code  proc th acm symp operating system principle ousterhout j et al  tracedriven analysis unix  bsd file system  proc th acm symp operating system principle floyd r  shortterm file reference pattern unix environment  tr dept comp sci u rochester baker et al  measurement distributed file system  proc th acm symp operating system principle metcalfe r boggs  ethernet distributed packet switching local computer network  cacm july  etherfind manual page  sunos reference manual sun microsystems gusella r  analysis diskless workstation traffic ethernet  trucbcsd university california berkeley  nit manual page  sunos reference manual sun microsystems  xdr protocol specification  networking sun workstation sun microsystems  rpc protocol specification  networking sun workstation sun microsystems  nfs protocol specification  networking sun workstation sun microsystems postel j  user datagram protocol  rfc network information center blaze alonso r  longterm caching strategy large distributed file system  proc summer usenix matt blaze phd candidate computer science princeton university expects receive degree spring research interest include distributed system operating system database programming environment current research focus caching large distributed filesystems received m computer science columbia university b hunter college reached via email mab csprincetonedu via u mail dept computer science princeton university olden street princeton nj  