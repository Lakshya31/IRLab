 hacking program amiga funtohack kw christchurch new zealand spelling mistake free version  introduction hacking article want talk hacking amiga lot also apply st reason writing article number time heard question  hack something  one question ca nt answered pointing asker book thought would put method use article help inspire budding young hacker certainly interested method others using read article say nt learn anything article intended read say could written better article please done hacking may want skim first stuff look bit entitled  actual hacking game  want talk technique tracing program encryption program etc past written two file monitor program monam highsofts devpac monitor program one instruction running monam one list method using monam help trace etc uploaded second file much confusion thing etc third one decided hell included bottom file completeness form protection photocopying manual two basic form protection disk protection disk funny track hard copy game check whether track copied correctly track come error copy program although necessarily true case disk funny byte long track game check fact disk copied without error missing extra bit still wo nt run form protection manual protection kind protection one program come asks word particular page manual copy manual run game use exactly lately make difficult printing book red black photocopy book get lovely black blob future war getting identify colour picture giving different copy colour picture choose even colour photocopy manual chance getting good enough copy manual tell subtle difference amiga screen allow slim little note trying photocopy page something like red black achieve good result placing filter page photocopying filter cry get one well believe get really good result white plastic bag try nt believe saw someone course different colour bag used different colour page manual form protection getting popular game writer one main reason put disk installed hard drive trouble get manual ever time want run game course also case guy bought original game lot people bought game still interested hacked copy game get around manual ask anyone bought copy midwinter game could take anything minute get started reward nice enough buy real one copying disk hacking first thing copy disk program xcopy always put verify highly recommend use doscopy mode doscopy correct error disk program maybe looking illustrate point take brand new disk nt formatted use source disk xcopy doscopy option selected find copy whole disk correcting sector could nt find go copy disk xcopy doscopy mode game weird disk format nibble copy well hack talk section end called  disk funny format  finding thing game want hack first thing want know whether game run cli whether boot boot sector way find boot game hit ctrl repeatedly tap ctrl hold game stop executing drop cli know start startupsequence boot sector game wo nt stop booted boot sector found exception hacked game castle master code boot sector clobbered lot address confused machine responding control sequence confused bit found install copy disk ordinary boot sector made difference running game also remember hacking one st booted boot sector loaded everything directly track directory file big file length none disk directory another disk example rear serve remind u programmer trying make hard u sometime find game stop loading screen completely black great secret preference colour defined black game run would go set colour whatever required nt effect game make hard u see going two way around one kill systemconfiguration file devs directory copy one another disk way boot normal system disk put game hacked drive look good look disk want look startupsequence see program actually start game one thing find far copied game go fails protection game stop straight away normally easier hack dont wade much code find protection game go demo mode make game lot harder hack look code program busy real thing make harder find failing protection noble game way pipemanier time carmen sandiago let play one level obvious whether succeeded hacking game especially time beat first level found hacked thick take two three go complete first level course slows plus put hacking important thing find game game run monam lot game detect run another task go count white elephant even protection case find checking hack bit first nt fun another import thing notice anything happens fails protection castle master every time failed protection flashed border red black made really easy job find protection searched code register controlled boarder colour worked backwards could also display string saying fail even lucky could get message  federation software piracy  think called game using manual protection note word asking word manual find part program display message put break point run game break point save lot single steeping probably test correct word soon searching string easy matter latter another thing listen loud graunching sound quite often program checking disk protection preparing tracing game running use monitor program called monam part devpac package highsoft already written file monam explaining command added another covering handy hint using monam bottom file one thing may know copy monam manual companion library monam look libs directory libfilemonam system disk disk booted monam find library started tracing game convert system call number proper call name tracing constantly looking book time find ok boot favorite hacking disk start monam insert game disk enter program name start tracing fine nt boot game disk game let especially one protection program listed startupsequence dont load file checking protection also game go ever disk load file need nt think ever seen one check funny track drive drive df ok game really want system disk game disk boot game disk stopping control run monam second drive command df cmonam still look libs directory system disk library file case game disk course find course could always copy room disk never know going copy something disk important game worried safe way cake eat use assign command cli insert system disk monam df type df cassign libs df libs amiga treat game disk system disk except libs directory find df ok get away booting favorite hacking disk loading program second drive booting hacking disk starting monam put game disk enter program name load start tracing definitely game let run whole game second drive hard drive go first drive check disk protection great help trying find check protection  actual hacking game preliminary stuff way time start getting actual hacking game usually small job involve lot late night gallon coffee phone number hour pizza delivery look game run program first look boot sector one end article ok load monam load program program load memory going run stop program counter set start program try break file logical bit symbol table writing program use label guy girl writing program assembled source code symbol table enter monam label appear left hand side column press l label address displayed table good look label look anything intelligent routine called protection dont laugh happened one occasion also label pointing protection message etc tracing program mentioned file tagged bottom one instruction monam quickly trace command control z command single step program instruction time control command place break point next instruction run program wonderful running subroutine also great instruction run bottom dbeq loop going around around loop stop program counter hit breakpoint amiga z expand window full screen tab move next window g search b byte bit w wide bit l long bit text instruction source code r run program amiga b set breakpoint enter address parameter parameter nothing stop first time clear break point number  go break point number time stop always stop never clear break point remember ca nt break point rom following library call silly take age really meant single stepped accidentally started rom library call press h history see instruction jsr place break point run program stop hit break point ok trace program instruction especially use control function lot find subroutine protection life trace program going control execute bsr jsr full speed get sound drive checking disk protection asking word manual ok get subroutine nt go control go control z instead look subroutine normally find full code subroutine start going subroutine going control subroutine see narrow protection gee sound nice easy extremely quick trouble lot game protection long way game often find introduction sequence even think protection jumping ahead code something remember little bit program code turn economize bit source code anywhere  time size program code hell lot code look stuff noticed game start becomes handy even something simple like program load title screen disk protection search program name title screen work backwards find bit code using file name load file see searching string place break point somewhere title screen loaded save hell lot single stepping get somewhere might interest u anything find save lot time searching string ok lot game day using manual protection quite good game want install hard drive see  form protection photocopying manual  advice copying colour protected manual ok game usually come ask word form manual line normally pretty easy find search memory find string check nt found string left earlier load game way note address press help hunk list check address contained one hunk otherwise part program running remember get case letter string right wont find string also remember nt search whole string enough make unique also longer string search longer take find dont search string like  page number manual   page number   manual  might two different string might space might course dont search page number even see screen chance program patch number string printing whole string unlikely ok found string nt mean thing need bit code us string string self work backwards first quick look around see anything pointing address string likely search normally search address instruction version search command different addressing mode nt mean string pointed hex number could form something like hex search wo nt find instruction search value supposed another thing work couple time search distance start hunk string start string self use command work important thing must remember string searching actually start look string string length string byte front string value searching likely address start letter also could control code front string well using instruction search nothing stopping searching part number ie say string hex could search would report number f unfortunately guarantee find bit code method fact address string could calculated addressed register find probably form pea ok searched file nt find actual string self could number reason address calculated one reason could string see actually graphic text another reason hiding string one way another one way could hidden bit program encrypted talk finding sort thing section decryption resetting machine another way hiding put another file best way found check whether case use arp search command running arp arp stand amiga resource project something like do command word  search  use do line like search df manual word  search  command df drive word  manual  word searching mean file sub dirrectories file reading chance got amiga bb want arp surely find bb highly recommend arp entirety search find word tell file directory offset address file could want ok find file look main program find load file start working happy hunting clever thing stop u protection system getting much better harder remember first got st finding game checked protection failed halted program executing instruction like bra fe instruction jump self code always going fe program froze would load program search hex fe found knew protection could nt far away many game specialize nothing anyway day encryption sort thing thing make harder address hex address important address far monitor program like monam concerned address routine monitor us tracing program trace flag set get address jump address quite common thing overwrite address upset monitor program come across anything altering address take step get around two way around first step around instruction using control command move program counter next instruction without executing current instruction way convenient instruction loop patch program memory replace code nop change hex number e course may need one nop think program nt know search anything altering address using instruction search command monam find instruction end note comma important stop getting world dumped thing upset monitor uncommon program sort thing upset monitor program whether deliberate part program setting thing result stop single stepping hard find time consuming single step along suddenly number get written address monitor stop listening command happens little reboot computer get next time come instruction single stepping decide whether process setting game make life hard setting game might able put breakpoint farther program run program setup bit break point use control step around patch memory nop paragraph  address  patching later using illegal vector address hex hold address routine illegal instruction routine whenever program come across illegal instruction jump address held go supervisor mode monitor program wo nt like trace supervisor mode st see lot program address loaded address program want jump program executing illegal instruction quit nice simple easy way new comer hacking stupid thing nine time ten see jumping instruction immediately illegal instruction often three time row get around alter program counter address placed hex thing watch routine checking whether supervisor easiest way program examine sr status register good look command playing sr thing remember program supposed running supervisor mode anything program supervisor mode handle one thing spring mind rte instruction return interrupt command executed supervisor mode cant single step supervisor mode get program go right place rte would quote good book  programming   rte return exception used load status register program counter pc use single instruction type operation required operating system supervisor mode pass control user program user mode new content status register pc popped stack status register taken first bit word stack pc next bit long word stack pointer incremented six byte  depends lot program find program altering stack rte remember first bit destined sr ca nt alter anyway next address program return big thing keep eye time stack pointer make sure pointing program expects remember alter stack normally like register looking stack pointer pointing quite interesting quite often routine nt anything important far hacking go go crap work going run program put break point run program anything stamping address nop running first instruction something worth noting start tracing program monam actually run program set trace bit stop running thing remember first instruction actually preformed trace kick stop program ready tracing seen lest one program ghost gouls one first instruction something froze keyboard upset computer way made tracing impossible way around patch first instruction ca nt patch program memory running freeze machine get chance patch either patch directly disk use binary load method patch memory see section  patching program  detail enough memory done hacking half meg machine amiga st know problem trying run program monam run half meg quit often still hack depending want memory heap program stop program running test amount available memory compare amount needed run program infact program protection bit actually need memory find memory check simple matter bypass check continue protection long really dont need extra memory yet program running another program quit cute method keep hour trying work going program load memory one program unbeknown u program actually consists two part separate program first part run second part separate task second program go play game monam work one task carry single stepping something look quite intelligent nt actually thing run game first time come across work going get far stepping game something happens screen start stepping start program happens different place program easy way find run program like xoper list task soon see anything running nt know way get new program find program creates new task see put best way put break point instruction call function creates procedure run program stop find nt pas address function telling actually us bcpl pointer point pass register bcpl pointer bcpl pointer pain as reason existing instead pointing straight address designed easy convert longword word aligned convert bcpl pointer hex taking number multiplying adding use monam use calculator find much better use monam change address use memory address instead key number memory address see monam method article found going go look around trace program visually find protection run properly would alter program counter new address start single stepping ability able depends alot first task first task run second task kill self wont much trouble pass value second task running time thing get sticky another way run program new task started go back workbench run xoper use hunk command new task pointed bcpl pointer well multiply add well encryption biggest problem face day encryption encryption program self modifies fly well simplest way think look code like lot left number memory e e go add one number get result right hand side turn something else hex instruction hex instruction e nop e e stop e e rts e e stop e e nop e e stop e e rts e e stop e e nop e rts e nop e rts course get code back original form program go take one word run please remember something like adding one simplest way could possible normally involve xor complicated loop well first obvious reason ca nt read say decrypted look like lot crap another bit graphic somethings reason nt obvious ca nt put break point code stop code get changed decryption process break point get changed nt break point biggest problem u changing code want latter make sure nt confuse decryption program unpacking self translating packed graphic big problem guy writing routine explain know happens program run run program system load available bit ram us table included file relocate program run address program loaded guy wrote program start decrypting one two thing either handle relocation bit write position independent code run anywhere decrypting routine decrypting code elsewhere memory easy decrypt put break point routine decrypting run break point start decryption code decryption code decryption code decryption code decryption loop start program code drop break point program code run program code code decrypted code decrypted code decrypted code decrypted code decrypted code decrypted straight code decryption bit careful start decryption code decryption code decryption code decryption code decryption loop start code decrypted code decrypted code decrypted code decrypted code decrypted cant put break point decryption routine would put break point start code decrypted even though monam display instruction break point correct instruction actually altered code put break point decryption code try decrypt break point instruction instead code could single step decryption routine would normally take age way get around make sure go around loop time single stepping first couple instruction decrypted pop break point code run program hit break point another way decrypt know going done decryption even executed decrypted code pop break point run hit break point go back look code decrypted ok still pretty simple decryption really stuff combine prefetch prefetch prefetch get instruction memory working instruction prefetches next instruction probably running next anyway prefetch save bus time want next instruction get prefetch buffer chip want branch etc discarded instruction address branch fetched instead ok still get job done fetched instruction fetched next instruction etc thing watch self modifying code code modifies next instruction run differently single step single step program fetch every instruction need nt prefetch buffer self modifying code alters next instruction run get different result single stepping code running really illustrate point look section code code code code code code code actually happens run program looking diagram first instruction executed line time next instruction prefeched b line second instruction executed prefetch buffer next instruction line prefetched execute code prefetch code instruction b execute code prefetch code instruction c execute code prefetch code instruction execute code prefetch code instruction e execute code prefetch code instruction ok fine program alters next instruction memory still run old one prefetch buffer start nop nop nop movew fe nop nop place break point line nop hex number fe hex number jump address first appearance code nothing first three line store fe line start program counter fall new instruction line bra course go around circle never go farther exactly happen single step program run program break point instruction line would appear program counter wont ever get discover program stop break point new instruction bra even though instruction bra see reason ran instruction prefetch buffer instead prefetching new altered instruction suggest set run quite dag thing see reason game wont run game wont run fail protection quit funny thought think hacked game run protection removed though original wont combining encryption prefetch start get complicated nt understand encryption prefetch go back get understand skip bit problem come find game code decrypted directly decryption routine would normally single step around loop time get around pop break point discussed routine using prefetch feature end decryption routine cant single step decryption routine cant pop break point decryption routine run either would corrupting code trying decrypt normally find decryption routine directly code decrypted loop decryption isnt completely program self modifies code complete decryption loop wont single step prefetch feature copy code decryption somewhere else memory use function monam copy run copy code instead real code decrypt decrypted code make sure copy code made still point original decrypted code normally hard usually load value register decryption routine pretty small normally position independent decryption routine normally run anywhere memory register value loaded run copy place breakpoint copy decryption routine program counter would normally fall completing decryption patching code talk simple patch look patching stuff encrypted simple patch ok found bit program want change may even able run program bit need changing change hand go run play game make permanent cant patch program memory save back disk cant ok load program monam pretend run stop first instruction mean program used relocation table end file relocate run address ca nt patch code save memory back guarantee load place plus hunk spread around memory anyway either use disk editor filemaster alter directly disk want search file byte around want patch make sure byte searching byte changed file loaded memory absolute memory address etc changing file directly disk make sure nt save file disk place might effect game normally pretty safe game us sector track normally allocated unavailable course nothing every guaranteed method method use load program monam alter dont load program normally load binary image using b function run monam asks program name press return press b enter name program loaded program loaded ca nt run trace nt loaded runable program disassemble though good finding place put patch checking right remember loaded complete program includes bit start relocation table symbol table one remember nt relocated look bit different loaded program runable program ok use e function monam patch hex number command want put instruction ever use nop rts bra etc nt know hex number instruction either set genam look result monam use instruction search monam find one rom program look hex value patched code save program back option important thing get exact start exact end file right made easy using monams register get set value start end file loaded monam monam asks start end enter write thing note simple patching patch somewhere wont altered relocation table dont confuse instruction alter relocation table one wont instruction disassembles address do nt mean address put relocation table lot instruction position independent mean run address way instead saying branch address instruction actually say branch instruction ahead ever number monam disassembles code address instead convenience way learn instruction altered relocation table look instruction hex dump see address must done program loaded normal way binary loaded come across bit altered relocation table want alter way around something like jmp cb ef c b want remove program ca nt put three nop relocation table alters address cb alter nop instead god know turn ok way around alter first two byte ef get program bra byte ahead putting ef nt bother byte disassemble rubbish program counter wont actually go nt matter difficult patch need difficult patch get around various thing encryption bit want patch section code encrypted general way get around judge one separately give example way used past first obvious way work value byte need program decrypted end byte want simple decryption hard sound remember guy wrote encryption would used variation decryption routine looking encrypt start remember said simple decryption may able work calculator method could try decrypt code monam discussed patch code want code say decrypted get chart bit xor etc effect see alter decryption routine back encryption routine put program counter back start routine run routine code make sure register initialised correct value etc managed correctly rest code decrypted back original form find value byte interested changed pop value undecrypted code see work likely come decryption routine something like use value byte help decrypt next value course stuff changing couple value code change make effect byte would alter code decrypted one way around used couple time st program encrypted bit code encryption nt complicated load program binary image run encryption code self way dummy file disk consisting start end small program load program runable program use cntrl l load file really interested binary file move program counter start decryption routine set register need loading run decryption routine binary image decryption complete patch code noble decryption code nt try decrypt code program run save program yet another way get program decrypt patch decrypted course great idea yet nt seen program decryption code great big patch nop word  insert hacking code  way get code executed reassembling program program one load code absolute address sort thing get code memory first jump anything decryption patching jump back messy never know code going covered something else loaded much elegant way block code want jump inside program quite often heap string hide code quite often title page author name gaming house name etc look string see controlled normally null hex end move closer start string still print start null leave byte null real null put code may cr hex may number byte long string stored front string make smaller quite surprising much code get string especially char long copywrite message ok string spare byte description hunk code want play within reach relative branch etc call code must position independent wont updated relocation table program counter running along happily setting game come decryption routine altered could enough room hole decryption routine hidden somewhere decrypt code patch relative branching back decryption routine get real code likely wont enough room probably altered bottom couple line decryption routine bit sends program back around decrypt code branch code first thing instruction patch get program counter branch code course keep sending program counter back decryption routine code decrypted patch sometimes find message hacker code good place put extra code please see example clear talking  original code  loop decryption code decryption code decryption code decryption code decryption code finished goto loop code decrypted code decrypted code decrypted code decrypted next bit string somewhere memory string xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  patched code  loop decryption code decryption code decryption code decryption code patched code jump string code decrypted code decrypted code decrypted code decrypted next bit patched string string decryption code finished goto loop code patch decrypted stuff jmp start decrypted code checksum sometimes amassed game actually check see weather code altered way doubt scared drawing attention code need changing actually hard checksum code reliably get answer program load ever feel like relocates total wildly seen program load chunk code absolute address always relocation necessary still dont bother run quick checksum later game check well anyway get around checksum well obvious way find checksum noble real pain normally quite way game couple way around counting byte sometimes alter byte around total come dont forget could adding byte word longs likely sense using routine position byte important well modifying something else wont good enough good way around normally totalling small bit program position independent change program back original state checksum done example code code code bsr doprotection code code code example want nop bsr doprotection instruction cause checksum fail change code code code jmp tomycodehiddeninastring code come back code code code hidden string nothing restore program original form jump line left arrow effect bsr doprotection noped checksum still course simple example could heap thing code string program boot boot block seem first hard program hack nt program start boot block dont use filing system run game load game directly disk program handle track sector load etc way see going boot sector use disk monitor sort nt matter funny disk always able load boot sector make mention program boot boot sector run fine boot boot system disk stick game second drive machine report disk stuffed recommend disk doctor stick disk amiga go away say hello funny game disk find lot missing report stuffed keep clicking cancel load first track use diskmonpro main reason use diskmonpro tell memory track diskmonpro monitor program built normally run monam background jump loading track boot sector disassemble boot sector general look around save boot sector disk remember two sector dont worry relocation table boot sector position independent code boot block load anywhere normally reboot clean memory load monam want run boot sector use method discussed  difficult patch  load small dummy file runable file load boot sector file binary file move program counter start code boot sector decimal instruction start boot sector put disk want hack df probably press cancel couple time stop complaining disk start single stepping boot block program two problem single stepping boot block first boot block booted playing game machine supervisor mode nt problem boot block well behaved run user mode get result problem nt well behaved programmer feel like taking machine completely normally first thing stop working problem programmer make game boot boot block especially one take machine completely kickout operating system drive hardware directly normally bloody good programmer tend make tough keep single stepping game working program loaded instead loading file loading track etc memory game got far enough program load appropriate track protection note track load track diskmonpro alter byte save dont know track looking use disk monitor program let search disk byte find disk funny format disk easy identify one wont copy xcopy doscopy command copy nibble function xcopy disk cause sort problem u cant load program look everything loaded track cant load track diskmonpro look monam disk funny format loaded using game loader biggest problem found want change may even know exact position disk cant change write funny track disk could theory reverse engineer loading routine write one save track could pretty easy discover program using different sync byte normally case way let program load track patch memory use technique discussed patching bit big problem come boot sector nt load bit want instead load file run load another file run load bit want patch hacked midwinter patch lot track loaded patch next lot last one patch protection best way put patching code one block pop boot block relocate safe area memory handle patching file trying hide patch string boot sector get loaded relocates block patch load first track jump first patch turn around patch first track memory location routine load next lot track patch jump second patch jump start first track executes code including loading next lot track hit patch sends second patch second patch patch next lot track load routine keep get lot track protection patch protection midwinter dag three time also checksumed code restore file original condition checksum calculate correctly fun game hack especially get name never work play properly miscellaneous stuff resetting loading good way see code decrypted look code come special format disk also way hack game dont enough memory run monam reset computer load monam look left memory afraid st clear available memory program loaded gone find monam operating system loading code want look boot move bottom k hex boot block called multi boot version nt work  always put code boot block multi boot lot thing well bra quite often looking code come across  branch ifwhateverinstruction  want know result program kick monam load file world run memory one way find put hex number fe hex number make program counter loop self handy use conjunction resetting machine run program hang know way went hit bye bye really scratched surface hacking confined mainly tracing monam nt talking much program resource disassembler program ball access bb good chance demo version resource download look various thing xoper spoke using hunk section program running another program also use stack command help find program backtracing task stack looking address pushed onto stack bsr jsr call take stack pointer lower splower add amount reserved stack size note decimal take away amount used used give position stack pointer frozen task start look memory around address hex looking intelligent thing various hardware addons get make hacking alot easier think take sense achievement hacking game hope article helped anybody starting wanting hack program happy hacking 