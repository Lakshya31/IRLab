animation construction kit ackd lary myers content     purpose     using ack engine disclaimer     hardware requirement     development environment     multiuser     interface structure     important field interface structure     array format interface structure     initializing ackd engine     ackd bitmap     loading bitmap     creating object     using overlay     moving around ackd     moving object     normal secret door     sound ackd     function summary     begin example     closing comment purpose ackd began experiment emulate effect seen game like wolfensteind ken labyrinth make technique available general public far thing worked well area even exceeded mentioned game latest installment ackd give developer easy use library linked thier application without delve inner working raycasting engine hope others use ackd engine produce new generation game u enjoy please forgive glaring mistake documentation find write code day long without getting weary soon write documentation forget much like work hope text give enough information use engine using ackd engine disclaimer ackd engine released  publicware  freely used private commercial program restriction would impose anything developed engine disclaimer liability circumstance author liable damage kind may result use engine  basically engine released  asis  left developer use professional manner  develope wonderful new game using engine appreciate mention documentation credit screen feel ack engine helped game thanks hardware requirement current version ackd requires minimum mhz machine run code used coprocessor required needed engine hardware requirement left application use engine ie mouse vga etc vga required ack display routine used application application chooses use another display mode issue appropriate hardware requirement development environment ackd developed using borlandc version  compact model setup also use large model may supplied assembly routine compiled using microsoft assembler masm version work later version masm library created using microsoft library manager lib version  also work later version lib ack code written either normal c assembler compiler switch used borland ml large model c compile nt link  use instruction compile size g compile speed specifies include path header file specifies object path file name assembler switch used masm ml case sensitive symbol label b size buffer assembly affect obj file dml dmc assembly directive large ml compact mc model used etmac various macro directory structure use following subdirectory ack engine demo provided information mak file setup engine source borlandcackdeng c h mak file borlandcackdengcmobj compact model obj lib file borlandcackdenglmobj large model obj lib file demo source borlandcackddemo c h bat mak exe dat file borlandcackddemobitmaps bbm lbm file borlandcackddemosound voc cmf pwm file multiuser ackd us interface structure communicate application engine structure explained later contains pertinent data engine need draw current point view pov possible fancy thing approach thing tried displaying one view time directly front normal view directly behind essentially eye back head displaying one player map also possible restriction may make unusable restriction may lifted near future discussion going network version ackd built engine version seem straightforward progression point future version engine may indeed support multiple player logging world interacting realtime interface structure ackd us structure application get necessary information building complete pov application responsibility correctly create setup structure ack engine called limited bound checking engine prevent degradation speed build process unpredictable result may occur invalid data structure defined header file ackdh either data segment calling application allocated memory whichever application desire within structure variable thing like current location angle player actual map array wall object pointer screen buffer overlay buffer background buffer well dimension viewport build wall term  build  used ack engine display screen unless told separate function way application free display current pov anyway want use supplied function display nt offer maximum flexibility engine used important field interface structure calling ack engine initialize important item need filled interface structure described winstartx leftmost pixel coordinate viewport winendx rightmost pixel coordinate viewport winstarty upper pixel coordinate viewport winendy lower pixel coordinate viewport four field allow ack engine fill field within interface structure winwidth winheight etc calling function construct background following field must filled topcolor color value ceiling bottomcolor color value floor lightflag whether light shading calling function actually build pov following field must filled xplayer x coordinate pov yplayer coordinate pov playerangle pov angle ack unit ack engine relies pov field build current scene changing value possible build variety scene one example changing playerangle degree current angle calling build routine create scene directly behind current pov array format interface structure several array used build pov scene ackd us map layed square like graph paper determine pov see given time map dimensional array column row initialize routine read map process data build array interface structure array xgrid ygrid used drawing wall layout array different map file described  example map size x real map  would except x       example map blank square nonzero value represent wall bitmap number ack engine requires information broken wall fall x plane wall fall plane array changed   would map x wall note extra  column right side map        would map wall note extra  row bottom map       basically becomes original map order engine see wall either x plane mean anytime map need looked following applies int mapposn  location look map  xgrid mapposn  would left x wall  xgrid mapposn  would right x wall  ygrid mapposn  would top wall  ygrid mapposn gridwidth  would bottom wall  four location nothing square map mean one thing would possible part ack engine wall would cube could single wall panel might look alittle funny side since would nt width could also mean different bitmap could used various side cube next two array bmaps omaps simple array point wall object bitmap respectively bitmap take byte memory x size bitmap important point ack read bitmap normal row order row color byte one like   arbitrary bitmap x      bitmap  rotated  degree column order make easier use drawing bitmap thus becomes   bitmap rotated degree                         another important array interface structure paltable array control ack engine perform light shading array contains range color used substitute actual color bitmap based distance away pov distance wall object first divided get zone use shading zone greater set zone used lookup table indexed color bitmap allows gradual darkening wall object become farther away pov still allowing color used constant lighting color never darken distance                     come door within interface structure sub structure labeled door maxdoors structure array hold current status door may process opening closing array door map motion coloffset field array nonzero door active either opening closing application make call ackcheckdooropen engine determine pov close enough door initialize door array every call ackbuildview cause door updated go fully open fully closed time application free alter field door array beware mpos mpos map position altered time example application want door remain open long period time check value coloffset see door currently value le door partially open partially closed value becomes greater door longer visible fully open keeping value greater setting speed field zero door longer moved another way might set field coloffset zero allow door seen anymore method would best application desire door remain permanently open breakdown door structure mpos map position one side cube mpos map position side cube mcode bitmap code represents door mcode bitmap code door side coloffset current column offset door see speed speed added coloffset openclose type type door ie doorxcode doorycode flag current door action dooropening doorclosing current version ack engine us following wall bitmap value door door lie x plane vertical side panel appears side door door lie plane horizontal                     okay let look object substructure array stored within interface structure accessable application well ack engine every object map represented entry array ackinitialize function automatically fill initial x coordinate object find one map file rest object data must filled application object used section creating object describes field setup application field object array described active indicate object considered ackcheckobjectmovement function bmnum hold maxview bitmap index display object bitmap object either animate place display multiple view pov walk around object side calculated ackcreateobject function dependent number bitmap bmnum dir direction object move flag field contain ofpassable allows pov walk right object good overhead light also contain ofanimate used function ackcheckobjectmovement cycle multiple bitmap image object curnum current index base bitmap display bmnum object bitmap curnum always maxnum total number bitmap base contained bmnum object bitmap maxnum speed speed object move normal value higher cause alot jmuping may cause object pas wall vidrow reserved x map coordinate object  mpos actual map grid location object x changed application mpos also updated using equation mpos xffc x dir field leftover older version engine used crude direction movement rotating place latest version ofanimate flag used indicate cycling bitmap object dir field ignored application still use field storing angle movement use function ackmoveobjectpov initializing ackd engine anything done ack engine must initialized done creating interface structure passing ackinitialize function following example show one method accomplish ackeng ae  interface structure global memory  int main int result aewinstarty  setup viewport coordinate  aewinendy aewinstartx aewinendx result ackinitialize ae  initialize engine  result printf  error initializing code dn  result exit result ackreadmapfile ae  demomapl   read map file  result printf  error reading map code dn  result exit example function ackinitialize return error code problem initializing engine zero successful point ackeng interface structure initialized file  trigdat  read various table ackd requires bitmap dealt yet still actually drawing first pov object dealt yet application must handle either using one supplied ackd function ackd bitmap bitmap used ackd pixel wide pixel tall stored normal line line fashion ie one row pixel another row forth byte represents one pixel may color engine requires bitmap raw image form however function ackloadbitmap accept either raw img format deluxe paint ii brush file bbm extension loading bitmap ackd provides several function load bitmap function dont used provided convienence application follows note application chooses load bitmap must sure rotate bitmap degree columnrow order needed engine also function us extended memory xms available application may may decide support int ackloadbitmap ackeng ae int bitmapnumber int bitmaptype char bmfilename ae interface structure bitmapnumber value bitmaptype either typewall typeobject bmfilename name bitmap file read general purpose bitmap load routine read either raw image file img deluxe paint brush file bbm place bitmap appropriate bitmap array bmaps wall omaps object int ackloadwall ackeng ae int wallnumber char bmfilename ae interface structure wallnumber value bmfilename name bitmap file read routine simply call ackloadbitmap typewall set int ackloadobject ackeng ae int bmpnumber char bmfilename ae interface structure bmpnumber value bmfilename name bitmap file read routine simply call ackloadbitmap typeobject set creating object object ackd either stationary movable depending need application type object handled exactly stationary one never change location object share bitmap needed one bitmap accomplish different task object multiple bitmap either stay one spot display bitmap sequence animates object use mulitple bitmap show different view object pov walking around sequence creating object follows load bitmap associated object specify object speed flag ofpassable ofanimate call routine ackcreateobject fillin information object structure example int main  initialization done per example  ackloadobject ae  objectbbm   load bitmap object  aeobjlist flag  ofanimate  stay place animate  aeobjlist speed  speed nonzero activate  ackcreateobject ae nums example example us array unsigned char called nums specify different view object case one number view also passed many maxviews ackdh different bitmap assigned one object use animation etc using overlay application desire overlay screen used ackd overlay effective ackdisplayscreen function used unless application manipulates overlay overlay allow full screen picture used may overlay area wall displayed could ancient pillar merely sign say  demo progress  whatever whole point overlay provide mean displaying graphic top viewport displayed screen overlay read like normal bitmap except fullscreen size x compiled drawing command placed interface structure pointed overlaybuffer everytime function ackdisplayscreen called pointer used draw overlay top last pov built overlay optional need used unless desired application wish process compiled overlay format overlaybuffer length byte length data include offset offset byte offset screen show data data n byte actual data size length length offset data combination continue length zero reached meaning data function ackdrawoverlay screenbuffer overlaybuffer used place overlay top wall drawn function process overlay command described draw screen buffer application additional drawing desire actually displaying video moving around ackd thing initialized current pov built displayed becomes time move around map accomplished using function int ackmovepov ackeng ae int angle int amount ae interface structure angle direction move amount amount move simplest form function called current angle pov facing amount move ackmovepov ae aeplayerangle also used backup following newangle aeplayerangle intangle newangle intangle newangle  intangle ackmovepov ae newangle function necessary collision detection return pov actually moved case value aexplayer aeyplayer updated new coordinate pov application wish moving make call function ackcheckhit return wall way collision object returned ackcheckhit moving object ackd contains two function handling object animation movement animation performed switching displayed bitmap object whenever function called application responsible setting object structure provide engine necessary information animate move object void ackcheckobjectmovement ackeng ae function check active object determine need thier bitmap changed animation application perform check desired function provided convienence int ackmoveobjectpov ackeng ae int objindex int angle int amount function actually move object specified angle specified amount return value processed application determine object struck wall another object player normal secret door ackd read map file processed variety thing one door appear map application establish door appear within map file calling function ackinitialize door treated special wall ack engine automatically checked see open application accomplished function void ackcheckdooropen int xplayer int yplayer int playerangle ackeng ae xplayer current x coordinate pov yplayer current coordinate pov playerangle current angle pov facing ae pointer interface structure function determine pov close enough either normal secret door set appropriate information begin opening door information kept door array interface structure used ack engine subsequent build door triggered open process automatic unless application manipulates door array need door go back fully closed sound ackd ack engine released public domain program mystic software allows playing soundblaster cmf voc file addition file pwm extension capable playing pc speaker since sound feature public domain limitation imposed mystic software first terminate stay resident program tsr must loaded using sound routine program included ack demo called worxliteexe tsr need loaded first running demo program second limitation sound used sound file consume alot memory nt try load several large one wo nt fit also appears problem sound routine need watched machine appears playing background music cmf file occasionally lock machine require hard reboot clear playing sound effect voc file alone seems work fine problem voc file loaded background music started playing force voc file loaded front contributes memory overhead mentioned earlier sound routine provided allow experiment engine without write full fledged worx library purchased mystic software wish use full fledged shareware commercial application function summary list available ackd function                                        int ackinitialize ackeng ae ae pointer interface structure purpose initializes various array used ack engine read process file  trigdat  read process map file supplied call allocates byte screenbuffer calculates viewport item based initial dimension setup application return successful one error code listed ackdh note function must called ack function                                        int ackreadmapfile ackeng ae char mapfilename ae pointer interface structure mapfilename name mapobject file read purpose read process ack binary map file return successful one error code listed ackdh note upon return xgrid ygrid array filled wall bitmap number application free change wish wall different                                        int ackloadbitmap ackeng ae int bitmapnumber int bitmaptype char bmfilename ae pointer interface structure bitmapnumber index number bitmap array bitmaptype either typewall typeobject bmfilename name bitmap file read purpose read either raw img dpii bbm bitmap file process form ackd requires allocates k memory bitmap store pointer either bmaps omaps array based bitmaptype return successful one error code listed ackdh note function us xms extended memory possible load bitmap                                        int ackloadwall ackeng ae int wallnumber char bmfilename ae pointer interface structure wallnumber index number bitmap array bmfilename name bitmap file read purpose call ackloadbitmap function typewall bitmaptype set return successful one error code listed ackdh note function us xms extended memory possible load bitmap                                        int ackloadobject ackeng ae int bmpnumber char bmfilename ae pointer interface structure bmpnumber index number bitmap array bmfilename name bitmap file read purpose call ackloadbitmap function typeobject bitmaptype set return successful one error code listed ackdh note function us xms extended memory possible load bitmap                                        int ackcreateobject ackeng ae int objnumber int numbitmaps uchar bmnums ae pointer interface structure objnumber index number objlist array different bitmap number numbitmaps number bitmap index contained bmnums bmnums list bitmap number associated object purpose set objlist structure information regarding object calculates number side object multiple bitmap specified return successful one error code listed ackdh note none                                        int ackcreateoverlay ackeng ae uchar far overlayscreen ae pointer interface structure overlayscreen pointer k screen image use purpose determines part screen within viewport compiles area use ackdisplayscreen function compiled command placed pointer overlaybuffer interface structure return successful one error code listed ackdh note function process overlay screen passed build compiled overlay buffer allocated returned ae overlaybuffer                                        int ackbuildbackground ackeng ae ae pointer interface structure purpose build static floor ceiling background image based value topcolor bottomcolor lightflag interface structure resulting image pointed bkgdbuffer interface structure return always note function build psuedoshaded ceiling floor picture used background screen application override background desired                                        int ackbuildview ackeng ae ae pointer interface structure purpose construct current pov place result screenbuffer pointer interface structure displaying done screen time optional overlay buffer processed function return always note best place put function application main loop repeatedly called whenever pov move object move animate                                        void ackdrawoverlay uchar far screen uchar far overlay screen buffer draw overlay buffer overlay pointer compiled overlay image purpose process compiled overlay image draw screen buffer note function called ackdisplayscreen application display function overlay used                                        int ackdisplayscreen ackeng ae ae pointer interface structure purpose display last built pov onto screen normal vga mode h return always note application wish use overlay must call function ackdrawoverlay calling ackdisplayscreen                                        void ackcheckobjectmovement ackeng ae ae pointer interface structure purpose scan objlist substructure interface structure determine object need updated function called ackbuildview function return nothing note routine mainly good animating object multiple bitmap application devise movement algorithm call ackmoveobjectpov carry                                        int ackmovepov ackeng ae int angle int amount ae pointer interface structure angle angle move pov amount amount move pov purpose determines move valid set new coordinate xplayer yplayer interface structure return successful x wall hit wall hit object hit note none                                        int ackcheckdooropen int xplayer int yplayer int playerangle ackeng ae xplayer current x coordinate pov yplayer current coordinate pov playerangle current angle pov facing ae pointer interface structure purpose determines pov close enough trigger door open door placed door substructure interface structure opening process begun subsequent call ackbuildview automatically continue open close process return door opened x door opened door opened x secret door opened secret door opened note none                                        int ackcheckhit int xplayer int yplayer int viewangle ackeng ae xplayer current x coordinate pov yplayer current coordinate pov viewangle current angle pov facing ae pointer interface structure purpose allows application determine obstacle close pov return nothing nearby x wall close wall close note function called ackmovepov check collision wall object                                        int ackgetobjecthit void purpose allows application determine object pov last came contact return return object index last object pov hit note none                                        int ackdeleteobject ackeng ae int objectindex ae pointer interface structure objectindex index number object delete purpose essentially set object active flag object longer checked engine good idea call function future version may need processing return  object already inactive object deleted map note none                                        void acksetvgamode void purpose place screen standard x vga mode h return nothing note utility function application set screen graphic using routine desire ack engine depend mode h unless ackdisplayscreen function called                                        int ackloadandsetpalette char filename filename name palette file load purpose read specified palette file set palette vga return successful one error code listed ackdh note utility function read palette file byte set video palette content file application use function desired also use acksetpalette buffer needed                                        void acksetpalette uchar far palbuffer palbuffer byte buffer containing palette information purpose set content palbuffer video palette return nothing note use function set palette already read buffer use ackloadandsetpalette read set palette file utility function                                        void ackfadein int begin int count uchar far palette begin starting color index fade count number sequential color index fade palette buffer containing palette information use purpose slowly fade screen black content palette buffer passed note utility function                                        void ackfadeout int begin int count begin starting color index fade count number sequential color index fade purpose function slowly fade screen current palette black note utility function                                        void acksettextmode void purpose place screen normal x text color mode return nothing note utility function                                        uchar far ackreadiff char filename filename name lbm bbm file read purpose read deluxe paint picture lbm brush bbm file allocates buffer image return buffer pointer caller image buffer contain byte beginning width height image integer format function provided application wish read image also needed overlay image deluxe paint format return pointer buffer successful null error reading image note none                                        int ackwrapup ackeng ae ae pointer interface structure purpose free memory buffer used ack engine return always note function must called exiting application xms memory returned system                                        int acksoundinitialize int defaultsounddevice defaultsounddevice one dev value acksndh purpose start worx routine determines hardware return okay  error initializing note function must called sound routine used calling devnosound force sound calling devpcspeaker force sound speaker even sound card present                                        int ackplaybackground char musicfilename musicfilename name cmf file begin playing background purpose continuously play music file background return okay  error loading file note see text section sound ackd limitation music                                        int ackloadsound int vocindex char vocfilename vocindex one sound defines acksndh vocfilename name voc file load purpose load sound file later playing return okay  error loading sound note function load voc file soundblaster adlib card present pc speaker specified routine look pwm file created vocpwmexe program application always call voc extent                                        void ackplaysound int soundindex soundindex one sound index acksndh purpose play specified sound effect voc file return nothing note sound file must previously loaded ackloadsound                                        void ackstopbackground void nothing purpose stop current background music file cmf return nothing note none                                        void acksoundshutdown void nothing purpose close worx routine freeing memory etc return nothing note routine must called exiting application sound used ack engine begin example okay covered detail let look application begin use ack engine first thing make decision may related interface structure global memory allocated memory size viewport used light shading used ceiling floor shaded object going manipulated ack engine app overlay screen question important interface structure small begin four k array within hold map data well object door array plan alot global data application interface structure allocated far heap nt really matter engine since pointer structure passed library call far data let say example allocate structure hold global data pointer within application could begin something like include  ackdh  ackeng ae  global pointer   could routine application us initialize thing  int appinitialize void int result ae malloc sizeof ackeng  first get memory structure  ae  null  whoop nt get memory  return   return error  memset ae sizeof ackeng  clear entire structure   perform initialization  return result snippet code snippet nothing allocate clear interface structure used application ack engine need setup size viewport initialize engine include  ackdh  define viewx  size viewport  define viewx define viewy define viewy char mapfilename  levelmap  int appsetupengine void int result ae winstartx viewx ae winstarty viewy  plug size want  ae winendx viewx  viewport  ae winendy viewy result ackinitialize ae  initialize engine  return result  error else errorcode  snippet code snippet set arbitrary viewport size usually load picture deluxe paint write coordinate want wall call engine intialize upon return value result either zero meaning problem one err code listed ackdh header file error occurs application continue since unpredictable result occur point engine filled quite bit ackeng structure information viewport map file read processed buffer automatically allocated screenbuffer pointer structure map array contain necessary wall object information build pov ca nt yet first decide couple thing let take code snippet expand include  ackdh  define viewx  size viewport  define viewx define viewy define viewy define ceilingcolor define floorcolor define doorspeed  door need speed openclose  define playerx  initial x coordinate  define playery  initial coordinate  define playerangle  initial pov angle  char mapfilename  levelmap  int appsetupengine void int result ae winstartx viewx ae winstarty viewy  plug size want  ae winendx viewx  viewport  ae winendy viewy ae xplayer playerx  setup intial coordinate  ae yplayer playery  pov  ae playerangle playerangle ae doorspeed doorspeed  set default door speed  result ackinitialize ae  initialize engine  result return result  error get  result ackreadmapfile ae mapfilename result return result ae topcolor ceilingcolor  setup color  ae bottomcolor floorcolor  background   ae lightflag shadingon  yes want light shading  result ackbuildbackground ae  build ceiling floor  result return result  error get  return result  error else errorcode  snippet code snippet add snippet setting background ceiling floor ack engine requires example decided shade background using shadingoff found ackdh could also decide solid background note two defines ceiling floor color color whatever appropriate application also note initial coordinate angle pov setup need deferred call ackbuildview made done merely convienence okay thing coming along nicely need decide overlay needed remember overlay need part full screen always display wall example would gothic pillar perhaps magic staff border full screen display whatever application need give visual effect overlay mandatory induce slight speed degradation displaying engine also mean function ackdisplayscreen must called actually use overlay unless application routine handle let say want overlay would include  ackdh  char picturefile  mypiclbm  int appsetupoverlay void int result uchar far overlaypic overlaypic ackreadiff picturefile  load deluxe paint picture  overlaypic  null  whoop got problem  return   return error  result ackcreateoverlay ae overlaypic  compile overlay  free overlaypic  free picture unless   want use later  return result snippet example read deluxe paint lbm file call ack engine compile resulting overlay sequence interface structure pointed overlaybuffer unless error occurs one change code snippet would keep picture buffer around displayed screen note portion cover viewport compiled entire picture application use supplied lbm read routine wish read picture long picture buffer passed routine flat byte image overlay section snipped ackreadiff routine place width height image first four byte buffer overlaypic passed engine remember overlay optional need used part screen going appear wall setup quite bit information need actually draw view map thing look pretty bad try draw point nt bitmap yet let proceed needed get wall application include  ackdh  typedef struct int number int type char name bmtable bmtable bmtable typewall  swallbbm  typewall  swallbbm  typewall  swallbbm  typewall  swallbbm  typewall  swallbbm  typewall  secretbbm  typewall  secretbbm  typewall  sdoorbbm  typewall  ssidebbm  typewall  sdoorbbm  typeobject  eyeballbbm  typeobject  treasurebbm       end table  int apploadbitmaps void int result int bmtable number  result ackloadbitmap ae bmtable number bmtable type bmtable name result  error load  break  get   next index table  return result snippet code snippet loop table load bitmap example application bitmap name arbitrary error occur routine exit immediately return error caller note also routine used load object well wall use typeobject instead typewall defined ackdh object upon return code snippet bitmap loaded needed begin object going used proceed example purpose let say two object loaded snippet setup calling function ackcreateobject following example include  ackdh  int appsetupobjects void int result uchar bitmapnumbers ae objlist dir  direction nt matter  ae objlist speed  stationary object  bitmapnumbers  bitmap use object eyeball  result ackcreateobject ae bitmapnumbers result  error occurred  return result  get  ae objlist dir  direction irrelavent  ae objlist speed  speed stationary  bitmapnumbers  bitmap use treasure  result ackcreateobject ae bitmapnumbers return result snippet snippet brute force method creating object elegant method would setup table create object similiar snippet bitmap point got engine initialized background buffer built bitmap loaded object created even graphic mode yet ack engine provides support function may used unless application setup graphic mode later go back text mode function acksetvgamode set video mode h x w color acksettextmode set video mode x color text use desired thrown support routine another routine also used one read palette file set vga palette register ackloadandsetpalette filename read palette file set regs routine may used video placed graphic mode pas name byte palette file use upon return new palette set let put routine code snippet include  ackdh  char palfile  demopal  int appsetgraphics void int result acksetvgamode  go graphic  result ackloadandsetpalette palfile return result snippet okay got beginning game part introduction need concerned couple thing beyond becomes application responsibility handle user interaction engine ready begin displaying pov screen need make one mandatory call engine tell build current scene code snippet show process assume application going let ack engine perform actual display include  ackdh  void appshowd void  preprocessing application wish go  ackbuildview ae  tell ack engine construct pov  ackdisplayscreen ae  display pov video screen  snippet remember initial coordinate pov setup code snippet number easily setup anytime calling ackbuildview application decides high time put code snippet together running example program shown include  ackdh  define viewx  size viewport  define viewx define viewy define viewy define ceilingcolor define floorcolor define playerx  initial x coordinate  define playery  initial coordinate  define playerangle  initial pov angle  char mapfilename  levelmap  char picturefile  mypiclbm  char palfile  demopal  typedef struct int number int type char name bmtable bmtable bmtable typewall  swallbbm  typewall  swallbbm  typewall  swallbbm  typewall  swallbbm  typewall  swallbbm  typewall  secretbbm  typewall  secretbbm  typewall  sdoorbbm  typewall  ssidebbm  typewall  sdoorbbm  typeobject  eyeballbbm  typeobject  treasurebbm       end table   prototype  int appinitialize void int appsetupengine void int appsetupoverlay void int apploadbitmaps void int appsetupobjects void int appsetgraphics void void appshowd void  entry point application  int main void int result done result appinitialize result printf  error initializing errorcode dn  result return result appsetupengine result printf  error setting ack engine errorcode dn  result return result appsetupoverlay result printf  error loading overlay errorcode dn  result return result apploadbitmaps result printf  error loading bitmap errorcode dn  result return result appsetupobjects result printf  error creating object errorcode dn  result return result appsetgraphics result acksettextmode printf  error loading palette errorcode dn  result return done appshowd getch   check escape key  break acksettextmode return example closing comment said start document writing doc much like work anyway hope information provided well actual source ack engine enough get started adventure exciting project met alot nice folk pitched helped many way wish express thanks made possible advanced thanks may use engine produce game u enjoy great help jaimi mcentire helped great deal programming graphic jaimi also neat space station picture title ken lemieux provided space dude shuttle steve salter alot wall object graphic frank sachse provided sound routine interface music ron sachse provided wall bitmap mark betz allowed use fading routine bart stewart built image editor thing michael wilson xms code readily available working great thanks guy without ack engine demo would possible bad news currently problem displaying object sometimes cause  ghost  image displayed cause damage anything annoying nt able track cause anyone suggestion idea appreciate hearing building update others thanks one last note final installment ackd awhile im going drop picture totally got new thing eager try maybe goody come one never tell wish reach compuserve usually hanging around game design library gamers forum email direct compuserve account  sincerely lary myers  