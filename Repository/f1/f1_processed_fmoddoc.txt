 tabstops ²²²²²²²²²²²²²²²²²²²²²²²² ‏ mod player tutorial firelight ‏ copyright c brett paterson  ‏ ‏ last updated  ‏ ²²²²²²²²²²²²²²²²²²²²²²²² תהההההההההההההההההההההההההההההההההההההההההההההההההההההההההההההההההההההההההההה ² section ² ² index ² אההההההההההההההההההההההההההההההההההההההההההההההההההההההההההההההההההההההההההההש section introduction  note  terminology  contacting firelight feedback  future version section loader  note  verification  load module name  load sample information  load order information  load pattern data  four byte  load sample data  phew section playing mod  ok start  setting timer speed  player logic  orderspatterns  inside update row  period frequency fine tune  table  gravis ultrasound  volume section miscellaneous  note without instrument number frequency section effect  effect xy arpeggio  effect xy porta  effect xy porta  effect xy porta note  effect xy vibrato  effect xy porta vol slide  effect xy vibrato vol slide  effect xy tremolo  effect xy pan  effect xy sample offset  effect axy volume slide  effect bxy jump pattern  effect cxy set volume  effect dxy pattern break  effect fxy set speed  effect ex set filter  effect ex fine porta  effect ex fine porta  effect ex glissando control  effect ex set vibrato waveform  effect ex set finetune  effect ex pattern loop  effect ex set tremolo waveform  effect ex unused  effect ex retrig note  effect eax fine volume slide  effect ebx fine volume slide  effect ecx cut note  effect edx delay note  effect eex pattern delay  effect efx invert loop section appendix mod format document תהההההההההההההההההההההההההההההההההההההההההההההההההההההההההההההההההההההההההההה ² section ² ² introduction ² אההההההההההההההההההההההההההההההההההההההההההההההההההההההההההההההההההההההההההההש תההההההההההההההההההה ²  note ² אהההההההההההההההההההש new version loader mistake fixed section  store samplenumber byte fh byte shr store samplenumber byte fh byte shr section  inside update row rewritten old one weird crap pattern break pattern jump accurately described new section  four byte section  rewritten preamble  covering mod format basically good idea try leap harder format like xm sm without prior knowledge mod still widely spread format nothing wrong coding player sm next step basically wider mod octave volume byte blah yeah know sample effect cosmetic though ie sm still use crap amiga frequency mod pc format assumption  throughout document exaggerated length variable name used dont actually use sort variable name help make thing clearer eg  numberofpatterns  variable name stated capital assumed sort knowledge sound card programming sound card though include gu code fmodaasm interrupt handler cover bit though time present type pseudocode try seem biased towards language example used straight c code demonstrate c fairly intuitive read people wont hard time figuring תההההההההההההההההההההההההה ²  terminology ² אהההההההההההההההההההההההההש type length bit range borlandturbo c הההההההההההההההההההההההההההההההההההההההההההההההההההההההההההההההההההה byte  unsigned char word  unsigned int dword  unsigned long הההההההההההההההההההההההההההההההההההההההההההההההההההההההההההההההההההה throughout text use term byte word dword make document general language c use typedefs achieve use byte word dword terminology pascal asm syntax already suited anyway order order mod play length song pattern pattern played order physical information tick refer clock tick interrupt handler tick others use term frame using term tick throughout whole document תההההההההההההההההההההההההההההההההההההההההההההההה ²  contacting firelight feedback ² אהההההההההההההההההההההההההההההההההההההההההההההההש contact encouraged think left thing probably made mistake see would like tell email firelght yoyoccmonasheduau post brett paterson parr st leongatha victoria australia phone au irc firelight coder trax aussie תההההההההההההההההההההההההההההה ²  future version ² אהההההההההההההההההההההההההההההש im really starting get stuff appear future version document mixing technique important section really want included need experienced sb mod coder write section anyone handle multiple format talking internal format handling multiple format currently updating fmod support sm mtm info format included תהההההההההההההההההההההההההההההההההההההההההההההההההההההההההההההההההההההההההההה ² section ² ² loader ² אההההההההההההההההההההההההההההההההההההההההההההההההההההההההההההההההההההההההההההש תההההההההההההההההההה ²  note ² אהההההההההההההההההההש well first got load module right following step step way code loader storage issue discussed help along really nt feel like writing another mod format description find one appendix section written lars hamre author protracker need refer format document document side side loader section document doesnt actually give map mod format could confusing though go byte byte following section subsection box section important subsection explanation describes section understanding pseudocode actually show load information storage issue help store information loaded suggestion helpfull hint suggestion step placed pseudocode section storage issue know probably going eager want jump code straight away storage issue follows guiding hand must pseudocode section follows last תהההההההההההההההההההההההההה ²  verification ² אההההההההההההההההההההההההההש explanation  attempt load mod check fact mod every mod unique signature case mod format form letter string containing letter  mk   chn  variety signature mutated format describe type mod identifier signature stored offset h file checked first pseudocode  seek offset h file read byte compare  mk  true channel mod otherwise compare  chn  true channel mod otherwise compare  chn  true channel mod otherwise exit display error message also rare tune use ch   channel suggestion  use point store number channel variable choice use global variable called channel תהההההההההההההההההההההההההההההה ²  load module name ² אההההההההההההההההההההההההההההההש explanation  trivial part loader hold title name mod first byte mod psuedocode  seek back position start file read byte store modulename storage issue  name module byte string padded either store module name global variable character string store general information mod structure like struct modheader char name  information get later  modhead char name good idea set structure like future use lot infomration need throw later course nt need structure keep heap loose variable course interested displaying name module could discard suggestion  code line program print name module see working properly exciting huh note module name supposed padded terminated sometimes case sometimes tracker allow byte store character mean null termintor byte cause function like printf give unpredictable output find null terminator way fix use loop print character one time overwrite th byte תההההההההההההההההההההההההההההההההההההה ²  load sample information ² אהההההההההההההההההההההההההההההההההההההש explanation  sample information stored start mod file contains relevant information sample includes name length loop point finetune etc loop time read block information sample according loop counter pseudocode  point loop time sample loopcounter  read byte store samplename read byte word store samplelength read byte store finetune  important read byte store volume see key read byte word store loopstart  read byte word store looplength end loop key get real value byte calculate byteh byte finetune value subtract get signed value ie      storage issue  think best way store information instrument store information structure array intstrument structure like struct sample char samplename word samplelength byte finetune byte volume word loopstart word looplength also physical position information see sample loading section possibility gu  dword gusoffset using main memory sb say char sampbuff pointer actual physical data memory declare array sample general mod header structure explained fully next section way used keep heap global array like char samplename word samplelength byte finetune byte volume word loopstart word looplength suggestion  code little viewer done make sure everything stored properly important step compare output tracker came player show sample information תהההההההההההההההההההההההההההההההההההה ²  load order information ² אההההההההההההההההההההההההההההההההההההש explanation  ok sample information loaded next section module contains order information order information mod defines order pattern going played mean composer could set order pattern example intent would pattern play twice entry order table would look like order pattern note order length song pattern chopped changed around order first byte tell u length song order even though stored byte information psuedocode  read byte store songlength number order song read byte discard unused byte used used pt restart position since jump pattern introduced order table byte long contains order pattern played song find many physical pattern module simple check every order byte highest value found stored number pattern song set numberofpatterns equal point loop time read byte store order loopcounter value bigger numberofpatterns set value end loop read byte discard position mk etc storage issue  one way go back original modhead structure contained general infomation mod entire structure struct modheader char name song name sample inst instrument header byte songlength song length byte numberofpatterns number physical pattern byte order pattern playing order modhead second way would store global variable char name song name byte songlength song length byte numberofpatterns number physical pattern byte order pattern playing order array sample saw sample header loading section stored array suggestion  always print order see pattern number displayed correct viewer display every bit information module ok stuff easy time something tougher pattern data תההההההההההההההההההההההההההההההה ²  load pattern data ² אהההההההההההההההההההההההההההההההש explanation  hardest part code loader storage issue important discussed first im going try general nt want appear trying steer direction specific enough guide storage issue  way store pattern data ive spent time pondering issue found viable method storing pattern data  linked list using channel node dynamic slow well slow  fixed array terribly memory wasting messy  create allocate buffer size need store pattern use roving pointer access pattern later sound ok pattern really need stored dynamically word use much memory need method method used begin sole reason nicely dynamic easy quite ok start good enough gu scrapped idea went final method method much general language method reason isnt memory efficient enough also cant subscript array normal high level language index larger method extension method method quite easy efficent use dynamic worked allocate access huge pointer kb big player seem use method gusplay cascada protracker lars hamre firemod  higher us method work way declare pointer allocate amount memory calculated channel numberofpatterns אההה row per channel אההההההה byte per note add numberofpatterns well pattern start finish numberofpatterns hence aditional didnt add pattern would end allocating byte pattern data value normally going big number dword needed store initially problem data wrapping around kb buffer using char far say kb large fixed delcaring huge keyword look online help find eg char huge patbuff find physical pattern pattern buffer calculate offset formula channel pattno say want point start pattern chn mod travel pattern increment pointer byte time note stored actuall file byte done fashion pseudocode show unravel amigafied mess תההההההההההההההההההההההההההההההההההההה byte byte byte byte ³ההההההההההההההההההההההההההההההההההההה³ ³aaaabbbb ccccccccc ddddeeee fffffffff³ אהההההההההההההההההההההההההההההההההההההש aaaadddd sample number bbbbcccccccc sample period value eeee effect number ffffffff effect parameter pseudocode  calculate amount memory needed numberofpatterns pattern like channel numberofpatterns create base pointer allocate memory needed point loop many time numberofpatterns point loop channel time equal pattern read byte store samplenumber byte fh byte shr store periodfrequency byte fh shl byte store effectnumber byte fh store effectparameter byte increment pattern pointer byte end loop end loop ok  alright let look simpler term big buffer meant store pattern data start loading note  byte time unravel something meaningful shown store new note variable one fill buffer exact size allocated beginning suggestion  effectparamter might tempted store value stored seperate variable eg effectparameterx effectparametery used store way assure get coding effect method quite inefficient saved memory increased speed noticably storing byte splitting time need ie printing separately vibrato finding e extra effect use etc תההההההההההההההההההההההההההה ²  four byte ² important אהההההההההההההההההההההההההההש stage probably thinking fit byte start dont store amiga period note value convert period note number see section  discussion note frequency summary scan amiga table match value loaded anyway even store amiga period value note wont still fit byte file cant use bit allocation mean use bit need byte whole byte example note volume capable getting need bit sample number go need bit follow see thing allocated similar way player c allocate variable tell many bit want use asm say would use byte bit calculation access shouldnt hard int note   bit  plenty need byte number   bit byte effect   bit use keep thing even byte eparm   bit actually use byte new player first convert finetunes middle c value hz like sm see st techdoc work therefore need amiga table actual note finetunes get something like notebits numberbits effectbits eparmbits  byte תהההההההההההההההההההההההההההההה ²  load sample data ² אההההההההההההההההההההההההההההההש psuedocode  point loop time get length sample loopcounter stored variable point use gu dump sample gu dram could imagine using sound blaster etc would declare pointer memory allocate samplelength sized buffer load information buffer need play would mix channel small buffer dma buffer sound card soundblaster allocate samplelength sized pointer buffer memory load sample drambasedcard gu pokedma byte dram increment dword offset value gusoffset store value next sample information along side length volume finetune loop start etc check sample fit ram exit error nt end loop תההההההההההההההההההההה ²  phew ² אהההההההההההההההההההההש nt bad full mod file stored away disposal sample ready blast suggestion  good time thorough testing thing make sure sample header information stored correctly make sure pattern data stored perfectly quite important know make sure sample stable memory try play sound card problem misloaded sample found also make sure loop point played correctly make sure deallocate memory quitting program תהההההההההההההההההההההההההההההההההההההההההההההההההההההההההההההההההההההההההההה ² section ² ² playing mod ² אההההההההההההההההההההההההההההההההההההההההההההההההההההההההההההההההההההההההההההש תההההההההההההההההההההההההההההההההה ²  ok start ² אהההההההההההההההההההההההההההההההההש think main thing need satisfied mod loaded properly set interrupt function understand bit way mod played im going use system timer hook onto example want use interrupt servicers know ie gu irq know set interrupt handler ill describe bit code demonstrate system timer lie int get old handler vector int h store away later set new handler function vector int h תההההההההההההההההההההההההההההההההההההההההההההההההההההההההההההההההההההההההה remember rehook old timer orignal place song finished אהההההההההההההההההההההההההההההההההההההההההההההההההההההההההההההההההההההההההש c would like oldhandler dosgetvect setvect handler oldhandler prototype globally declared void interrupt oldhandler  dummy actuall handler function look like void interrupt modhandler   yes put dot   main loop oldmodhandler  return int  normally crash without pascal would look something like getintvec addr oldtimer setintvec addr modinterrupt function looking something like idea right nt pascal f w procedure modhandler interrupt begin  oldtimer end f still sure c pascal check online manual getvectsetvect etc תההההההההההההההההההההההההההההההההההההההה ²  setting timer speed ² אהההההההההההההההההההההההההההההההההההההההש ok interrupt handler already firing one thing must set right speed nt want mod play way fast slow want bpm right hz tick second set system timer speed want hz use divisor calculate right rate like speed  hz divisor mov dx x mov al x dx al mov dx x mov ax speed speed variable dx al shr ax dx al interrupt function ticking away time second bpm used change tempo effect fxy value h h change speed bpm looked later convert bpm hz use hz bpm ie bpm hz speed hz set timer routine simple huh need effect fxy nt worry later תהההההההההההההההההההההההההה ²  player logic ² אההההההההההההההההההההההההההש let take look interrupt function playing done speed song base mod played row pattern updated every speed number clock tick speed update row every clock tick speed like row going updated every tick play twice fast speed inbetween update certain tick sensitive effect like portamentos volume slide vibrato diagramatically playing mod look like speed tick תהש update row update  note mod row    certain effect updated   update row      update row etc logically basic representation playing mod look like תההההההההההההההההההההה static tick speed declaration start speed want straight tick speed condition tick tick increment tick counter tick speed tick bigger equal speed updaterow update channel number note new row tick  reset tick row row incrememnt row else updateeffect else update tick based effect אהההההההההההההההההההההש take account row pattern hit jump next pattern start row say row effect played jump next pattern nt bother updateeffect time got updaterow going ok תהההההההההההההההההההההההההההההההה ²  orderspatterns ² אההההההההההההההההההההההההההההההההש short note reach end pattern whatever need go next order say order pattern number stored array simply task referencing pattern number according index order repositioning pattern pointer accordingly ie order list something like תהההההההההההההההההההההההההה order  ³הההההההההההההההההההההההההה³ pattern  אההההההההההההההההההההההההההש array pattern set ordertable selecting appropriate pattern simple finding ordertable order find offset buffer know using sort formula like offset channel ordertable order byte row find current row add channel row patternrow formula end offset channel ordertable order channel row calculate figure processing every row set pattern pointer increment row number order number formula pick set pointer accordingly תההההההההההההההההההההההההההההההה ²  inside update row ² אהההההההההההההההההההההההההההההההש ok every tick want update channel number channel pseudocode      point note pointer correct offset pattern buffer according order row loop channel number time get note buffer get sample buffer get effect buffer get effectparameter buffer sample lastinstrument channel sample store later volume channel default volume sample setvolume volume channel actually hardware set period effect effect frequency channel freqtab note lastinstrument channel finetune freqtab amiga frequency lookup table see sec  line bit optimization player effect parameter jump skipeffects label     process non tick based effect see section also grab parameter tick based effect like porta vibrato etc     label skipeffects freqency channel setfrequency frequency channel period sampleoffset ffh ffh sample offset anything h considered see section  vibratowavecontrol retrig waveform vibratoposition channel see section  vibratonegative channel see section  tremolowavecontrol retrig waveform tremoloposition channel see section  tremolonegative channel see section  playvoice gu biased guess sb mixing would mix section sample small buffer dma also take note sample looping gu course also remember add sampleoffset value start sample begin address sample offset value would would affect outcome move pointer next note row ie increment byte main inner loop part need optimized make sure try get fast possible note setfrequency example passed amiga value convert relevant hardware value תהההההההההההההההההההההההההההההההההההההההההההההה ²  period frequency fine tune ² אההההההההההההההההההההההההההההההההההההההההההההההש formula converting amiga period value hz accomplished using one following formula explained shortly going convert amiga frequency sort speed frequency factor sound card part show pal  amigaval nstc  amigaval say wanted find value hz middle note c looking amiga table see value c see table therefore pal  hz nstc  hz quick explanation pal nstc amiga used time mod sitting interrupt handler vertical retrace video screen period value used table amount data send amiga sound chip interrupt therefore changing speed data sent pitch note pretty stupid system huh suppose back wanted work werent worried future tracker like fasttracker taking step right direction using linear frequency table st took step backwards trying base sm mod format music talking computer hardware use asking well think nstc widely accepted used value really matter difference might hear slight change pitch like one fine tune say inertia play switch let choose one try flicking song playing see like period table straight protracker bugfree table might see like gusplay cascada bug dont use unless fix ie bug f finetune  fasttracker bug try mtperiodtable tuning normal dcw  c b dcw  c b dcw  c b tuning dcw  dcw  dcw  finetune  tuning dcw  etc dcw  finetune  dcw  tuning dcw  dcw  dcw  tuning dcw  dcw  dcw  tuning dcw  dcw  dcw  tuning dcw  dcw  dcw  tuning dcw  dcw  dcw  tuning  dcw  dcw  dcw  tuning  dcw  dcw  dcw  tuning  dcw  dcw  dcw  tuning  dcw  dcw  dcw  tuning  dcw  dcw  dcw  tuning  dcw  dcw  dcw  tuning  dcw  dcw  dcw  tuning  dcw  dcw  dcw  personally used sorted form table order note c  finetune go finetunes b finetune  make thing lot easier find תההההההההההההההההההההההההההההההההההההההההההההה ²  table ² אהההההההההההההההההההההההההההההההההההההההההההההש pondered one bit first started would nice could store amiga value note give formula use even use table lookup amiga value lie problem namely finetune arpeggio amiga value stored note idea much fine tune according note linear table would fine would say finetune add pitch actually logarithmic table adding c note give totally different tone adding c note forget storing actual amiga period note loader convert period note number see section  use look period table later tune playing still bit confused done loading pattern data looked amiga value loaded gave number note multiply finetunes remember note finetunes apart equal start c going finetunes c finish b rememer going finetunes get value reading amiga value file scan period table given find match tracker nt save right number used check number   actual value find corresponding value store note counter counter value incrementing went table pattern data loaded nice linear set note actually play use linear value index look amiga table get correct amiga period value ok            period byte xf byte  read value file current period   default value  nothing count count count  start search period freqtab count  period freqtab count  current period count  found store counter  index note went whole table didnt find value assumed note stay  תהההההההההההההההההההההההההההההההההההה ²  gravis ultrasound ² אההההההההההההההההההההההההההההההההההההש change gu frequency well find sort stuff im gu biased ill talk bit assuming khz mixing rate first hz  amigaval next gusfreq hz simple huh would change whatever mixing rate using depending amount voice ie say use voice looking table  frequency active voice lower formula becomes gusfreq hz bit mathematical optimization reduced formula hz  freq gusfreq hz  freq hz  gusfreq  freq   freq define gusfreq x x x amiga value found period table save lot calculation huh cut divsmuls div ok ok know lazy work khz amigafreq תהההההההההההההההההההה ²  volume ² אההההההההההההההההההההש handling volume one simplest part coding player matter looking table adjusting percentage sample mixed final output remember actually volume setting thought h included absolutely volume full volume gu user one best volume table found anywhere volume table one one use quite loud loud cause bad clipping others found soft word gusvol x xxaxbxbcxcxcxcxcd xcfxdxdxdxdxdaxdcxde xdefxdfaxeaxeaxeaxeaxeaxea xeaxeaxeaxeaaxebaxecaxedaxeea xeefxefexefxfexfxfexfxfe xfxfexfxfexfxfexfxfe xfxfexfxfexfxfexfaxfaf xfbxfbfxfcxfcfxfdxfdxfdbxfdd תהההההההההההההההההההההההההההההההההההההההההההההההההההההההההההההההההההההההההההה ² section ² ² miscellaneous ² אההההההההההההההההההההההההההההההההההההההההההההההההההההההההההההההההההההההההההההש section describes little thing taken note writing mod player important תההההההההההההההההההההההההההההההההההההההההההההההההההההההההההההה ²  note without instrument number frequency ² important אהההההההההההההההההההההההההההההההההההההההההההההההההההההההההההההש subsection important whole section sometimes composer seemingly strange method write tune ie leaving instrument number putting instrument number note part describes combat instrument number           c c note instrument number  notice porta note composer left instrument number also notice previous note volume set leaving instrument number cause volume stay note slide still stay volume period value note             c  period value note instrument number   reset volume every note slide volume every note give stuttering effect commonly used reinforces last part instrument number instrument number volume reset sample default volume note nothing else            c e mean sample reset starting position note conclusion      reset volume instrument number reset pitch period valuenote reset sample period valuenote effect xy xy edx תהההההההההההההההההההההההההההההההההההההההההההההההההההההההההההההההההההההההההההה ² section ² ² effect ² אההההההההההההההההההההההההההההההההההההההההההההההההההההההההההההההההההההההההההההש part document one sorely needed actually tell code effect vague reference basic explanation like seen many doc terminology  beside effect yn box tick mean effect updated taken care start row row first encountered inbetween mean effect updated speed tick lie inbetween row coding player go effect cxy first easiest substantial effect enable even make tune resemble normal self go effect fxy set speed תההההההההההההההההההההההההההההההההההה ²  effect xy arpeggio ² updated n inbetween אהההההההההההההההההההההההההההההההההההש effect alternate pitch rapidly simulate chord usually sound grating harsh isnt used much except chip tune eg c want add pitch half note range x st semitone add note hfh nd semitone add note hfh effect would generate major effect cause minor tick based effect tick nothing tick add x arg tick add arg tick reset frequency  go back tick reach next row notice speed arpeggiation tick inbetween speed x arg taken account note fine tune apart use finetune table calculate next row like use special arpeggio table find value add done something like increment arpcounter arpcounter arpcounter arpcounter set frequency normal value arpcounter set frequency normal value x finetunes arpcounter set frequency normal value finetunes תההההההההההההההההההההההההההההההההההה ²  effect xy porta ² updated n inbetween אהההההההההההההההההההההההההההההההההההש effect cause pitch slide go eg c want slide frequency amiga value every tick  slide againt value every tick range xy hffh resetting frequency every tick except first one amount slide value given effectparameter add value amiga value frequency tick nothing tick add effectparameter amiga frequency set tick add effectparameter amiga frequency set tick add effectparameter amiga frequency set  keep going end note remember b highest note use law sliding standard mod might written thinking porta stop b carefull personally stop approximately b תההההההההההההההההההההההההההההההההההההה ²  effect xy porta ² updated n inbetween אהההההההההההההההההההההההההההההההההההההש effect cause pitch slide go eg c want slide frequency amiga value every tick  slide amiga value every tick range xy hffh resetting frequency every tick except first one amount slide amound given effectparameter subtract value amiga value frequency tick nothing tick subtract effectparameter frequency set tick subtract effectparameter frequency set tick subtract effectparameter frequency set  keep going end note careful nt slide low going c non standard going frequency could cause horrible side effect תהההההההההההההההההההההההההההההההההההההההה ²  effect xy porta note ² updated inbetween אההההההההההההההההההההההההההההההההההההההההש effect cause pitch slide towards note specified note specified slide towards last note specified porta note effect parameter use last porta speed used channel eg c want set note slide towards speed  want keep sliding already  know speed wont bother telling  range xy hffh effect buggy first hard tick argument given effect must record portaspeed channel need remember  channel worth porta information global array note given must store notetoportato channel nt slide like porta effect also nt reset note like would normally frequency given ie example tick subtract add portaspeed frequency amiga unit set subtract add depending current frequency smaller larger notetoportato תהההההההההההההההההההההההההההההההההה ²  effect xy vibrato ² updated n inbetween אההההההההההההההההההההההההההההההההההש effect cause pitch waver around base note parameter use last vibrato parameter used channel eg want vibrato note speed depth  keep vibrating  b change b  continue vibrating b range x speed vibrate hfh depth vibrato hfh simply case getting sine table default wavecontrol see section  vibrato wavecontrols following along adjusting frequency adding subtracting value found according position table incremented vibratospeed ie skip sine table vibratospeed position every tick tick vibrato value position neg flag cleared new note played restart waveform start positioning vibrato pointer               position sine table want add value sinetable frequency get end want go back subtract value frequency give nice wave reason sine table contains half wave ie bump see diagram running turning upside negating would produce smooth running wave oscillates   point subtract frequency   current    time     vibratopos gone past subtract start respectable place beginning change negation flag ie flag add value subtract value sine table      sine table used protracker player call fully protracker compatible really using table gusplay cascada us table slightly different cant hear difference     calculating depth         calculate amount depth vibrato multiply siner value effect parameter divide remember divide shift right bit must implemented huge vibrato setting frequency            work size delta delta mean much add subtract ie delta vibratodepth channel sinetable vibratopos channel vibratonegflag channel setfrequency freq channel delta else setfrequency freq channel delta example code       interested mine work nt think effect  x  effect  x  work delta vib vibdep track sintab vibpos track  div  add delta track frequency neg flag  subtract delta track frequency neg flag vibneg track  gussetfreq track gusfreq freq track vib else gussetfreq track gusfreq freq track vib vibpos track vibspe track  increment vib position vibpos track vibpos track   jump back start vibneg track  vibneg track  change neg flag else vibneg track  תהההההההההההההההההההההההההההההההההההההההההההה ²  effect xy porta vol slide ² updated n inbetween אההההההההההההההההההההההההההההההההההההההההההההש combination porta note xy volume slide axy parameter affect porta volume parameter use last porta note parameter used channel eg c start porta note using speed  keep porta slide volume well   range x amount slide volume hfh amount slide volume hfh exactly mean xy first volume slide argument refer volume slide though affect porta porta carried last porta note code effect routine like effect h effect h doportatonote effect ah effect h dovolumeslide kill bird stone תהההההההההההההההההההההההההההההההההההההההההההה ²  effect xy vibratovol slide ² updated n inbetween אההההההההההההההההההההההההההההההההההההההההההההש combination vibrato xy volume slide axy parameter affect vibrato volume parameter use vibrato parameter used channel eg c start vibrato speed ah depth  keep vibrato slide volume  well  range x amount slide volume hfh amount slide volume hfh exactly like effect xy xy first volume slide argument refer volume slide though affect vibrato vibrato carried vibrato code effect routine like effect h effect h doportatonote effect ah effect h dovolumeslide kill bird stone hrmm thats bird תהההההההההההההההההההההההההההההההההה ²  effect xy tremolo ² updated n inbetween אההההההההההההההההההההההההההההההההההש effect cause volume oscillate fluctuating style around current volume like vibrato affecting volume pitch parameter use last tremolo parameter used channel eg c want vibrate volume using speed depth  continue tremolo  range x speed vibrate volume hfh depth tremolo hfh seeing similar effect vibrato use table difference tremolo divide delta deviation also check volume go mean biggest value sine table divided biggest deviation depth parameter would peak probably asking volume channel well case would hear negative side tremolo volume dip back full vice versa case volume set tick tremolo value position neg flag cleared new note played restart waveform start work work size delta delta mean much add subtract ie delta tremolodepth channel sinetable tremolopos channel tremolonegflag channel check volume channel delta clip delta accordingly setvolume volume channel delta else check volume channel delta clip delta accordingly setvolume volume channel delta increase tremoloposition pointer set neg flag accordingly information check vibrato really explained detail sine table mentioned stored also תהההההההההההההההההההההההההההההה ²  effect xy pan ² updated n inbetween אההההההההההההההההההההההההההההההש effect nonprotracker worth mentioning introduced otto chrons dmp dual mod player cause leftright position current channel set position specified hence panning eg  set position channel far left far left middle far right surround surround usually achieved copy sample inverted play exactly time one pair panned fully left inverted one say panned fully right give surround effect play sample pan position cancel experiment tracker using goldwave tm invert sample efffect xy channel command effect channel voice ready channel make sure set one voice full left inverted full left surround sound gu תההההההההההההההההההההההההההההההההההההההההה ²  effect xy sample offset ² updated inbetween n אהההההההההההההההההההההההההההההההההההההההההש effect cause note start playing offset sample instead start used beginning sample played skipped eg c want start note playing h byte sample range xy hffh seen example argument first digit digit number hex offset take place sampleoffset effectparameter h enable effect tell soundcard mixing buffer start sample also add value sampleoffset play quite simple really remember check user set offset larger sample תהההההההההההההההההההההההההההההההההההההההה ²  effect axy volume slide ² updated n inbetween אההההההההההההההההההההההההההההההההההההההההש effect cause volume track slide eg slide volume speed unit  slide volume speed unit  slide volume speed unit  slide volume speed unit  slide volume speed unit range x amount slide volume hfh amount slide volume hfh affect either slide volume x tick based effect processed tick tick  x slide volume x slide volume x nothing tick take note volume slide nothing tick x add x volume channel set volume subtract volume channel set volume setting volume make sure havent slid past תההההההההההההההההההההההההההההההההההההההההההה ²  effect bxy jump pattern ² updated inbetween n אהההההההההההההההההההההההההההההההההההההההההההש effect jump specified channel hex eg  b want jump order h range xy hffh effect fairly simple tick note finished reset position order starting row make sure nt jump end song length set last order increment row playnote function row set  le tick handler add row nothing wrong תהההההההההההההההההההההההההההההההההההההה ²  effect cxy set volume ² updated inbetween n אההההההההההההההההההההההההההההההההההההההש effect set volume channel eg c c want set volume channel h range xy hh easiest first effect code simple case setting track volume argument specified hex volume set past h set h process effect tick likewise set volume tick תההההההההההההההההההההההההההההההההההההההההה ²  effect dxy pattern break ² updated inbetween n אהההההההההההההההההההההההההההההההההההההההההש effect break next pattern starting specified row eg  want break pattern start row next pattern range xy hfh  decimal effect similair effect bxy pattern jump jump next pattern though start tracking specified row row bigger take work something like increment order mod pbreak row could cause increment order twice set row x get decimal value hex increment row playnote function row set xy  le tick handler add row nothing wrong תההההההההההההההההההההההההההההההההההההה ²  effect fxy set speed ² updated inbetween n אהההההההההההההההההההההההההההההההההההההש effect set speed song bpm eg  f want set speed song tick row  fd want set bpm song dh range xy hfh speed xy hffh bpm part user specifies parameter fh simply case setting speed variable otherwise need set bpm variable reset timer speed demonstrated section  change speed system timer according beat per minute תהההההההההההההההההההההההההההההההההההההה ²  effect ex set filter ² updated inbetween n אההההההההההההההההההההההההההההההההההההההש effect turn hardware filter applicable pc sound card eg  e want turn filter  e want turn filter range x turn hardware filter turn  isnt much say effect except hardware function designed turn amiga filter wanted could try implementing effect sbpro hw filter תההההההההההההההההההההההההההההההההההההההההה ²  effect ex fine porta ² updated inbetween n אהההההההההההההההההההההההההההההההההההההההההש effect slide pitch x amiga value per row eg c e want start note c move pitch one amiga value  e keep sliding   e range x amount slide hfh effect processed per row tick simple subtracting x current channel frequency remember subtract raise pitch nt subtract finetunes anything straight subtraction x amigaval תההההההההההההההההההההההההההההההההההההההההההה ²  effect ex fine porta ² updated inbetween n אהההההההההההההההההההההההההההההההההההההההההההש effect slide pitch x amiga value per row eg c e want start note c move pitch one amiga value  e keep sliding   e range x amount slide pitch hfh identical effect ex except add amigaval channel x nt subtract תהההההההההההההההההההההההההההההההההההההההההההה ²  effect ex glissando contrl ² updated inbetween n אההההההההההההההההההההההההההההההההההההההההההההש effect cause change effect xy porta note toggle whether smooth slide whether slide jump semitone eg  e want turn glissando porta slide semitone  e want turn glissando porta slide smoothly range x turn glissando turn  default value set smooth slide achieved adding subtracting desired porta value amiga value effect xy already knew glissando turned different story simply case setting frequency next highest semitone finetune value sliding pitch vice versa going implement keep glis flag check porta effect updateeffect function תהההההההההההההההההההההההההההההההההההההההההההה ²  effect ex vibrato waveform ² updated inbetween n אההההההההההההההההההההההההההההההההההההההההההההש effect set waveform vibrato command follow eg  e want select squarewave function vibrato command  e want select default sinewave vibrato command range x vibrato function select  following value x select corresponding vibrato function x set sine wave default x set ramp  x set squarewave    x set random anywhere x nt retrig sine waveform x nt retrig rampdown waveform x nt retrig squarewave waveform x nt retrig random waveform sine wave covered vibrato section  apply sine wave frequency square wave simply subtracting adding vibdepth divided current frequency alternating addsubtract every vibspeed number tick retrig waveform mean start vibrato waveform position everytime new note played set wave control flag waveform restarted continues previous position vibrato waveform תהההההההההההההההההההההההההההההההההההההההה ²  effect ex set finetune ² updated inbetween n אההההההההההההההההההההההההההההההההההההההההש effect set finetune selected instrument eg  ef want set finetune instrument  range x value finetune set hfh value subtract get signed value ie      effect really easy nt know player support apart useless effect implement check instrument number get finetune value effect set finetune instrument תהההההההההההההההההההההההההההההההההההההההה ²  effect ex pattern loop ² updated inbetween n אההההההההההההההההההההההההההההההההההההההההש effect allows user loop part pattern x number time eg c e want set loop start point   e want loop back starting point time range xmarks loop starting point set number time loop starting point hfh effect done following fashion parameter x note row number parameter x patternloop set patternloop x else patternloop patternloop  patternloop row stored row number still looping jump back remember declaring patternloop variable initialize jumping back matter setting row number stored pattern loop number row finished start playing specified position function work updatenote function handler tick  case x eparmy  patlooprow row  store position param else patloopno  patloopnoeparmy  set time else patloopno   else subtract patloopno row patlooprow  looping jump תהההההההההההההההההההההההההההההההההההההההההההה ²  effect ex tremolo waveform ² updated inbetween n אההההההההההההההההההההההההההההההההההההההההההההש effect set waveform tremolo command follow like vibrato eg  e want select squarewave function tremolo command  e want select default sinewave tremolo command range x tremolo function select  following value x select corresponding tremolo function x set sine wave default x set ramp  x set squarewave    x set random anywhere x nt retrig sine waveform x nt retrig rampdown waveform x nt retrig squarewave waveform x nt retrig random waveform see section  information תהההההההההההההההההההההההההההההההההההההההההה ²  effect ex po panning ² updated inbetween n אההההההההההההההההההההההההההההההההההההההההההש effect let position panning eg  e want set channel pan value far left  ef want set channel pan value far right range xposition pan hfh tick read parameter set relative panning value channel תההההההההההההההההההההההההההההההההההההההה ²  effect ex retrig note ² updated n inbetween אהההההההההההההההההההההההההההההההההההההההש effect retiggers current note every x tick eg c e want retrig note every tick speed would  retrig c e want retrig note every tick speed would retrig note time range xticks retriggers hfh effect need use modulus operator check retrig happen x say retrig note speed number time one note ie tick mod always would retrigging every note tick mod even number odd number would retrigging every note etc happen play note would normally note played tick would normally תהההההההההההההההההההההההההההההההההההההההההההה ²  effect eax fine volslide ² updated inbetween n אההההההההההההההההההההההההההההההההההההההההההההש effect slide volume x value per row eg c c want start note volume  ea want slide volume channel unit  ea keep sliding unit  range x amount slide hfh effect processed per row tick simple adding x current channel volume processed tick touched tick checking done volume larger  hint volume command checking bound actually set volume תהההההההההההההההההההההההההההההההההההההההההההההה ²  effect ebx fine volslide ² updated inbetween n אההההההההההההההההההההההההההההההההההההההההההההההש effect slide volume x value per row eg c eb want slide volume channel unit  eb keep sliding unit   eb keep sliding unit  range x amount slide hfh effect processed per row tick simple subtracting x current channel volume processed tick touched tick checking done volume smaller  hint volume command checking bound actually set volume תהההההההההההההההההההההההההההההההההההה ²  effect ecx cut note ² updated n inbetween אההההההההההההההההההההההההההההההההההההש effect cut volume note x amount tick eg speed say c ec want stop note tick half way note range x number tick wait zeroing sample volume hfh effect ignored tick tick x updating tick based effect set volume channel course user specified x number speed song would ok would never get tick x effect ignored תהההההההההההההההההההההההההההההההההההההה ²  effect edx delay note ² updated n inbetween אההההההההההההההההההההההההההההההההההההההש effect wait x amount tick actually play sample eg speed say c ed want delay playing note another tick range x number tick wait playing sample hfh effect ignored tick must make sure nt play sample tick arrive tick x play sample would normally user specified x number speed song would ok would never get tick x effect ignored תההההההההההההההההההההההההההההההההההההההההה ²  effect eex pattern delay ² updated inbetween n אהההההההההההההההההההההההההההההההההההההההההש effect delay pattern time would take play x number note eg c ee want play c note wait note c  playing next note range x number note delay pattern hfh implement effect going modify main interrupt handler see section  going keep counter subtracted every time speed number tick nt play note must still keep playing effect though would look something like tick speed  blah blah blah etc  patdelay  increment row playnote else patdelay  else doeffects boil playing note incrementing row x number note pattern delay counter mod keep playing nothing happened תההההההההההההההההההההההההההההההההההההההה ²  effect efx invert loop ² updated inbetween n אהההההההההההההההההההההההההההההההההההההההש effect inverts sample loop play backwards eg c ef want play loop sample backwards speed range x speed set invert loop hfh effect supported player tracker nt bother תהההההההההההההההההההההההההההההההההההההההההההההההההההההההההההההההההההההההההההה ² section ² ² protracker b format document ² אההההההההההההההההההההההההההההההההההההההההההההההההההההההההההההההההההההההההההההש offset byte description songname remember put trailing null byte end  information sample  offset byte description samplename sample pad null byte samplelength sample stored number word multiply two get real sample length byte lower four bit finetune value stored signed four bit number upper four bit used set zero value finetune           b  c   e  f  volume sample range   decimal repeat point sample stored number word offset start sample multiply two get offset byte repeat length sample stored number word loop multiply two get replen byte information next sample start like info sample offset byte description sample  sample  sample  sample  offset byte description songlength range  well  little byte set old tracker search pattern loading noisetracker us byte restart nt song position  hold number  tell tracker pattern play position four letter  mk  something mahoney kaktus inserted increased number sample modulesong us sample text removed make module harder rip startrekker put  flt   flt  instead offset byte description data pattern  xxxx number pattern stored equal highest patternnumber song position table offset  note stored byte four note position pattern stored chan chan chan chan chan chan chan chan chan chan chan chan etc info note byte  byte byte  byte   upper four bit lower four effect command bit sam note period bit sam ple number ple number periodtable tuning normal c b  c b  c b  determine note show scan table find period one stored byte  use index look notenames table 