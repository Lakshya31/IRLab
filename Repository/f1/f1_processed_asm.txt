assembler programming topic  architecture intel family architecture general purpose register segment register ahal ax eax accumulator c code segment bhbl bx ebx base d data segment chcl cx ecx counter s stack segment dhdl dx edx data e extra segment f newer exx indicates  bit register g newer pointer register stack register si esi source index sp esp stack pointer di edi destination index bp ebp base pointer ip instruction pointer status register flag status flag see flag special register  cr control register dr debug register cr control register dr debug register cr control register dr debug register dr debug register tr test register dr debug register tr test register dr debug register tr test register tr test register register default segment valid override bp s d e c si di d e s c di string e none si string d e s c see cpu detecting instruction timing instruction timing instruction clock cycle calculation instruction require additional clock cycle due  next instruction component  identified   instruction clock cycle listing due prefetch queue purge control transfer general rule calculating    applicable   number byte next instruction   number component next instruction instruction coding byte plus data displacement considered component  effective address ea calculation description clock cycle displacement base index bx bp si di displacement base index baseindex bpdi bxsi baseindex bpsi bxdi baseindexdisplacement bpdi bxsi baseindexdisplacement bpsidisp bxdidisp add cycle word operand odd address add cycle segment override  timing differ  task state calculation  t  defined switching vm tss one following תההההההההההההההההההההההההההההההההההההההה new task דהההההההגהההההההגהההההההגהההההההגההההההה תההההההההההההההה tss³ tss³ tss³ tss³ tss³ old task vm vm vm vm אהההההההההההההההוהההההההוהההההההוהההההההוהההההההוההההההה tss vm דהההההההוהההההההוהההההההוהההההההוההההההה tss vm דהההההההוהההההההוהההההההוהההההההוההההההה cpu tss דהההההההוהההההההוהההההההוהההההההוההההההה cpu tss אהההההההבהההההההבהההההההבהההההההבהההההההש miscellaneous timing best case take account wait state instruction alignment state prefetch queue dma refresh cycle cache hitsmisses exception processing convert clock nanosecond divide one microsecond processor speed megahertz mhz n mhz x nanosecond see  architecture directive asm directive macro assembler directive processor code generation directive  enables assembly instruction  enables assembly non privileged instruction c  p enables assembly instruction  enabled assembly instruction  enabled assembly non privileged instruction used model segment defined bit cause segment default dword alignment p enabled assembly instruction see   enabled assembly instruction  default enables assembly  instruction  default enables assembly instruction directive must precede segment effect occur within segment memory model directive code name start code segment must follow model directive const start constant data segment name const must follow model directive placed dgroup data start near data segment initialized data name data must follow model directive placed dgroup data start near data segment uninitialized data name bs must follow model directive placed dgroup fardata name placed group fardata name placed group model model defines memory model one following small compact medium large huge must used prior segment directive stack size indicates start stack segment named stack size indicating number byte reserve default k placed dgroup segment definition segment ordering linkage directive alpha order segment alphabetically seq order segment sequentially default assume sreg name sreg name  selects default segment register used assembler cpu addressing symbol segment group name must associated segment group set  nothing  indicate segment register associated comm def def  defines variable public external communal used include file identify source file without declaring model extern actually defines data communal variable initialized guaranteed allocated contiguously since allocated linker dosseg order segment do microsoft language default order cause paragph alignment end name mark end source module set program start address c ip name present name endp end procedure name name end end segment structure extrn name type name type  defines one external symbol name group seg seg name label nearfarproc defines entry point proc specified value depends current model name pgmname ignored since masm  used set module name name proc nearfar defines procedure nearfar model default public name name  make symbol name available module name segment align combine use class align byte align byte address alignment word align even address dword align dword address para align next byte paragraph page align next byte boundary combine public similar named segment concatenated c stack similar named segment concatenated s common similar named segment overlapped memory similar name segment concatenated addr segment relative absolute address nothing segment private loaded independent use use segment bit  use segment bit  data allocation directive align n aligns next variable instruction boundary multiple  n  speed memory fetch bit cpu aligned new masm  previous version used even result nop added code name db init init  define byte name dd init init  define double word dword byte name df init init  define far word fword byte name dq init init  define quad word qword byte name dt init init  define temp word tbyte byte name dw init init  define word word byte count dup init init  duplicate init count time dup nested level duped initial value nt result data object file instead increment next data addr name end end structure segment even align aligns data even boundary org expr set location counter expr expr code orged current loc name record fld fld  defines byte word variable consisting bit field field format fieldname width expr sum width must name struc init init defines beginning structure value initializers symbol required logical bit oriented directive expr expr return nonzero set bit match expr eq expr return  true false expr ge expr return  true false expr le expr return  true false expr lt expr return  true false mask fldnamerecord return bit mask bit record expr expr return bitwise expr expr expr return expr bit reversed expr shl count return expr shifted left count time expr shr count return expr shifted right count time width fldnamerecord return width field bit record expr xor expr return bitwise xor expr expr operator directive index operator addition msfloat encode float microsoft real format type expr return byte defining mode scope expr name equ expr assigns expression name surround text high expr return high byte expr include filespec insert code filespec file includelib filespec store link library info obj file length var return number data object duped var low expr return low byte expr expr mod expr return remainder exprexpr offset expr return offset expr model used offset group relative segment refers end segment type ptr expr force expr type seg expr return segment expression short set type label short le byte start next instruction size var return byte allocated dup directive type return operand specified type whose offset segment value equal current location type expr return type expression program listing documentation directive cref restores listing cross reference symbol lall include macro expansion listing lfcond include false conditional block listing list start listing statement sall suppress listing macro expansion sfcond suppress false conditional block listing xall start listing macro expansion xcref name name  suppress symbol cross reference xlist suppress program listing comment delimiter text page len wid set page length width ejects parms subttl text defines program listing subtitle title text defines program listing title condition assembly directive else else clause conditional assembly block endif terminates conditional assembly block ifdef name conditional assembly name defined macro definition directive endm terminates macro block exitm exit macro expansion immediately irp parm arg arg  parm statement enclosed irp endm repeated replaced value  arg   arg  irpc parm string parm statement enclosed irpc endm repeated replaced value char  string  character position string  string  enclosed contains space separator local name name  defines scope symbol local macro name macro parm parm  defines macro parameter purge name name purge macro memory rept expr repeat statement endm statement expr time user message directive err generates error err generates error pas err generates error pas errb arg generates error arg blank errdef name generates error name previously defined errdif arg arg erre expr generates error expr false text display text console predefined equates available simplified segment used curseg contains current segment filename current file name without extension code contains current code segment codesize small compact large medium huge datasize small medium compact large huge const contains segment define const data contains segment define data data contains segment define data fardata contains segment define fardata fardata contains segment define fardata stack contains segment define stack available simplified segment system used curseg filename available regardless radix specifier radix expr set radix  number dec default b binary data specifier q octal data specifier octal data specifier decimal data specifier h hexadecimal data specifier masm option assembler option microsoft assembler command line option masm option srcfile objfile lstfile xreffile option definition generate segment alphabetical order b size set io buffer size k byte  default c generate cross reference file crf extension generate pas listing dsym val define symbol use assembly e emulate floating point instruction use hll h list option command syntax ipath includefile search path l generate listing file lst extension ml case sensitive symbol mu upper case symbol default mx case sensitive external public symbol n suppress symbol table listing p check impure code protected mode invalid c override generate segment order found default terse message display display error v verbose message display includes line symbol w  assembly warning level warning severe warning warning enabled x display complete conditional assembly block listing including false conditionals z display error including line number screen zd generate line number obj file zi generate symbolic line number information obj file environment variable include search path include file masm default command line option flag register flag flag intel family flag register ³³³f³e³d³c³b³a³³³³³³³³³³³ אההה cf carry flag אההה אההה pf parity flag אההה אההה af auxiliary flag אההה אההה zf zero flag אההה sf sign flag אההה tf trap flag single step אההה interrupt flag אההה df direction flag אההה overflow flag אהבההה iopl io privilege level  אההההה nt nested task flag  אההההה אההההה rf resume flag  אהההההה vm virtual mode flag  see pushf popf sti cli std cld model segment name memory model programming segment information model tiny data code fit one k segment code data accessed via near pointer small k data segment max k code segment max code data accessed via near pointer compact mb data segment max k code segment max code accessed via near pointer data accessed via far pointer array greater k medium k data segment max mb code segment max code accessed via far pointer data accessed via near pointer large mb data segment max mb code segment max code data accessed via far pointer single element greater k huge mb data segment max mb code segment max code data accessed via far pointer model array larger k mode c normalize data pointer avoid segment wrapping small memory model directive segment alignment combine class code text word public code data data word public data const const word public const data bs word public bs stack stack para stack stack compact memory model directive segment alignment combine class code text word public code fardata fardata para private fardata fardata farbss para private farbss data data word public data const const word public const data bs word public bs stack stack para stack stack medium memory model directive segment alignment combine class code nametext word public code data data word public data const const word public const data bs word public bs stack stack para stack stack large huge memory model directive segment alignment combine class code nametext word public code fardata fardata para private fardata fardata farbss para private farbss data data word public data const const word public const data bs word public bs stack stack para stack stack segment fall dgroup except text fardata farbss see masm directive msw machine status word msw machine status word  ³³³³³³³³ machine status word אהההה protection enable pe אההההה math present mp אהההההה emulation em אההההההה task switched t אהההההההה extension type et אהההההההההה reserved אההההההההההההה paging pg bit pe protection enable switch processor protected real mode bit mp math present control function wait instruction bit em emulation indicates whether coprocessor function emulated bit t task switched set interrogated coprocessor task switch interpretting coprocessor instruction bit et extension type indicates type coprocessor system bit  reserved bit pg paging indicates whether processor us page table translate linear address physical address see smsw lmsw aaa aaa ascii adjust addition usage aaa modifies flag af cf pf sf zf undefined change content al valid unpacked decimal high order nibble zeroed clock size operand x byte none see instruction timing aad aad ascii adjust division usage aad modifies flag sf zf pf af cf undefined used dividing unpacked decimal number multiplies ah add result al set ah zero instruction also known undocumented behavior clock size operand x byte none see instruction timing aam aam ascii adjust multiplication usage aam modifies flag pf sf zf af cf undefined used multiplication two unpacked decimal number instruction adjusts unpacked decimal number high order nibble byte must zeroed using instruction instruction also known undocumented behavior clock size operand x byte none see instruction timing aa aa ascii adjust subtraction usage aa modifies flag af cf pf sf zf undefined corrects result previous unpacked decimal subtraction al high order nibble zeroed clock size operand x byte none see instruction timing adc adc add carry usage adc dest src modifies flag af cf sf pf zf sum two binary operand placing result destination cf set added destination clock size operand x byte reg reg mem reg ea  wea reg mem ea  wea reg immed  mem immed ea  wea accum immed  see instruction timing add add arithmetic addition usage add dest src modifies flag af cf pf sf zf add  src   dest  replacing original content  dest  operand binary clock size operand x byte reg reg mem reg ea  wea reg mem ea  wea reg immed  mem immed ea  wea accum immed  see instruction timing logical usage dest src modifies flag cf pf sf zf af undefined performs logical two operand replacing destination result clock size operand x byte reg reg mem reg ea  wea reg mem ea  wea reg immed  mem immed ea  wea accum immed  see instruction timing arpl arpl adjusted requested privilege level selector  protected mode usage arpl dest src modifies flag zf compare rpl bit  dest   src  rpl bit  dest  le  src  destination rpl bit set equal source rpl bit zero flag set otherwise zero flag cleared clock size operand x byte reg reg mem reg see instruction timing bound bound array index bound check  usage bound src limit modifies flag none array index source register checked upper lower bound memory source first word located  limit  lower boundary word  limit  upper array bound interrupt occurs source value le higher source clock size operand x byte reg mem nj nj reg mem nj nj nj jump taken see instruction timing bsf bsf bit scan forward  usage bsf dest src modifies flag zf scan source operand first bit set set zf bit found set load destination index first set bit clear zf bit found set bsf scan forward across bit pattern n bsr scan reverse n clock size operand x byte reg reg n  reg mem n   reg reg n   reg mem n   see instruction timing bsr bsr bit scan reverse  usage bsr dest src modifies flag zf scan source operand first bit set set zf bit found set load destination index first set bit clear zf bit found set bsf scan forward across bit pattern n bsr scan reverse n clock size operand x byte reg reg n  reg mem n   reg reg n   reg mem n   see instruction timing bswap bswap byte swap  usage bswap reg modifies flag none change byte order bit register big endian little endian vice versa result left destination register undefined operand bit register clock size operand x byte reg see instruction timing bt bt bit test  usage bt dest src modifies flag cf destination bit indexed source value copied carry flag clock size operand x byte reg immed  mem immed  reg reg  mem reg  see instruction timing btc btc bit test compliment  usage btc dest src modifies flag cf destination bit indexed source value copied carry flag complimented inverted clock size operand x byte reg immed  mem immed  reg reg  mem reg  see instruction timing btr btr bit test reset  usage btr dest src modifies flag cf destination bit indexed source value copied carry flag cleared destination clock size operand x byte reg immed  mem immed  reg reg  mem reg  see instruction timing bts bts bit test set  usage bts dest src modifies flag cf destination bit indexed source value copied carry flag set destination clock size operand x byte reg immed  mem immed  reg reg  mem reg  see instruction timing call call procedure call usage call destination modifies flag none push instruction pointer code segment far call onto stack load instruction pointer address procname code continues execution c ip clock operand x rel near ip relative rel near ip relative reg near register indirect reg near register indirect mem near memory indirect ea mem near memory indirect ptr far full ptr supplied ptr far full ptr supplied ptr far ptr supplied prot mode ptr far ptr supplied prot mode far indirect ea far indirect far indirect prot mode far indirect prot mode ptr task via tss task gate t t task via tss task gate  t t task t t task t t ptr gate privilege ptr gate privilege gate privilege gate privilege ptr gate priv parm ptr gate priv parm gate priv parm gate priv parm ptr gate priv x parms x xm x ptr gate priv x parms xm x gate priv x parms x xm x gate priv x parms xm x see instruction timing cbw cbw convert byte word usage cbw modifies flag none convert byte al word value ax extending sign al throughout register ah clock size operand x byte none see instruction timing cdq cdq convert double quad  usage cdq modifies flag none convert signed dword eax signed quad word edx eax extending high order bit eax throughout edx clock size operand x byte none see instruction timing clc clc clear carry usage clc modifies flag cf clear carry flag clock size operand x byte none see instruction timing cld cld clear direction flag usage cld modifies flag df clear direction flag causing string instruction increment si di index register clock size operand x byte none see instruction timing cli cli clear interrupt flag disable usage cli modifies flag disables maskable hardware interrupt clearing interrupt flag nmi software interrupt inhibited clock size operand x byte none see instruction timing clts clts clear task switched flag  privileged usage clts modifies flag none clear task switched flag machine status register privileged operation generally used operating system code clock size operand x byte none see instruction timing cmc cmc complement carry flag usage cmc modifies flag cf toggle inverts carry flag clock size operand x byte none see instruction timing cmp cmp compare usage cmp dest src modifies flag af cf pf sf zf subtracts source destination update flag save result flag subsequently checked condition clock size operand x byte reg reg mem reg ea  wea reg mem ea  wea reg immed  mem immed ea  wea accum immed  see instruction timing cmps cmpsb cmpsw cmpsd cmps compare string byte word doubleword usage cmps dest src cmpsb cmpsw cmpsd  modifies flag af cf pf sf zf subtracts destination value source without saving result update flag based subtraction index register e si e di incremented decremented depending state direction flag cmpsb incdecrements index register cmpsw incdecrements cmpsd increment decrement rep prefix used process entire data item clock size operand x byte dest src w see instruction timing cmpxchg cmpxchg compare exchange usage cmpxchg dest src  modifies flag af cf pf sf zf compare accumulator  bit  dest  equal  dest  loaded  src  otherwise accumulator loaded  dest  clock size operand x byte reg reg mem reg add clock  mem reg  comparison fails see instruction timing cwd cwd convert word doubleword usage cwd modifies flag none extends sign word register ax throughout register dx forming doubleword quantity dx ax clock size operand x byte none see instruction timing cwde cwde convert word extended doubleword  usage cwde modifies flag none convert signed word ax signed doubleword eax extending sign bit ax throughout eax clock size operand x byte none see instruction timing daa daa decimal adjust addition usage daa modifies flag af cf pf sf zf undefined corrects result al previous bcd addition operation content al changed pair packed decimal digit clock size operand x byte none see instruction timing da da decimal adjust subtraction usage da modifies flag af cf pf sf zf undefined corrects result al previous bcd subtraction operation content al changed pair packed decimal digit clock size operand x byte none see instruction timing dec dec decrement usage dec dest modifies flag af pf sf zf unsigned binary subtraction one destination clock size operand x byte reg mem ea  reg see instruction timing div div divide usage div src modifies flag af cf pf sf zf undefined unsigned binary division accumulator source source divisor byte value ax divided  src  quotient placed al remainder ah source operand word value dx ax divided  src  quotient stored ax remainder dx clock size operand x byte reg  reg  reg mem  ea  mem  ea  wea mem  see instruction timing enter enter make stack frame  usage enter local level modifies flag none modifies stack entry procedure high level language operand  local  specifies amount storage allocated stack  level  specifies nesting level routine paired leave instruction efficient method entry exit procedure clock size operand x byte immed immed immed immed  n  n n see instruction timing esc esc escape usage esc immed src modifies flag none provides access data bus resident processor cpu treat nop place memory operand bus clock size operand x byte immed reg  immed mem   see instruction timing hlt hlt halt cpu usage hlt modifies flag none halt cpu reset line activated nmi maskable interrupt received cpu becomes dormant retains current c ip later restart clock size operand x byte none see instruction timing idiv idiv signed integer division usage idiv src modifies flag af cf pf sf zf undefined signed binary division accumulator source source byte value ax divided  src  quotient stored al remainder ah source word value dx ax divided  src  quotient stored al remainder dx clock size operand x byte reg  reg  reg mem  ea  mem  ea  w mem  see instruction timing imul imul signed multiply usage imul src imul src immed  imul dest src immed  imul dest src  modifies flag cf af pf sf zf undefined signed multiplication accumulator  src  result placed accumulator source operand byte value multiplied al result stored ax source operand word value multiplied ax result stored dx ax variation instruction allow specification source destination register well third immediate factor clock size operand x byte reg    reg    reg   mem     mem     mem    reg reg    reg reg    reg mem    reg mem    reg immed   reg immed    reg reg immed    reg reg immed    reg mem immed    reg mem immed    see instruction timing input byte word port usage accum port modifies flag none byte word dword read  port  placed al ax eax respectively port number range  specified immediate otherwise port number must specified dx valid port range pc  though value may specified recognized third party vendor p clock size operand x byte accum immed  accum immed pm   accum dx  accum dx pm    protected mode timing depend privilege level first number timing cpl ף iopl second number timing cpl iopl vm mode cpl ע iopl third number timing virtual mode processor virtual mode always requires cycle see instruction timing inc inc increment usage inc dest modifies flag af pf sf zf add one destination unsigned binary operand clock size operand x byte reg reg reg mem ea  wea see instruction timing in insb insw insd in input string port  usage in dest port insb insw insd  modifies flag none load data port destination e e di even destination operand supplied e di adjusted size operand increased direction flag cleared decreased direction flag set insb insw insd operand allowed size determined mnemonic clock size operand x byte dest port dest port pm   none none pm    protected mode timing depend privilege level first number timing cpl ף iopl second number timing cpl iopl third number timing virtual mode processor see instruction timing int int interrupt usage int num modifies flag tf initiate software interrupt pushing flag clearing trap interrupt flag pushing c followed ip loading c ip value found interrupt vector table execution begin location addressed new c ip clock size operand x byte constant  prot mode priv prot mode priv vm pl prot mode via task gate t t immed  immed prot mode priv immed prot mode priv immed vm pl immed prot mode via task gate t t see instruction timing interrupt overflow usage modifies flag tf overflow flag set instruction generates int cause code addressed  executed clock size operand x byte none jump  jump prot mode priv prot mode priv vm pl prot mode via task gate t t see instruction timing invd invd invalidate cache  usage invd modifies flag none flush cpu internal cache issue special function bus cycle indicates flush external cache data writeback external cache lost clock size operand x byte none see instruction timing invlpg invlpg invalidate translation lookaside buffer entry  usage invlpg modifies flag none invalidates single page table entry translation lookaside buffer intel warns instruction may implemented differently future processor clock size operand x byte none timing tlb entry hit see instruction timing iret iretd iretiretd interrupt return usage iret iretd  modifies flag af cf df pf sf tf zf return control point interruption popping ip c flag stack continues execution location cpu exception interrupt return instruction cause exception c ip placed stack interrupt address offending instruction clock size operand x byte iret  iret prot mode iret le privilege iret different task nt t t iretd  iretd le privilege iretd vm mode iretd different task nt t t timing listed realmodeprotectedmode see instruction timing j  jump instruction table mnemonic meaning jump condition ja jump cf zf jae jump equal cf jb jump cf jbe jump equal cf zf jc jump carry cf jcxz jump cx zero cx je jump equal zf jg jump greater signed zf sfof jge jump greater equal signed sfof jl jump le signed sf jle jump le equal signed zf sf jmp unconditional jump unconditional jna jump cf zf jnae jump equal cf jnb jump cf jnbe jump equal cf zf jnc jump carry cf jne jump equal zf jng jump greater signed zf sf jnge jump greater equal signed sf jnl jump le signed sfof jnle jump le equal signed zf sfof jno jump overflow signed jnp jump parity pf jns jump signed signed sf jnz jump zero zf jo jump overflow signed jp jump parity pf jpe jump parity even pf jpo jump parity odd pf j jump signed signed sf jz jump zero zf clock size operand x byte jx jump jump jx nearlabel jump good programming practice organize code expected case executed without jump since actual jump take longer execute falling test see jcxz jmp respective timing see instruction timing flag ja jnbe jajnbe jump jump equal usage ja label jnbe label modifies flag none cause execution branch  label  carry flag zero flag clear unsigned comparision clock size operand x byte label jump  jump see instruction timing jae jnb jaejnb jump equal jump usage jae label jnb label modifies flag none cause execution branch  label  carry flag clear functionally similar jnc unsigned comparision clock size operand x byte label jump  jump see instruction timing jb jnae jbjnae jump jump equal usage jb label jnae label modifies flag none cause execution branch  label  carry flag set functionally similar jc unsigned comparision clock size operand x byte label jump  jump see instruction timing jbe jna jbejna jump equal jump usage jbe label jna label modifies flag none cause execution branch  label  carry flag zero flag set unsigned comparision clock size operand x byte label jump  jump see instruction timing jc jc jump carry usage jc label modifies flag none cause execution branch  label  carry flag set functionally similar jb jnae unsigned comparision clock size operand x byte label jump  jump see instruction timing jcxz jecxz jcxzjecxz jump register e cx zero usage jcxz label jecxz label  modifies flag none cause execution branch  label  register cx zero us unsigned comparision clock size operand x byte label jump jump see instruction timing je jz jejz jump equal jump zero usage je label jz label modifies flag none cause execution branch  label  zero flag set us unsigned comparision clock size operand x byte label jump  jump see instruction timing jg jnle jgjnle jump greater jump le equal usage jg label jnle label modifies flag none cause execution branch  label  zero flag clear sign flag equal overflow flag signed comparision clock size operand x byte label jump  jump see instruction timing jge jnl jgejnl jump greater equal jump le usage jge label jnl label modifies flag none cause execution branch  label  sign flag equal overflow flag signed comparision clock size operand x byte label jump  jump see instruction timing jl jnge jljnge jump le jump greater equal usage jl label jnge label modifies flag none cause execution branch  label  sign flag equal overflow flag unsigned comparision clock size operand x byte label jump  jump see instruction timing jle jng jlejng jump le equal jump greater usage jle label jng label modifies flag none cause execution branch  label  zero flag set sign flag equal overflow flag signed comparision clock size operand x byte label jump  jump see instruction timing jmp jmp unconditional jump usage jmp target modifies flag none unconditionally transfer control  label  jump default within  byte instruction following jump near short jump cause ip updated far jump cause c ip updated clock operand x rel relative rel relative rel relative reg near register indirect reg near register indirect mem near mem indirect ea mem near mem indirect ea ptr far dword immed ptr far pm dword immed ptr call gate priv ptr via tss t t ptr via task gate t t mem far indirect mem far pm indirect mem call gate priv mem via tss t t mem via task gate t t ptr far byte immed ptr far pm byte immed ptr call gate priv ptr via tss t t ptr via task state t t far address dword far address dword call gate priv via tss t t via task state t t see instruction timing jnc jnc jump carry usage jnc label modifies flag none cause execution branch  label  carry flag clear functionally similar jae jnb unsigned comparision clock size operand x byte label jump  jump see instruction timing jne jnz jnejnz jump equal jump zero usage jne label jnz label modifies flag none cause execution branch  label  zero flag clear unsigned comparision clock size operand x byte label jump  jump see instruction timing jno jno jump overflow usage jno label modifies flag none cause execution branch  label  overflow flag clear signed comparision clock size operand x byte label jump  jump see instruction timing jns jns jump signed usage jns label modifies flag none cause execution branch  label  sign flag clear signed comparision clock size operand x byte label jump  jump see instruction timing jnp jpo jnpjpo jump parity jump parity odd usage jnp label jpo label modifies flag none cause execution branch  label  parity flag clear unsigned comparision clock size operand x byte label jump  jump see instruction timing jo jo jump overflow usage jo label modifies flag none cause execution branch  label  overflow flag set signed comparision clock size operand x byte label jump  jump see instruction timing jp jpe jpjpe jump parity jump parity even usage jp label jpe label modifies flag none cause execution branch  label  parity flag set unsigned comparision clock size operand x byte label jump  jump see instruction timing j j jump signed usage j label modifies flag none cause execution branch  label  sign flag set signed comparision clock size operand x byte label jump  jump see instruction timing lahf lahf load register ah flag usage lahf modifies flag none copy bit  flag register ah includes flag af cf pf sf zf bit undefined clock size operand x byte none see instruction timing lar lar load access right  protected usage lar dest src modifies flag zf high byte destination register overwritten value access right byte low order byte zeroed depending selection source operand zero flag set load operation successful clock size operand x byte reg reg reg reg reg mem  reg mem  see instruction timing lds lds load pointer using d usage lds dest src modifies flag none load bit pointer memory source destination register d offset placed destination register segment placed d use instruction word lower memory address must contain offset word higher address must contain segment simplifies loading far pointer stack interrupt vector table clock size operand x byte reg mem ea  reg mem pm  see instruction timing lea lea load effective address usage lea dest src modifies flag none transfer offset address  src  destination register clock size operand x byte reg mem ea  see instruction timing leave leave restore stack procedure exit  usage leave modifies flag none release local variable created previous enter instruction restoring sp bp condition procedure stack frame initialized clock size operand x byte none see instruction timing le le load pointer using e usage le dest src modifies flag none load bit pointer memory source destination register e offset placed destination register segment placed e use instruction word lower memory address must contain offset word higher address must contain segment simplifies loading far pointer stack interrupt vector table clock size operand x byte reg mem ea  wea reg mem pm  see instruction timing lf lf load pointer using f  usage lf dest src modifies flag none load bit pointer memory source destination register f offset placed destination register segment placed f use instruction word lower memory address must contain offset word higher address must contain segment simplifies loading far pointer stack interrupt vector table clock size operand x byte reg mem  reg mem pm  see instruction timing lgdt lgdt load global descriptor table  privileged usage lgdt src modifies flag none load value operand global descriptor table gdt register clock size operand x byte mem see instruction timing lidt lidt load interrupt descriptor table  privileged usage lidt src modifies flag none load value operand interrupt descriptor table idt register clock size operand x byte mem see instruction timing lgs lgs load pointer using g  usage lgs dest src modifies flag none load bit pointer memory source destination register g offset placed destination register segment placed g use instruction word lower memory address must contain offset word higher address must contain segment simplifies loading far pointer stack interrupt vector table clock size operand x byte reg mem  reg mem pm  see instruction timing lldt lldt load local descriptor table  privileged usage lldt src modifies flag none load value operand local descriptor table register ldtr clock size operand x byte reg mem see instruction timing lmsw lmsw load machine status word  privileged usage lmsw src modifies flag none load machine status word msw data found  src  clock size operand x byte reg mem see instruction timing lock lock lock bus usage lock lock  prefix modifies flag none instruction prefix cause cpu assert bus lock signal execution next instruction used avoid two processor updating data location always asserts lock xchg memory operand used lock bus prior xchg mov instruction clock size operand x byte none see instruction timing lods lodsb lodsw lodsd lods load string byte word double usage lods src lodsb lodsw lodsd  modifies flag none transfer string element addressed d si even operand supplied accumulator si incremented based size operand based instruction used direction flag set si decremented direction flag clear si incremented use rep prefix clock size operand x byte src  see instruction timing loop loop decrement cx loop cx zero usage loop label modifies flag none decrement cx transfer control  label  cx zero  label  operand must within  byte instruction following loop instruction clock size operand x byte label jump jump see instruction timing loope loopz loopeloopz loop equal loop zero usage loope label loopz label modifies flag none decrement cx without modifying flag transfer control  label  cx zero flag set  label  operand must within  byte instruction following loop instruction clock size operand x byte label jump jump see instruction timing loopnz loopne loopnzloopne loop zero loop equal usage loopnz label loopne label modifies flag none decrement cx without modifying flag transfer control  label  cx zero flag clear  label  operand must within  byte instruction following loop instruction clock size operand x byte label jump jump see instruction timing lsl lsl load segment limit  protected usage lsl dest src modifies flag zf load segment limit selector destination register selector valid visible current privilege level loading successful zero flag set otherwise cleared clock size operand x byte reg reg  reg reg  reg mem  reg mem  time listed  byte granular   page granular  see instruction timing l l load pointer using s  usage l dest src modifies flag none load bit pointer memory source destination register s offset placed destination register segment placed s use instruction word lower memory address must contain offset word higher address must contain segment simplifies loading far pointer stack interrupt vector table clock size operand x byte reg mem  reg mem pm  see instruction timing ltr ltr load task register  privileged usage ltr src modifies flag none load current task register value specified  src  clock size operand x byte reg mem see instruction timing mov mov move byte word usage mov dest src modifies flag none copy byte word source operand destination operand destination s interrupt disabled except early buggy x cpu cpu disable interrupt destination segment register clock size operand x byte reg reg mem reg ea  wea reg mem ea  wea mem immed ea  wea reg immed  mem accum w accum mem w segreg reg segreg mem ea  wea reg segreg mem segreg ea  wea reg crcrcr cr reg cr reg cr reg reg drdrdrdr reg drdr drdrdrdr reg drdr reg reg trtr trtr reg reg tr tr reg special register used operand bit see instruction timing movs movsb movsw movsd movs move string byte word usage movs dest src movsb movsw movsd  modifies flag none copy data addressed d si even operand given location e di destination update si di based size operand instruction used si di incremented direction flag cleared decremented direction flag set use rep prefix clock size operand x byte dest src w see instruction timing movsx movsx move sign extend  usage movsx dest src modifies flag none copy value source operand destination register sign extended clock size operand x byte reg reg reg mem  see instruction timing movzx movzx move zero extend  usage movzx dest src modifies flag none copy value source operand destination register zero extended clock size operand x byte reg reg reg mem  see instruction timing mul mul unsigned multiply usage mul src modifies flag cf af pf sf zf undefined unsigned multiply accumulator source  src  byte value al used multiplicand result placed ax  src  word value ax multiplied  src  dx ax receives result  src  double word value eax multiplied  src  edx eax receives result  us early algorithm make multiplying size value eax fast bit register clock size operand x byte reg    reg    reg    mem  ea    mem  ea    mem    see instruction timing imul neg neg two complement negation usage neg dest modifies flag af cf pf sf zf subtracts destination save complement  dest  back  dest  clock size operand x byte reg mem ea  wea see instruction timing nop nop operation h usage nop modifies flag none nothing instruction result occupation space time useful patching code segment clock size operand x byte none see instruction timing one compliment negation logical usage dest modifies flag none inverts bit  dest  operand forming complement clock size operand x byte reg mem ea  wea see instruction timing inclusive logical usage dest src modifies flag cf pf sf zf af undefined logical inclusive two operand returning result destination bit set either operand set destination clock size operand x byte reg reg mem reg ea  wea reg mem ea  wea reg immed  mem immed ea  mem immed ea  accum immed  see instruction timing output data port usage port accum modifies flag none transfer byte al word ax dword eax specified hardware port address port number range  specified immediate greater port number must specified dx since pc decodes bit port address value decoded third party vendor equipment also map port range  clock size operand x byte immed accum  immed accum pm   dx accum  dx accum pm    protected mode timing depend privilege level first number timing cpl ף iopl second number timing cpl iopl third number timing virtual mode processor see instruction timing out outsb outsw outsd out output string port  usage out port src outsb outsw outsd  modifies flag none transfer byte word doubleword  src  hardware port specified dx instruction operand  src  located d si si incremented decremented size operand size dictated instruction format direction flag set si decremented clear si incremented port number range  specified immediate greater port number must specified dx since pc decodes bit port address value decoded third party vendor equipment also map port range  clock size operand x byte port src port src pm    protected mode timing depend privilege level first number timing cpl ף iopl second number timing cpl iopl third number timing virtual mode processor see instruction timing pop pop pop word stack usage pop dest modifies flag none transfer word current stack top s sp destination increment sp two point new stack top c valid destination clock size operand x byte reg reg segreg mem ea  mem  see instruction timing popa popad popapopad pop register onto stack  usage popa popad  modifies flag none pop top word stack general purpose  bit register register popped following order e di e si e bp e sp e dx e cx e ax e sp value popped stack actually discarded clock size operand x byte none see instruction timing popf popfd popfpopfd pop flag stack usage popf popfd  modifies flag flag pop worddoubleword stack flag register increment sp popf popfd clock size operand x byte none  w none pm see instruction timing push push push word onto stack usage push src push immed  modifies flag none decrement sp size operand two four byte value sign extended transfer one word source stack top s sp clock size operand x byte reg  reg mem ea  wea mem  segreg  immed  see instruction timing pusha pushad pushapushad push register onto stack  usage pusha pushad  modifies flag none push general purpose register onto stack following order e ax e cx e dx e bx e sp e bp e si e di value sp value actual push sp clock size operand x byte none see instruction timing pushf pushfd pushfpushfd push flag onto stack usage pushf pushfd  modifies flag none transfer flag register onto stack pushf save bit value pushfd save bit value clock size operand x byte none  none pm see instruction timing rcl rcl rotate carry left usage rcl dest count modifies flag cf rotates bit destination left  count  time data pushed left side reentering right carry flag hold last bit rotated clock size operand x byte reg mem ea  wea reg cl n n  mem cl ean n   wean reg immed n  mem immed n   see instruction timing rcr rcr rotate carry right usage rcr dest count modifies flag cf rotates bit destination right  count  time data pushed right side reentering left carry flag hold last bit rotated clock size operand x byte reg mem ea  wea reg cl n n  mem cl ean n   wean reg immed n  mem immed n   see instruction timing rep rep repeat string operation usage rep modifies flag none repeat execution string instruction cx string operation cx decremented zero flag tested combination repeat prefix segment override cpu may result error interrupt occurs cx following code show code susceptible avoid rep movs byte ptr e di e si vulnerable instr jcxz next continue rep successful loop interrupt goofed count next clock size operand x byte none see instruction timing repe repne repe repz reperepz repeat equal repeat zero usage repe repz modifies flag none repeat execution string instruction cx zero flag set cx decremented zero flag tested string operation combination repeat prefix segment override processor may result error interrupt occurs cx clock size operand x byte none see instruction timing repne repnz repnerepnz repeat equal repeat zero usage repne repnz modifies flag none repeat execution string instruction cx zero flag clear cx decremented zero flag tested string operation combination repeat prefix segment override processor may result error interrupt occurs cx clock size operand x byte none see instruction timing ret retf retn retretf return procedure usage ret nbytes retf nbytes retn nbytes modifies flag none transfer control procedure back instruction address saved stack  n byte  optional number byte release far return pop ip followed c near return pop ip register clock size operand x byte retn  retn immed  retf  retf pm priv retf pm lesser priv retf immed  retf immed pm priv retf immed pm lesser priv see instruction timing rol rol rotate left usage rol dest count modifies flag cf rotates bit destination left  count  time data pushed left side reentering right carry flag contain value last bit rotated clock size operand x byte reg mem ea  wea reg cl n n mem cl ean n  wean reg immed n mem immed n  see instruction timing ror ror rotate right usage ror dest count modifies flag cf rotates bit destination right  count  time data pushed right side reentering left carry flag contain value last bit rotated clock size operand x byte reg mem ea  wea reg cl n n mem cl ean n  wean reg immed n mem immed n  see instruction timing sahf sahf store ah register flag usage sahf modifies flag af cf pf sf zf transfer bit  ah flag register includes af cf pf sf zf clock size operand x byte none see instruction timing sal shl salshl shift arithmetic left shift logical left usage sal dest count shl dest count modifies flag cf pf sf zf af undefined shift destination left  count  bit zero shifted right carry flag contains last bit shifted clock size operand x byte reg mem ea  wea reg cl n n mem cl ean n  wean reg immed n mem immed n  see instruction timing sar sar shift arithmetic right usage sar dest count modifies flag cf pf sf zf af undefined shift destination right  count  bit current sign bit replicated leftmost bit carry flag contains last bit shifted clock size operand x byte reg mem ea  wea reg cl n n mem cl ean n  wean reg immed n mem immed n  see instruction timing sbb sbb subtract borrow usage sbb dest src modifies flag af cf pf sf zf subtracts source destination subtracts extra carry flag set result returned  dest  clock size operand x byte reg reg mem reg ea  wea reg mem ea  wea reg immed  mem immed ea  wea accum immed  see instruction timing scas scasb scasw scasd scas scan string byte word doubleword usage scas string scasb scasw scasd  modifies flag af cf pf sf zf compare value e di even operand specified accumulator set flag similar subtraction di incrementeddecremented based instruction format operand size state direction flag use rep prefix clock size operand x byte string w see instruction timing seta setnb setaesetnb set equal set unsigned  usage seta dest setnb dest modifies flag none set byte operand carry flag clear otherwise set operand clock size operand x byte reg mem see instruction timing setb setnae setbsetnae set set equal unsigned  usage setb dest setnae dest modifies flag none set byte operand carry flag set otherwise set operand clock size operand x byte reg mem see instruction timing setbe setna setbesetna set equal set unsigned  usage setbe dest setna dest modifies flag none set byte operand carry flag zero flag set otherwise set operand clock size operand x byte reg mem see instruction timing sete setz setesetz set equal set zero  usage sete dest setz dest modifies flag none set byte operand zero flag set otherwise set operand clock size operand x byte reg mem see instruction timing setne setnz setnesetnz set equal set zero  usage setne dest setnz dest modifies flag none set byte operand zero flag clear otherwise set operand clock size operand x byte reg mem see instruction timing setl setnge setlsetnge set le set greater equal signed  usage setl dest setnge dest modifies flag none set byte operand sign flag equal overflow flag otherwise set operand clock size operand x byte reg mem see instruction timing setge setnl setgesetnl set greater equal set le signed  usage setge dest setnl dest modifies flag none set byte operand sign flag equal overflow flag otherwise set operand clock size operand x byte reg mem see instruction timing setle setng setlesetng set le equal set greater equal signed  usage setle dest setng dest modifies flag none set byte operand zero flag set sign flag equal overflow flag otherwise set operand clock size operand x byte reg mem see instruction timing setg setnle setgsetnle set greater set le equal signed  usage setg dest setnle dest modifies flag none set byte operand zero flag clear sign flag equal overflow flag otherwise set operand clock size operand x byte reg mem see instruction timing set set set signed  usage set dest modifies flag none set byte operand sign flag set otherwise set operand clock size operand x byte reg mem see instruction timing setns setns set signed  usage setns dest modifies flag none set byte operand sign flag clear otherwise set operand clock size operand x byte reg mem see instruction timing setc setc set carry  usage setc dest modifies flag none set byte operand carry flag set otherwise set operand clock size operand x byte reg mem see instruction timing setnc setnc set carry  usage setnc dest modifies flag none set byte operand carry flag clear otherwise set operand clock size operand x byte reg mem see instruction timing seto seto set overflow  usage seto dest modifies flag none set byte operand overflow flag set otherwise set operand clock size operand x byte reg mem see instruction timing setno setno set overflow  usage setno dest modifies flag none set byte operand overflow flag clear otherwise set operand clock size operand x byte reg mem see instruction timing setp setpe setpsetpe set parity set parity even  usage setp dest setpe dest modifies flag none set byte operand parity flag set otherwise set operand clock size operand x byte reg mem see instruction timing setnp setpo setnpsetpo set parity set parity odd  usage setnp dest setpo dest modifies flag none set byte operand parity flag clear otherwise set operand clock size operand x byte reg mem see instruction timing sgdt sgdt store global descriptor table  privileged usage sgdt dest modifies flag none store global descriptor table gdt register specified operand clock size operand x byte mem see instruction timing sidt sidt store interrupt descriptor table  privileged usage sidt dest modifies flag none store interrupt descriptor table idt register specified operand clock size operand x byte mem see instruction timing shr shr shift logical right usage shr dest count modifies flag cf pf sf zf af undefined shift destination right  count  bit zero shifted left carry flag contains last bit shifted clock size operand x byte reg mem ea  wea reg cl n n mem cl ean n  wean reg immed n mem immed n  see instruction timing shld shrd shldshrd double precision shift  usage shld dest src count shrd dest src count modifies flag cf pf sf zf af undefined shld shift  dest  left  count  time bit position opened filled significant bit  src  shrd shift  dest  right  count  time bit position opened filled least significant bit second operand lower bit  count  used clock size operand x byte reg reg immed reg reg immed mem reg immed mem reg immed reg reg cl reg reg cl mem reg cl mem reg cl see instruction timing sldt sldt store local descriptor table  privileged usage sldt dest modifies flag none store local descriptor table ldt register specified operand clock size operand x byte reg mem see instruction timing smsw smsw store machine status word  privileged usage smsw dest modifies flag none store machine status word msw  dest  clock size operand x byte reg mem see instruction timing stc stc set carry usage stc modifies flag cf set carry flag clock size operand x byte none see instruction timing std std set direction flag usage std modifies flag df set direction flag causing string instruction autodecrement si di instead autoincrement clock size operand x byte none see instruction timing sti sti set interrupt flag enable interrupt usage sti modifies flag set interrupt flag enabling recognition cpu hardware interrupt clock size operand x byte none see instruction timing stos stosb stosw stosd stos store string byte word doubleword usage stos dest stosb stosw stosd modifies flag none store value accumulator location e e di even operand given e di incrementeddecremented based size operand instruction format state direction flag use rep prefix clock size operand x byte dest w see instruction timing str str store task register  privileged usage str dest modifies flag none store current task register specified operand clock size operand x byte reg mem see instruction timing sub sub subtract usage sub dest src modifies flag af cf pf sf zf source subtracted destination result stored destination clock size operand x byte reg reg mem reg ea  wea reg mem ea  wea reg immed  mem immed ea  wea accum immed  see instruction timing test test test bit pattern usage test dest src modifies flag cf pf sf zf af undefined performs logical two operand updating flag register without saving result clock size operand x byte reg reg reg mem ea  wea mem reg ea  wea reg immed  mem immed ea  accum immed  see instruction timing verr verr verify read  protected usage verr src modifies flag zf verifies specified segment selector valid readable current privilege level segment readable zero flag set otherwise cleared clock size operand x byte reg mem see instruction timing verw verw verify write  protected usage verw src modifies flag zf verifies specified segment selector valid ratable current privilege level segment writable zero flag set otherwise cleared clock size operand x byte reg mem see instruction timing wait fwait waitfwait event wait usage wait fwait modifies flag none cpu enters wait state coprocessor signal finished operation instruction used prevent cpu accessing memory may temporarily use coprocessor wait fwait identical clock size operand x byte none   see instruction timing wbinvd wbinvd writeback invalidate cache usage wbinvd modifies flag none flush internal cache signal external cache write back current data followed signal flush external cache clock size operand x byte none see instruction timing xchg xchg exchange usage xchg dest src modifies flag none exchange content source destination clock size operand x byte reg reg mem reg ea  wea reg mem ea  wea accum reg reg accum see instruction timing xlat xlatb xlatxlatb translate usage xlat translationtable xlatb masm x modifies flag none replaces byte al byte user table addressed bx original value al index translate table clock size operand x byte table see instruction timing xor xor exclusive usage xor dest src modifies flag cf pf sf zf af undefined performs bitwise exclusive operand return result destination clock size operand x byte reg reg mem reg ea  wea reg mem ea  wea reg immed  mem immed ea  wea accum immed  see instruction timing 