chapter instruction set effective address memory data accessing family accomplished via mechanism effective address wherever effective address specifier  eb   ew   ed  appears list instruction may use wide variety actual operand instruction include general register memory variable variety indexed memory quantity general register wherever  ew  appears use bit register ax bx cx dx si di sp bp wherever  eb  appears use bit register al bl cl dl ah bh ch dh example  add ew rw  form subsumes bit registertoregister add example add ax bx add si bp add sp ax memory variable wherever  ew  appears use word memory variable wherever  eb  appears use byte memory variable variable typically declared data segment using dw declaration word variable db declaration byte variable example declare variable dataptr dw escchar db later load store variable mov si dataptr load dataptr si use lodsw fetch word pointed dataptr mov dataptr si store value incremented lodsw mov bl escchar load byte variable escchar alternatively address specific unnamed memory location enclosing location value square bracket example mov al load content location al note discerned context loading al byte intended sometimes impossible must specify byte word inc b increment byte location mov w  set word location zero  indexed memory support use certain register base pointer index register memory bx bp base register si di index register may combine one base register one index register constant number run time pointer determines location effective address memory used instruction given explicitly enclosing index register bracket mov ax bx mov cx w si mov ax bxsi mov ax bx si another way write instr indexing accomplished declaring variable based structure see struc directive chapter struc bp note based structure unique bpsave dw bpsave word bp retaddr dw retaddr word bp parm dw parm word bp parm dw parm word bp end inc parm equivalent inc w bp finally indexing done mixing explicit component declared one table db  mov al table bx load byte number bx table segmentation effective address family four segment register c d e s used address memory segment register point k byte memory within megabyte memory space start k calculated multiplying segment register value ie shifting value left one hex digit program code data stack area fit k byte leave segment register set value case wo nt think segment register  matter one used address memory still get k program need k must point one segment register part memory space case must take care memory reference use segment register intended effective address memory access default segment register used explicitly specify segment register wish effective address default segment register d exception effective address use bp register indexing bpindexed memory reference default s bp intended used addressing local variable stored stack  wish memory access use different segment register provide segment override byte instruction containing effective address operand language code override giving name segment register wish instruction mnemonic example suppose want load al register memory byte pointed bx code mov al bx d register used determine k segment bx pointing want byte come cssegment instead code c mov al bx aware segment override byte effect upon single instruction follows sequence instruction requiring override must give override byte every instruction sequence case may wish consider changing value default segment register duration sequence note method providing segment override unique assembler assembler provided intel ibm msdos attempt figure segment allocation plug segment override byte  behind back  order assembler require inform variable structure pointed segment register assume directive assembler wrote intel first assembler asm watching situation since day one year concluded assume mechanism creates far far confusion solves scrapped result assembler far le red tape program need k manage segment register take care effective use effective address remember common instruction family allow effective address operand major function nt alax specific one multiply divide inputoutput mean nt funnel many al ax something perform common arithmetic pushpop move general register general register memory location indexed like register often overlooked register memory thing ca nt general memorytomemory among common operation inexperienced programmer overlook setting memory variable immediate value testing memory variable comparing constant preserving memory variable pushing popping incrementing decrementing memory variable adding memory variable  encoding effective address unless concerned nittygritty detail instruction encoding nt need read section every instruction effective address encoded byte known effective address byte following byte opcode instruction obscure reason intel call byte modrm byte effective address memory variable indexed memory location nonzero constant offset effective address byte immediately followed offset amount amount range   given single signed byte denoted   table amount requiring byte representation denoted   table bit memory quantity family word stored least significant byte first following table effective address byte value organized row column row give possible value effective address operand register memory indexing mode th indexing mode bp zero displacement preempted simplememoryvariable case code bp displacement get bp dvalue zero column table reflect information given effective address byte usually identity always register operand operand instruction instruction identified  r  following opcode byte instruction list sometimes information given supplement opcode byte identifying instruction instruction identified   followed digit digit tell column use find effective address byte example suppose perverse wish know precise byte encoded instruction sub b bx  instruction subtracts immediate quantity effective address quantity b bx consulting instruction list find general form sub eb ib opcode byte given  ib    denotes effective address byte whose value taken column following table offset decimal hex fit single   byte take value  bx  row table tell u effective address byte f immediately following f offset hex following ibvalue decimal hex byte generated sub b bx  f  table effective address byte value e c s d rb al cl dl bl ah ch dh bh rw ax cx dx bx sp bp si di digit effective ea byte address value bx si bx di bp si b b b b bp di c c c c si di e e e e simple var f f f f bx bx si bx di bp si b b b b bp di c c c c si di e e e e bp f f f f bx b b bx si b b bx di aa b ba bp si b b ab b bb bp di c c ac b bc si ad b bd di e e ae b bp f f af b bf bx c c e e f f ewax ebal c c e e f f ewcx ebcl c ca da e ea f fa ewdx ebdl c cb db e eb f fb ewbx ebbl c cc dc e ec f fc ewsp ebah c cd dd e ed f fd ewbp ebch c ce de e ee f fe ewsi ebdh c cf df e ef f ff ewdi ebbh denotes bit displacement following ea byte signextended added index denotes bit displacement following ea byte added index default segment register s effective address containing bp index d memory effective address  read instruction set chart following chart summarizes machine instruction program order use chart need learn meaning specifier given lower case letter follow instruction mnemonic specifier indicates type operand register byte immediate word etc follows mnemonic produce given opcodes  c  mean operand code label pointing part program jumped called also accept constant offset place constant segmentoffset pair case  cd   cb  label within byte either direction current location  cw  label within code segment program  cd  pair constant separated colon  segment value left colon offset right note cb cw case object code generated offset location following current instruction absolute location label operand assembler notably z processor code offset explicitly putting   every relative jump operand source code need  e  mean operand effective address concept effective address central machine architecture thus assembly language programming described detail start chapter summarize saying effective address either general purpose register memory variable indexed memory quantity example instruction  add rb eb  includes instruction add al bl add ch bytevar add dl b bx   mean operand immediate constant provided part instruction  ib  bytesized constant  iw  constant occupying full bit word operand also label defined colon case immediate constant location label used example  mov rw iw  includes instruction mov ax mov si vararray  vararray  appears somewhere program defined colon note vararray defined without colon eg  vararray dw    mov si vararray  would  mov rw ew   mov rw iw  mov would move content memory vararray case si instead location memory load location code  mov si offset vararray     mean memory variable indexed memory quantity ie effective address except register  r  mean operand general purpose register  rb  register al bl cl dl ah bh ch dh  rw  register ax bx cx dx si di bp sp warning instruction form marked   mnemonic part extended nec instruction set instruction marked   unique nec processor instruction work ibmpc work nec instruction work wish program run pc use instruction 