article published  game size forgotten discipline  pc technique vol augsept page appears original manuscript submitted jeff duntemann change published version due jeffs expert editing writing smaller game copyright diana gruber recent conference ran user shareware game complaining game would nt run ancient computer running fast program apparently written year earlier run xt performed badly anything faster wondering suggestion fix nt took opportunity recall good old day game programming developer knew get old primitive system thing stick mind early day game programming much attention paid size game day emphasis speed game fit ten floppy disk cdrom nt problem afford wasteful size concerned long adequate speed remember floppy disk expensive game fit single k disk disk space nt problem back could nt count system k byte memory even k reach widest audience game run k le programming type minimal configuration becoming lost art game programmer remember done still necessary skill remember optimize size nt see much written subject longer issue like used still reason sloppy wasted space wasted space even dont need optimize size still pay know still occasion optimizing size important example writing code embedded system eprom mind offering following list suggestion optimizing game size use c c c powerful language use without speed degradation likely notice increase size program optimizing size use c stripped bare minimum also compare compiler compiler generate smaller code others check compiler switch compiler give choice optimizing speed optimizing size choose optimizing size sure turn debugging information keep eye thing like stack size heap size adjust appropriate careful overlay big problem overlay number disk access generate planned carefully program access hard disk constantly causing program run slowly however used correctly overlay wonderful way keep game running ram low use medium memory model possible want data default near memory fit lot data k segment especially make heavy use globals reuseable array window write written medium model game small model also good usually practical fit code data k segment use smallest integral type nt use long integer short integer nt use short integer byte nt terribly important individual variable concerned pay careful attention array use globals day programmer taught avoid globals stylistic reason however actually quite efficient term speed size time place everything writing program bank programmer going work avoid using globals writing game want squeeze every drop performance use liberally use malloc free obvious object bitmap sound effect longer use space available object use variation allocate free memory beginning program control use programmer often write function called mymalloc myfree simply keep track pointer block memory however choose manage memory careful fragmenting reuseable array allocate array thousand byte use temporary bitmap menu art go along sound effect masking map whatever else come go frequently write lot small function time something twice write another function handle overhead using many function call offset liberal use global variable nt use inline function inline function way squeeze speed c program case class function default inline add size program every occurrence function call expanded whole function compile time use macro sparingly reason avoid using inline function macro substitution happens compile time adding size executable program nt avoid macro altogether though greatly simplify code add speed boost well careful use nt use unrolled loop unrolled loop speed optimization expense program size size concern roll back compromise solution use partial unrolling example execute iteration loop time include code twice within loop nt use compiled bitmap compiled bitmap rage day bitmap data turned assembly language instruction blazingly fast add massive size overhead size program use itoa instead sprintf time want formatted text output game usually score contain integer maybe inventory map coordinate also involve number sprintf function nice job converting number text also lot unneeded code add size program possible avoid use itoa similarly use atoi instead sscanf nt use floating point universal truth game programmer go great length avoid floating point math including writing  fixed point  function integer simmulations real number function general integer solution found game design problem usually without resorting fixed point example turn clock tick second need multiply  accomplished multiplying dividing rewrite startup code never done game programmer routinely function casm optimized stripping code nt need compress executable freeware program called lzexe allows store executable compressed format decompressed load time save disk space ram program expand fill amount ram required compression also commercial program job use repetitive music brief sound effect music sound effect eat huge chunk space plan carefully trim bare minimum store ram reuseable array turn little file big file file stored disk allocation unit typically do alocate unit two byte sector floppy disk four sector hard disk tiny file fill entire allocation unit even byte long rest allocation unit simply unused space average byte space wasted file floppy disk mean file floppy disk approximately k wasted space combine bitmap sound effect larger binary file achieve significant saving disk space use reuseable artwork title screen credit screen use artwork perhaps arranged differently store single file organize run time title screen us artwork game much better recycle file much possible strip palette information pcx file use color palette throughout game nt need store information pcx file color pcx file byte end hold palette information trim pcx file using palette save k use rle bitmap run length encoding rle simple technique compressing bitmap simply record color number pixel color continuous pattern starting one corner depending artwork save considerable space term disk space ram rle also efficient term speed displayed faster uncompressed bitmap fast compiled bitmap nt store text graphic page text example opening credit storyline store character string display using bitmapped font nt store pcx file would wasteful split sprite two sprite almost identical break example man hand man hand make man one sprite hand another sprite save quite bit sprite storage room cause slight speed degradation turn one blit two blits also timeconsuming annoying manipulate artwork way end development cycle need squeeze byte program good place see many tip exactly opposite would optimizing speed actual practice game programmer tend weigh option make decision based size speed day equation skewed heavily toward speed size trivial factor development decision still pay know trading away make tradeoff decision good programmer keep size speed consideration mind designing developing game 