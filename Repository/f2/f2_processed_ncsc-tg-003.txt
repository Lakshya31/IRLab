ncsctg version national computer security center guide understanding discretionary access control trusted system september approved public release distribution unlimited national computer security center fort george g meade maryland  ncsctg library foreword publication  guide understanding discretionary access control trusted system  issued national computer security center ncsc authority accordance department defense dod directive   computer security evaluation center  guideline defined document intended used computer hardware software designer building system intent meeting requirement department defense trusted computer system evaluation criterion dod std recommendation revision publication encouraged reviewed biannually ncsc formal review process address proposal revision appropriate channel national computer security center savage road fort george g meade md  attention chief technical guideline division patrick r gallagher jr september director national computer security center acknowledgement special recognition acknowledgement contribution document extended following carole jordan national computer security center ncsc primary author preparer document dr deborah down aerospace corporation prepared indepth technical report dac mechanism became major input document grant wagner steve lafountain ncsc contributed technical expertise assistance throughout effort dr dixie b baker aerospace corporation meticulously reviewed document suggested many change special thanks extended many computer vendor representative enthusiastically gave time technical expertise reviewing material providing valuable comment suggested change among vendor representative helpful steven b lipner digital equipment corp dr roger schell gemini computer earl boebert honeywell inc ct bougas harris corporation ii content page foreword                       acknowledgement                    ii introduction                      purpose                      scope                       control                      definition                     inherent deficiency discretionary access control        fundamental flaw discretionary access control       example trojan horse              overview dac mechanism                capability                    profile                     access control list acls               wild card                  default acls                 named acls                 protection bit                   password dac mechanism                summary                     set dac access type                 control permission                  control model                hierarchical              concept ownership           laissezfaire              centralized              file structure control permission        access mode                   file structure access mode         meeting criterion requirement              iii page  c dac requirement                 minimum functionality              functionality required            acceptable implementation           c b dac requirement             minimum functionality              functionality required            acceptable implementation            b dac requirement             minimum functionality              acceptable implementation           topic                     protected subsystem                 administering using dac               auditing dac                    verifying dac                   dac addons                   summary desired dac feature               reference                    iv introduction main goal national computer security center encourage widespread availability trusted computer system support goal metric created department defense trusted computer system evaluation criterion criterion il computer system could evaluated security purpose one feature criterion required secure system enforcement discretionary access control dac dac mean restricting access object based identity subject andor group belong control discretionary sense user process given discretionary access information capable passing information along another subject guide discus issue involved designing implementing evaluating dac mechanism primary purpose provide guidance manufacturer select build effective dac mechanism example dac mechanism document construed implementation satisfy criterion requirement example merely suggestion appropriate implementation criterion metric system evaluated addition showing example dac mechanism guide restate elaborate criterion requirement dac guide part ongoing program augment criterion issue feature address scope guideline interpretation established document apply discretionary access control requirement expressed criterion recommendation apply computer system product built modified intention meeting requirement criterion control objective term  control objective  refers statement intent respect control aspect organization resource process term computer system control objective provide framework developing strategy fulfilling set security requirement particular given system said secure respect enforcement specific policy control objective security policy follows  security policy statement intent regard control access dissemination modification information security policy must precisely defined implemented system used process sensitive information security policy must accurately reflect law regulation general policy derived  discretionary control common type access control mechanism implemented computer system today basis kind security individual user program operating user behalf allowed specify explicitly type access user program executing behalf may information user control discretionary security differs mandatory security implement access control decision user mandatory control driven result comparison user trust level clearance sensitivity designation information discretionary control replacement mandatory control environment information protected discretionary security provides finer granularity control within overall constraint mandatory policy discretionary mandatory control used implement access control policy handle multiple category type information proprietary financial personnel classified information information assigned different sensitivity designation designation enforced mandatory control discretionary control give user discretion specify type access user may information user control consistent overriding mandatory policy restriction classified environment person may access classified information unless person determined trustworthy ie granted personnel security clearance mandatory b access necessary performance official duty ie determined needtoknow discretionary discretionary security control objective security policy defined system used process classified sensitive information must include provision enforcement discretionary access control rule must include consistent set rule controlling limiting access based identified user determined needtoknow information definition discretionary access control dac criterion defines discretionary access control  mean restricting access object based identity subject andor group belong control discretionary sense subject certain access permission capable passing permission perhaps indirectly subject  dac control used restrict user access protected object system user may also restricted subset possible access type available protected object access type operation user may perform particular object eg read write execute typically object particular user set user authority distribute revoke access object user may grant rescind access object control based  need know   like  rule dac mechanism control access based entirely identity user object identity user object key discretionary access control concept relatively straightforward access control matrix defined contains name user row name object column regardless matrix represented memory whether row column name user object must used representation example rowbased representation entry might read equivalent  kim access kimsfile donsfile  columnbased representation one might find equivalent  donsfile accessed joe kim  definition access control matrixa twodimensional matrix representing user row object column entry matrix represents access type held user object access control matrix usually sparsely populated represented memory row column eliminating storage requirement empty entry sea figure section example access control matrix access modeentries access control matrix specify certain operation user may perform object eg read write execute delete access permissionpermission user access object manner entry access control matrix specify access permission access  null  access may also specified desired control permissiona certain access mode allows user grantrevoke access permission change access mode object sometimes includes ability pas control permission user defined groupsgroups defined dac mechanism used access control decision group normally defined user special privilege system administrator group defined listing identity member included group least privilegethis principle requires subject system granted restrictive set privilege needed performance authorized task application principle limit damage result accident error unauthorized use named usersusers uniquely identified tcb unique identifier used dac mechanism perform access control decision objecta passive entity contains receives information access object potentially implies access information contains example object record block page segment file directory directory tree program well processor video display printer network interface  port etc ownershipa concept one user total control access object subject operating behalf user normally creator object totally responsible controlling access subjectan active entity generally form process device operating behalf user cause information flow among object change system state technically processdomain pair trojan horsea computer program apparently actually useful function contains additional hidden function surreptitiously exploit legitimate authorization invoking process example program make  blind copy  sensitive file creator trojan horse trusted computing base tcb totality protection mechanism within computer system including hardware firmware software combination responsible enforcing security policy tcb consists one component together enforce unified security policy product system property  belllapadula security model rule called  starproperty  allows subject write access object security level subject dominated security level object also known confinement property inherent deficiency discretionary access control  fundamental flaw discretionary access control discretionary access control mechanism restrict access object based solely identity subject trying access basic principle discretionary access control contains fundamental flaw make vulnerable trojan horse system program run behalf user inherits dac access right user example working trojan horse illustrate dac mechanism vulnerable reference contains example similar following  example trojan horse consider system access control list mechanism described section  used implement discretionary access control two user particular system honest user doe dishonest user drake doe data file contains highly sensitive data file known doesfile diligently set acl allow read file user authorized access file doe confident one able access data file drake determined gain access doesfile legitimate access system allows implement useful utility program utility drake embeds covert function read doesfile copy content file drake address space called drakesfile drakesfile acl associated allows process executing doe behalf write allowing drake process read drake induces doe execute utility program telling useful efficient drake careful tell doe covert function trojan horse resident utility program doe executes corrupted program appears perform perfectly however operating doe behalf assumes identity thus access right doesfile time copy content doesfile drakesfile copying take place completely within constraint dac mechanism doe unaware happening example make clear danger trojan horse attack inadequacy dac mechanism protect attack noted elaborate dac mechanism may provide illusory security user unaware vulnerability trojan horse attack configuration management testing trusted distribution ensure software produced computer system manufacturer contain trojan horse especially system high epl rating however software source come assurance high threat environment wise assume unevaluated software contain trojan horse assumption dictate discretionary access control used sole protection mechanism high threat environment trojan horse threat reduced system implement many domain dynamic small domain process system today user supervisor domain user object available process running user behalf domain created dynamically process necessary object available domain implementing least privilege principle trojan horse would limited accessing object within domain reference monitor implement mandatory security policy includes property would provide robust protection trojan horse attack mandatory access control implementation would prevent trojan horse disclosing information user permitted access information mandatory access rule assume scenario described previously following change computer system implement mandatory security policy two hierarchical sensitivity level sake simplicity level called sensitive nonsensitive doe operates sensitive level doesfile sensitive drake authorized access sensitive data operates nonsensitive level drake allowed read nonsensitive file drakesfile nonsensitive drake trojan horse program executed doe program take sensitivity level identity doe within constraint mandatory discretionary security policy program read doesfile however trojan horse try write sensitive data drakesfile reference monitor disallows operation since trojan horse executing sensitive level program allowed write nonsensitive file would violation property example show reader discretionary access control effective restrict  honest  user browsing user file preventing accidental disclosure destruction information malicious user determined gain unauthorized access data computer system must restricted mean mandatory access control overview dac mechanism section present overview commonly used dac mechanism mechanism described briefly section explains mechanism rate criterion implementing complete dac system requires retaining information represented access control matrix model form access control matrix user represented row protected object column see figure entry matrix describe type access user object current operating system attempted represent information using five basic mechanism capability profile access control list acls protection bit password access control matrix object kimsfile donsfile payrol payrol doesfile user kim rw r rw r joe r rw r jones r doe rw mgr jim cp cp c c c jan rw rw figure access control matrix example figure  pictorial view set user access permission set protected object access type  r  denotes read access access type  w  denotes write access access type  c  mean control permission access type  cp  mean control passing ability access type explained section capability profile represent access control matrix information row connecting accessible object user acls protection bit represent access control matrix information column connecting list user object balance section demonstrate acls flexible usable dac mechanism implemented existing technology  capability capabilitybased system access protected object file granted would accessor posse capability object capability protected identifier identifies object specifies access right allowed accessor posse capability two fundamental property capability may passed one accessor subject another accessor posse capability may alter fabricate capability without mediation operating system tcb capabilitybased system provide dynamically changeable domain name space process run ability access object demonstrated process capability  ticket  object capability also contains allowable access mode eg read write execute implementation program contain capability capability stored file protected hardware software mechanism encryption capability usually passed along process sometimes increased decreased scope pure capability system includes ability user pas capability user ability controlled capability stored determining user access particular object generally possible make complete dac implementation including revocation difficult revocation may issue however since user access object make copy information another object revoking user access original object revoke access information contained user copy revocation however change made original object without knowledge revoked user discussion revokable capability see redell paper since capability implement dynamic domain ideally limit object accessible program would limit trojan horse access protected object handed time system implemented capability attempted implement complete dac mechanism research conducted restricting capability overlaying dac mechanism capability could useful enforcing least privilege principle providing dynamically changeable domain making discretionary access control le vulnerable trojan horse attack however order pas class c dac requirement ability user pas capability user must sufficiently controlled could design difficulty building capabilitybased mechanism satisfy b dac requirement difficulty implementing precisely defined group also class b required user able specify list user permission permission access object capabilitybased system rowbased mechanism easily lend function deletion object system revocation access present yet another problem problem rowbased system provide efficient mean determining user access given object  profile profile implemented form several system use list protected object associated user since object name consistent amenable grouping size number difficult reduce user access many protected object profile get large difficult manage also protected object name must unique full pathnames must used creating deleting changing access protected object requires many operation since multiple user profile must updated timely revocation access object difficult unless user profile automatically checked time object accessed deleting object may require method determining every user object profile general profile capability answering question access protected object difficult since usually important question secure system efficient mechanism exist profile recommended implementation dac  access control list acls acls allow particular user allowed disallowed access particular protected object implement access control matrix representing column list user attached protected object list excessively long group wild card see used use group raise possibility conflict group individual user example acl entry  payrol rw   jonespayrol r  appear conflict resolved design dac mechanism apollo system multiple hierarchical group mechanism acl entry form  useridgrouporganization node  multics acl specifies access right user userid group access right ignored allows particular user excluded restricted access right apollo user acl userid member group right used organization node membership examined multiple group mechanism add complexity may facilitate administrative control system affect utility dac mechanism access acls protected object protected creation group must controlled since becoming member group change object accessible member many system eg multics user must member least one group one detriment group mechanism changing member group result change unknown set acls protected object allocation group could system administrator function could distributed project administrator type function problem could result allowing user create group  owner  group user prohibited listing member group covert channel privacy would difficult determine group correct one use system project administrator control preferred mechanism  wild card wild card mechanism allows string replacement wild card specified example multics system  payrol rw  give read write access user payrol group  smith r  give smith read access matter group user smith belongs   give user access group wild card mechanism allow acl list kept reasonable size use wild card raise possibility conflict user multiple acl entry object example smith possible conflict member group read member payrol group read write system must make decision one acl entry apply granting smith access object various system different rule resolving conflict one approach might system enforce ordering acls another approach might allow ordering acls user case user must understand rule order create effective acl entry wild card mechanism add complexity affect utility dac mechanism exclusion capability allows group specified certain member excluded also useful required class b  default acls many side issue implementation access control list default acls usually necessary user friendliness dac mechanism least object created user user placed acl default possible default mechanism include systemwide default userassociated default file structure tree default associated directory systemwide default could used default case default specified systemwide default might give access creating user userassociated default might work well system flat file structure user first entered system default acl would specified file structure tree default associated directory could efficient user organizes directory structure represent project work area interest acls object subtree would similar one default acl directory would child file child directory either separate subdirectory default acl specified default acls stated explicitly user otherwise unless care taken access root section storage hierarchy could automatic default get access storage hierarchy overriding principle least privilege implies use default inadvertently give away access user intended word err conservative side preferred implementation user must permission change acls set default ability change default useful default implemented two way copied acl pointed acl copied change default affect acl otherwise change default may cause change many acls  named acls another possible user friendly feature  named  acls one implementation feature us named acl template user often set acls list user setting user may want create named acl template used copy list acl named acl changed effect acls already existence use named acls particular detriment limited usefulness implementation named acls place pointer real acl named acl named acl get changed real acls use also get changed convenient user named acl changed user way determining protected object affected change named acls also protected way real acls feature named acls replaced group default mechanism summary access control list desirable implementation discretionary access control acls conveniently lend specifying list named user allowed access object also providing access defined group user easily done aclbased mechanism acls properly implemented satisfy b dac requirement class b care must taken implementation conflict mandatory control  protection bit protection bit incomplete attempt represent access control matrix column implementation protection bit include system unix use protection bit associated object instead list user may access object unix registered trademark unix case protection bit indicate whether everyone object group owner access mode protected object user created object owner changed superuser privilege owner one besides superuser change protection bit problem protection bit incomplete implementation access control matrix model system conveniently allow disallow access protected object single user basis suggested group set needed combination user specified user combinatorics solution unrealistic also group controlled system administrator scheme would require fulltime attention  password dac mechanism password protection object attempt represent access control matrix row user possessed password object password ticket object similar capability system except course dynamic domain implementation password protection one password per object one password per object per access mode exists password protected object used ibm mv mechanism cdc no implement dac many problem associated using password protected dac system use password prevents tcb controlling distribution access permission sharing password take place outside system user remember password protected object virtually impossible password stored program vulnerable restrict access certain access mode requires password combination access mode system use password access protected object none implementation revoking user access requires revoking access user similar access distributing new password retain access becomes almost impossible password stored program secure password changed periodically difficult password protected dac system system mv default access file unrestricted access file protected password protection initiated file thus new file mv protected password protection mechanism invoked password used cdc no system supplement another dac mechanism one positive aspect object protected different password trojan horse restricted object handed use password complete dac strongly discouraged way determine access object managing system properly difficult  summary access control list implemented properly satisfy dac requirement class protection bit lack ability conveniently control access object granularity single user rowbased mechanism capability profile may encounter design problem revocation access group access object password used discretionary access control except supplement another dac mechanism reduce mechanism vulnerability trojan horse set dac access type section control permission access mode object discussed access control matrix see figure previous section control permission access mode entry matrix specify kind access subject object control permission define subject ability grant revoke access permission change access mode sometimes control permission include ability pas control permission subject contrast access mode indicate specific action applied object example execute mode allows object executed  control permission many current system concept control permission separated access mode multics  modify access  directory actually ability change acls child directory recommended control permission access mode kept conceptually separate dac system separation allows control object separated access object two basic control permission exist control control passing ability difference permission ability holder propagate control subject control subject control permission object able pas access permission set access mode object subject control permission allow subject posse give control subject control passing ability control permission identical control exception holder pas control permission subject system implementing permission object may one subject able control since control permission allow subject specify access object used implement control model dac system  control model criterion requires dac control ability assign access permission object user already possessing access permission ability assign permission controlled precision ability access object example class b possible permit prohibit user group authorization assign access permission four basic model dac control exist hierarchical concept ownership laissezfaire centralized  hierarchical permission specify control object organized control hierarchical similar way business operate simple example would system administrator root hierarchical tree system administrator would eve control permission object system control permission would include ability pas control permission subject system administrator would divide everyone else subset eg department subset represented directory storage hierarchy default access department would give department head control permission directory department head would divide subordinate subset eg project set default project give project head control permission project directory user bottom hierarchy would control permission object notice hierarchy control permission object would able give access mode object hierarchical treestructure file system required order implement hierarchical control model advantage hierarchical structure control placed trusted hand control mimic organizational environment imply however control distributed based one position hierarchy sometimes appropriate manager authorization subordinate object previously defined hierarchical structure provides ability multiple user ability control object hierarchical organization imagined implemented using control permission hierarchical organization could also programmed dac system without using control permission restrictive implementation would result specific fixed hierarchical structure inflexible hierarchical control recommended hierarchical control model would satisfy dac requirement class  concept ownership another control model associate object owner usually creator object user control permission object owner always  full  control object created ability pas control subject hence owner may change access permission time order grant deny access right object control near absolute control owner implemented administratively system administrator could set system default access would always contain control permission ability pas control permission user would never used system course system administrator ability alter access control system therefore owner control viewed limited hierarchical system two level could implemented flexible hierarchical control model another way implement owner control programming dac system implementing control permission enforce owner concept creator object known dac mechanism change access method passing control permission another user unix example operating system owner object ability change access protection bit disadvantage owner control difficulty creates regard nonowner user changing access mode object ie harder share object order gain lose access object user must ask owner object grant revoke access however operating environment disadvantage actually desired system characteristic owner control object eliminates confusion concerning control access object particular control model meet dac requirement class  laissezfaire scheme user control permission passing ability object may pas permission user concept ownership exists acl show user change acl object user passed control permission passing ability user may pas permission user without consent creator object access permission given away keeping control object difficult long passing control permission separate granting access permission laissezfaire control model meet dac requirement class however model require passing control permission order grant access permission user model would meet c dac requirement could control propagation access right  centralized control model give one user typically system administrator control permission object system user ability pas control user thus control permission held one user obtain access object user must request controlling user grant access permission place considerable burden controlling user additionally request access permission numerous delay would probably result inflexibility model although limited flexibility control model would satisfy dac requirement class  file structure control permission use control permission also related structure storage system operating system storage system tree structured two type object involved directory file directory sometimes called node file sometimes called segment control permission applied directory file control permission file change control particular file control permission directory may implemented ability control directory also subdirectory file let u call extended directory control extended directory control implement hierarchical control structure since control permission directory mean subject change access whole subtree directory pure owner control policy could implemented without using extended directory control subject creates file directory would receive ability control either hierarchical control scheme described would use extended directory control control permission passing ability giving system administrator department head project leader extended directory control appropriate directory storage structure would give control appropriate portion file system laissezfaire could use extended directory control along control permission passing ability directory file depending situation one scheme combination scheme could used implement control model dac mechanism evaluation class  access mode fairly wide range access mode available various dac mechanism implementation may combine access mode implementation provide many access mode access mode combined given careful consideration combining access mode limit flexibility dac mechanism name access mode may vary system system many type write access mode implemented different system controlling change done object section discus various read write execute delete access mode read allows object read changed way system read mode also allows object copied thus read give access object except write execute delete writeappend allows user expand object allow user change previous content view object writeappend also known writeexpand writechange allows user modify delete part content object allow user expand view object writeupdate allows user modify content object allow user add delete view object write allows user modify add delete content object manner allow user view object operating system little known semantics data stored file although object directory mailbox may operating system manipulated structure associated general write access write change writeupdate difficult operating system implement reliably writeappend force new data added beginning end object realm operating system architecture operating system could support writeappend would useful logging transaction type operation execute allows subject run object executable file system execute access requires read access execute without read would recommended correct implementation possible delete access mode allows object deleted null access mode grant access permission used allow exclusion particular user acl often null access mode exist implied acl specifying access mode particular entry control see section  control passing ability see section   file structure access mode file organized tree structure directory used represent nonleaf node tree three method available controlling access directory associated file  access control file directory  access control directory file  access control file directory access mode control placed directory user given access directory access file directory course one object directory another directory call subdirectory user need access mode permission subdirectory access object subdirectory placing access control directory requires user group file according access type requirement could constrictive could conflict reason grouping file access mode control placed file control finer granularity access individual file controlled independently file directory access control placed directory user could browse storage structure looking name user file also control tree structure subject could place file usually main purpose tree structure access mode control directory file subject need correct access mode permission directory file allowed access file access mode file basic software hardware implemented access mode listed section  since operating system knowledge semantics file rest object directory mailbox etc data structure maintained operating system access mode generally elaborate extension basic access mode usually implemented protected subsystem system like unix lack execute access implies access existing entire subtree directory ignoring implementation link unix earlier discussion access permission user give another user access file without also giving correct read access parent directory multics philosophy chosen enable user grant access file setting acls correctly file null access directory prevent user seeing name acls child directory user access mode child access child must already know name complicates decision access given attribute file eg length date content modified decision depend particular implementation writeappend allows user add new object directory ie create file sub directory directory null implied access mode specified order detailed access control implementor may add access mode minimal set final implementation access mode complicated user easily remember implication mode user distinguish function access mode grant subject either full access right access right object also implementation access type must consistent guaranteed always function correctly implementing access type designer must consider much complexity add trusted computing base relative gain functionality meeting criterion requirement section guide explains dac requirement criterion present implementation example satisfy requirement dac requirement may viewed three level first level c criterion class next level begin class c change class b highest level requirement begin class b remains class al level guide quote requirement criterion explains requirement mean describes minimum functionality necessary meet requirement level functionality required level present implementation example satisfies requirement reader keep mind implementation presented one meet respective requirement combination possible mechanism mentioned numerous list implementation must evaluated individual basis implementation selected simple user friendly possible meeting control objective since mechanism userinvoked overly complicated user may avoid using fullest extent  c dac requirement following dac requirement criterion class c  tcb shall define control access named user named object eg file program adp system enforcement mechanism eg selfgrouppublic control access control list shall allow user specify control sharing object named individual defined group  note class c requirement name example dac mechanism example mechanism satisfy requirement many mechanism adequate satisfy c dac requirement class c user need special privilege authorized control access object unprivileged user may control access object access user access object turn grant access object user class c dac mechanism need provide support allow accessno access separate mode read write need supported object may shared defined group group user may access object must defined tcb group defined naming user included group  minimum functionality dac mechanism control access individual named object named user mechanism capable function must least control access individual named object defined user group dac mechanism must recognize control access individual object  functionality required class c require user uniquely identified tcb user could member group thereby lose uniqueness therefore necessary c dac mechanism control access based individual user identity although required user group predefined authorized user user define group sort special privilege definition user group defining member group unique user identifier necessary example defining group consisting anyone whose name start   using wildcard   would permissible newly created named object need automatically protected default public access permissible c c dac requirement mandate control limit propagation access right word user possessing certain access right may may permitted pas right user discretion necessary define different access mode read write mechanism need provide support allow accessno access object  acceptable implementation section describes dac mechanism would satisfy c dac requirement example included purpose illustrating functionality necessary meet requirement mechanism called seeone utilizes profile contain list accessible object subject new object created system unprotected system administrator identifies dac mechanism point subject must object name profile access system administrator must place name object profile subject allowed access access mode appear profile object subject profile subject total access object read write execute delete subject pas access permission subject particular mechanism support user group seeone satisfy c dac requirement without drawback decentralizing control protected object system administrator user community may desirable system considerable amount object creation deletion excessive object creation deletion could overburden system administrator implementation described contains minimal functionality necessary meet c dac requirement  c b dac requirement following dac requirement criterion class c b  tcb shall define control access named user named object eg file program adp system enforcement mechanism eg selfgrouppublic control access control list shall allow user specify control sharing object named individual defined group individual shall provide control limit propagation access right discretionary access control mechanism shall either explicit user action default provide object protected unauthorized access access control shall capable including excluding access granularity single user access permission object user already possessing access permission shall assigned authorized user  level protection newly created object must default public access either system must specific rule limit access object creator previously specified subset user system must require creator object specify allowed access allowing create object limiting access creator object method preferred mechanism must ability include exclude access object per user basis group access control provided group must precisely defined listing unique name user group hence group made named user user must posse special authorization control access object special authorization called control permission see section  authorization required may range system administrator user controlling access object created latter preferred require system administrator intervention either method acceptable former method could result delay system administrator available  minimum functionality minimum requirement specified addition functionality required satisfy c dac requirement mechanism must provide capability including excluding access object per user per group group implemented basis mechanism must provide object protected protection default must provided newly created object creation time user must posse control permission assign access permission object authorization usually take form special access type sometimes called control owner group access control provided group must precisely defined using unique identifier member group  functionality required providing access object group user optional level necessary define different access mode read write mechanism need provide support allow accessno access object  acceptable implementation section describes dac mechanism called seetwo would meet cb dac requirement purpose description illustrate functionality necessary meet requirement particular mechanism us acllike dac mechanism object list user allowed access object along mode access user object including excluding user name list access controlled object granularity single user creator request creation object must specify desired access control otherwise mechanism enforce restrictive default access control creator grant user privilege accessing object wish creator privilege passing access user concept called ownership ownership transferrable user creator wish specify default protection list object creates default would contain list user added protection list new object created subject seetwo implementation satisfy cb dac requirement furthermore advantage seeone implementation management object decentralized system administrator owner object disadvantage seetwo implementation provide capability grant access group uniquely identified user using mechanism could cumbersome environment since user must explicitly listed environment however requiring user explicitly listed desirable  b al dac requirement following dac requirement criterion class b  tcb shall define control access named user named object eg file program adp system enforcement mechanism eg access control list shall allow user specify control sharing object shall provide control limit propagation access right discretionary access control mechanism shall either explicit user action default provide object protected unauthorized access access control shall capable specifying named object list named individual list group named individual respective mode access object furthermore named object shall possible specify list named individual list group named individual access object given access permission object user already possessing access permission shall assigned authorized user  level requirement mandate dac mechanism control access named object access must controlled per user basis addition access control based group named user required level authorized user control access object must able list specific named user allowed access object control also must capability list group named user allowed access object list must also contain respective access mode named user group named user object additionally object authorized user must able specify list named user list group named user allowed access object thus example object could exist system public readonly except joe user allowed access object  minimum functionality addition minimum requirement stated section c cb dac requirement following functionality must supplied order mechanism satisfy ba dac requirement named object mechanism must provide ability authorized user specify list named user along user respective mode access object mechanism must provide support allow different access mode read write merely providing accessno access object sufficient named object mechanism must provide ability authorized user specify list group named user along group respective mode access object named object mechanism must provide ability authorized user specify list named user group named user access allowed object  acceptable implementation following example dac mechanism called beethree would sufficient satisfy ba dac requirement example included purpose illustrating functionality necessary meet requirement object created acl permit access creator associated object object protected object acl describes user group access along respective access mode object protected object segment directory available access mode segment read execute write directory available access mode search modify append process must modify access containing directory object order modify acl object access group defined system project also used accounting purpose system administrator define project listing unique identity user included project user defined one project active one project time changing project requires user logout system login new project name user group user listed object acl without access mode individual group access object subject one acl entry object conflicting access mode system take restrictive access mode make possible give everyone project access object denying certain member project access done including project name acl access mode desired time including user excluded acl access mode beethree implementation satisfy ba dac requirement furthermore advantage seetwo implementation provides capability grant access individual user group uniquely identified user however implementation impossible allow group access object read allow one group member additional access read write object topic  protected subsystem order provide user access type finer basic read write execute etc system actually rather limited number support protected subsystem saltzer schroeder refer need  protected subsystem  define user provided program control access file extending access control mechanism allow object accessed way specified subject program well user system may allow specific userwritten program designated  subject  allowed access particular type access specific file protected subsystem defined collection procedure data object encapsulated internal structure data object accessible procedure protected subsystem procedure may called designated domain entry point designated subject encapsulated data file protected object program protected subsystem act manager protected object enforce userwritten access control subject outside protected subsystem allowed manipulate protected object invoking manager program access constraint specified algorithm implemented protected subsystem giving user ability construct protected subsystem program data file allows user provide flexible control sharing allowing program inside protected subsystem invoke program another protected subsystem without compromising security either multiple protected subsystem used perform task limit extent damage malicious malfunctioning borrowed program might inflict object protected subsystem likewise lending user could also encapsulate lent program protected subsystem protect program borrower danger trojan horse attack inadequacy dac mechanism protect attack discussed section protected subsystem incorporates one dac mechanism discussed earlier le vulnerable attack object within subsystem furthermore reader consider effect illusory security may inherent protected subsystem apollo domain implement limited protected subsystem domain allows user write subsystem provide mechanism protected subsystem interact one another user ability add subsystem name system wide list subsystem thereby creating subsystem user assigns certain file manager subsystem another file object user remove access object making manager exclusive accessor access subsystem controlled access control list associated subsystem manager  administering using dac trusted facility manual tfm must explain system administrator set dac mechanism properly administer dac system manual must explain identify system security administrator project administrator function correct access must set system administration database would include user registry group definition etc manual must explain access must set handle fixing system problem including viewing dump repairing file system etc access must set correctly standard library including system command subroutine initialization module operating system code acls may need set supervisor entry point io daemon device queue tfm must easy understand follow since proper setup proper administration dac mechanism critical effectiveness general documentation describe initialize acls best provide protected environment dac mechanism flexible provides ability set different control structure example given range control structure must indicate setting required product evaluation class manual explain trojan horse attack give example one could defeat dac mechanism undiscovered audit mechanism security feature user guide sfug must explain give example use dac mechanism manual easy user understand since mechanism userinvoked like manual system administrator user manual explain trojan horse attack give example one could defeat dac mechanism undiscovered audit mechanism  auditing dac auditing important part secure computer system much auditing operating system specific dac mechanism many instance dac mechanism place entry audit log operation change control structure dac auditable change acl including default acls auditable attempt access dacprotected object auditable change group definition auditable general audit log message include timestamp subject identity object identity type action pertinent information  verifying dac verifying correctness dac mechanism well understood seen paper dac well defined rule mandatory access control fact formal model myriad dac implementation currently exists although mention made dac mechanism bell lapadula formal model mandatory access control system scomp whose design formally verified security property proven dac mechanism violate mandatory access formal model research needed developing formal model dac verification system dac important least provide assurance structured argument demonstrates dac implementation sufficiency implement specification  dac addons operating system eg ibm mv product provide dac mechanism available addons eg acf top secret racf dac check made operating system get request object request forwarded operating system request illegal access addons basing assurance inability user either get access operating system another interface cause operating system retrieve illegal data legal request addon package applied system would receive rating criterion evaluated demonstrate addon product operates claimed add along underlying operating system evaluated total system security provided addon relies correct operation underlying system summary desired dac feature regardless criterion class dac mechanism intended satisfy preferred dac mechanism within current stateoftheart access control list deletion subject object potential problem dac mechanism including acls regardless whether subject object deleted mechanism handle deletion efficiently making sure dangling reference grant unintended access deletion asset acls design represents access control matrix column object acls automatically purged object deleted unlike rowbased mechanism acls require searching profile subject determine access deleted object however subject removed adp system acls pose problem system object must searched purge subject acls since object much volatile subject acls efficient profile class b access mode must implemented highly recommended lower level criterion access mode read execute write implemented minimum writeappend considered class c sort control permission must implemented control model described section  acceptable preferred model concept ownership model model assures user accountable object adp system ownership transferrable user transferrable ownership transfer must audited discretionary access control deter hostile attempt access sensitive information dac mechanism designed eliminate casual browsing storage system prevent accidental disclosure modification destruction data provide sharing data user mandatory security policy must also implemented provide adequate protection user allowed share data system effective audit trail mechanism also necessary order detect hostile attack dac mechanism reference department defense trusted computer system evaluation criterion dod dod std schell r r  security kernel methodical design system security  technical paper use inc spring conference  march pp  schroeder md cooperation mutually suspicious subsystem phd dissertation mit boebert ferguson ct  partial solution discretionary trojan horse problem  th security conference dodnbs september pp  down  discretionary access control guideline  aerospace report aerospace corporation september boebert kain ry young wd  secure computing secure ada target approach  scientific honeyweller vol july pp  saltzer jerome h  protection control information multics  communication acm vol july pp  fabry r  capabilitybased addressing  communication acm vol july pp  redell dd  naming protection extensible operating system  ada published mit cambridge november karger pa herbert aj  lattice security traceability access  symposium security privacy ieee april pp  gligor v huskamp j welke linn c mayfield w  traditional capabilitybased system analysis ability meet trusted computer security evaluation criterion  ida paper pl october computer associate casentinel reference guide saltzer jerome h schroeder michael  protection information computer system  proceeding ieee vol september pp  honeywell information system inc multics programmer manualreference guide ed ag uc berkeley unix programmer manual ed ibm access method service control data corporation no version reference set ed apollo computer inc domain system administrator guide ed bell de lapadula lj  secure computer system unified exposition multics interpretation  tech report mtr rev mitre corp march benzel vickers  overview scomp architecture security mechanism  tech report mtr mitre corp september 