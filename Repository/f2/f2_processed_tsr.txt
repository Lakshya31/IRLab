page class tsr abstract base class do resident program                               author john english je unixbrightonacuk department computing university brighton brighton bn gj england copyright c jenglish permission granted use copy distribute information contained file provided copyright notice retained intact software document incorporating file part thereof make source code tsr class file part freely available introduction         class provides framework writing memoryresident do program tsrs tsrs produced using class woken specific key  hotkey  specified number timer tick  timeslice  combination writing tsrs unaided nontrivial task class provides essential tsr functionality allows concentrate applicationspecific requirement tsrs written using class require pcat compatible machine running do version higher compile borland c version  higher create tsr using class must derive class application must supply function  main  application class called whenever tsr woken create tsr declare instance derived class program built using instance class make resident using member function  run  test copy already loaded using member function  loaded  unload previously loaded copy using member function  unload  foreground copy also communicate resident copy using function  request   respond  tsr must given unique name character long used identify made resident constructor  run  set internal status code error detected  run  return show cause error status tested program execution using member function  status  used display meaningful error message return program exit status member function  name  return name tsr also used error message find class useful suggestion enhanced please contact author one address given email postcard welcome deriving new tsr class  mytsr  class tsr                          constructor derived class  mytsr  must invoke constructor class tsr constructor class tsr take page two parameter unique string used identify tsr size byte stack used resident part tsr active stack size specified default stack size taken byte class mytsr must also provide definition member function called  main  contain applicationspecific code tsr executed whenever tsr woken must declared follows void main int hotkey class mytsr may also provide destructor mytsr called tsr made resident created derived class declare single instance class program example mytsr mytsr must declare one instance class derived tsr program program obtain status information calling following member function mytsrname return name tsr instance specified constructor call class tsr mytsrloaded return integer result nonzero copy tsr already loaded mytsrstatus return integer result nonzero error detected constructor  run  error code follows incompatible do version version higher required attempt declare one instance tsr unable create stack specified size allocate selfidentify multiplex function tsr already loaded failed make tsr resident unlikely occur user  startup  function reported failure mytsrunload attempt unload previouslyloaded copy tsr return integer result nonzero failed follows tsr loaded unloaded something else hooked interrupt unloaded page unable free memory unloaded disabled longer respond hotkey timer tick unlikely occur unable free tsr environment space although tsr successfully unloaded unlikely occur making tsr resident               make tsr resident memory call member function  run   run  requires two parameter value representing hotkey used activate tsr described optional timeslice size integer giving number timer tick tsr activation timer tick approximately millisecond parameter omitted zero tsr activated hotkey pressed hotkey combination value following list modifier tsr alt tsr ctrl tsr lshift tsr rshift keycodes tsr keya tsr keyz tsr key tsr key tsr enter tsr space tsr f tsr f hotkey value must use one value  keycodes  list wish hotkey used specify value tsr none hotkey parameter example valid hotkey specification shown mytsrrun tsr alt tsr f   mytsr  woken whenever altf pressed mytsrrun tsr lshift tsr rshift   mytsr  woken whenever left right  shift key pressed time specify hotkey tsr none timeslice specified either  main  never woken use load interrupt handler using  startup   shutdown  described need remain resident need interact user way  main  empty function case since never called tsr installed successfully  run  return  run  return indicates error occurred member function  status  see used determine cause error writing member function  main                      mytsr main  main function derived class called whenever tsr woken either result hotkey pressed specified timeslice expiring page parameter  hotkey  nonzero tsr woken hotkey pressed zero woken timeslice expired  main  perform operation call do function c character io allocate memory c terminate process e close file standard file otherwise normal c function following member function used within  main  void pause called whenever  main  function performing lengthy processing allows tsrs execute tsr active void sync timed activation normally occur every n timer tick  run  called function reset timer next timed activation happen n timer tick rather current timer count expires useful resynchronise timed activation hotkey used enabledisable tsr activity int userbreak return nonzero result  controlbreak  pressed since last called polled  main  controlbreak detection required class may also overload following function perform error recovery resident part program criticalcode criticalerror int n called critical error abort retry fail occurs execution  main  must call do service function c within function result must one value tsr ignore tsr retry tsr fail default action function return tsr fail void doserror int fn int ce int c int ip called illegal do function called within  main   criticalerror  see parameter  fn  function code register ah  ce  nonzero error occurred critical error handled  c   ip  segment offset return address offending interrupt function called indicates bug  main   criticalerror  function must use do service function although bios service still used default action reset screen text mode graphic mode display error message function called directly called automatically error occurs execution  main  initialisation finalisation                  since tsr made resident exit normal way destructor tsr called made page resident however may need perform initialisation tsr made resident eg hooking interrupt finalisation unloaded eg restore original interrupt vector two virtual function overloaded perform sort initialisation finalisation void startup called  run  tsr installed memory used provide applicationspecific initialisation eg hooking interrupt default nothing void shutdown called  unload  tsr unloaded memory used provide applicationspecific finalisation eg restoring hooked interrupt vector default nothing function called directly called automatically tsr loading unloading communicating resident tsr                   sometimes may necessary communicate resident copy tsr foreground program adjust parameter way function  request   respond  provide method perform communication program provide appropriate implementation virtual function  respond  following specification int respond int fn int far p int far p parameter  fn  function code range parameter  p   p  used applicationspecific parameter list could segment offset far pointer lengthier parameter list copy program loaded foreground communicate previouslyloaded resident copy calling function  request   request  requires three referencetointeger parameter used call  respond  resident copy first one contain function code passed  respond  remaining two passed  respond  parameter  p   p  result  respond  stored first parameter final value  p   p  produced  respond  stored last two  request  return zero call successful nonzero result tsr notloaded resident copy communicate plea feedback            use class please contact author via address beginning nt email access please send postcard like postcard let know looked feel free suggest enhancement find bug better still fix send patch happy hacking 