wgt graphic tutorial topic gouraud shaded polygon chris egerter october contact chrisegerter homebasecom introduction       series tutorial describes method drawing filled polygon using rendering technique solid gouraud shading texture mapping code tutorial written turbo c ported graphic library operating system use wgt function one wgtgfxc file contains routine needed demo decided explain method used routine since discover think learn code  shading along line              idea behind shading want different shade color along surface simplest application shading along horizontal line imagine line black left end white right end pixel middle shade grey line drawn left right color value start black increase constant amount towards white constant value determined number color endpoint length line specifically constant equal number color divided number pixel along line number color equal number pixel constant make perfect sense since deal fraction color computer graphic deal integer portion color value  pseudocode         basic shaded line routine look like calculate step value make color variable equal left endpoint color x x x put pixel screen add step value color end  assembly language benefit                 dealing color fit color value one byte use fixed point math store step value byte store whole number byte store fractional portion using byte fraction store whole fractional part one integer make easy assembly language since put value register say ax access portion individually ah al c language would need shift value right time order get whole value work perfectly since add step value ax ah always contain color want put screen nt worry fractional portion carrying since already added whole portion  calculating step value  fixed point                           mean using bit number decimal bit fraction think fraction hexadecimal since carry instead usual decimal system people relate base make step value whole portion upper byte first need shift color left bit put color value high byte leave fraction calculate step value divide length eg step numcolors length  code segment           write specific routine void shadedline int x int firstcolor int x int lastcolor int int length int numcolors int colorvalue int step int x length x x length numcolors lastcolor firstcolor colorvalue firstcolor step long numcolors long length x x x x x drawpixel x colorvalue colorvalue  step x left coordinate line firstcolor color point x right coordinate line lastcolor color point coordinate horizontal line need one drawpixel simple function set single pixel color defined void drawpixel int x int unsigned char col abuf x col code demonstrated gshadec  optimization number              calling drawpixel pixel efficient know pixel one useless multiply coordinate every time move one pixel following code show drawpixel code simplified put directly shadedline routine void shadedline int x int firstcolor int x int lastcolor int int length int numcolors int colorvalue int step int x unsigned char far dest  ptr screen  length x x length numcolors lastcolor firstcolor colorvalue firstcolor step long numcolors long length dest abuf x  make pointer first pixel  x x x x x dest colorvalue  draw pixel move next location memory  colorvalue  step code demonstrated gshadec  optimization number asm                 bottleneck routine colorvalue shifted right every pixel using assembly language register mentioned earlier take high byte colorvalue without shifting code show inline assembly used speed routine void shadedline int x int firstcolor int x int lastcolor int int length int numcolors int colorvalue int step int x unsigned char far dest  ptr screen  length x x length numcolors lastcolor firstcolor colorvalue firstcolor step long numcolors long length dest abuf x  make pointer first pixel   begin assembly optimization  length asm mov cx word ptr length  set length  le di dest  set destination ptr  mov ax word ptr colorvalue  set color  shadedlineloop asm mov e di ah  move color screen  add ax word ptr step  add color  inc di  move next pixel  dec cx  decrease length  jnz shadedlineloop  repeat pixel  code demonstrated gshadec  combining shaded line polygon routine                           next question may asking  know color use endpoint drawing polygon  order modify polygon scan conversion routine developed tutorial point structure defined typedef struct int x point since vertex color associated add another variable structure called col point structure becomes gpoint structure look like typedef struct int x unsigned char col gpoint converted polygon list x coordinate stored two array startx endx also need store color coordinate let make two new array int startcol int endcol list created x coordinate color value associated information need call shadedline routine polyline routine becomes gpolyline routine also calculates color end horizontal line use fixed point math similar way calculated color along length line time adding step value color every pixel move instead across void gpolyline int x int int col int x int int col  calculates coordinate line given two vertex x color col x color col use fixed point math speed thing x coordinate multiplied row constant added x simplified version line algorithm store x coordinate every coordinate color value increase step value based number color vertex distance coordinate  int tmp long x long col colstep  first color step value   nt horizontal line   make sure greater  tmp  swap coordinate  tmp tmp x  swap corresponding x coordinate  x x x tmp tmp col  swap corresponding color value  col col col tmp x long x  multiply  long x x long  fractional amount add x coordinate every row equal delta x delta word x coordinate change x x column row  col long col  initial color  fixed point format  colstep long col col long  calculate color step value similar method shadedline routine dividing delta value  x   always skip first point every line done   want store point two line meet twice would result single point drawn   go row   coordinate screen  startx    store first coordinate  startx x startcol col  store color  else endx x  store last coordinate  endcol col x   add constant x  col  colstep fillpoly routine becomes shadedpoly routine call gpolyline correct coordinate color vertex finally shadedline routine void shadedpoly gpoint vertexlist int numvertex  draw shaded polygon given array vertex  int gpoint curpt nextpt  two pointer vertex used connect vertex together calling gpolyline routine  curpt vertexlist  set first vertex array  nextpt vertexlist  second vertex  startx   set impossible value  endx  numvertex gpolyline curpt x curpt curpt col nextpt x nextpt nextpt col  calculate edge line  curpt   go next line  nextpt  nextpt vertexlist  close polygon line first last vertex  gpolyline curpt x curpt curpt col nextpt x nextpt nextpt col  draw horizontal line list  startx   indicates line row  endx   endx startx  case one point found row  shadedline startx startcol endx endcol  draw shaded line two x coordinate row   clipping              far assumed x coordinate shaded line would fall inclusively happens one x coordinate line wrap around side screen try first example program probably cause system crash since able write memory outside video display memory already clipped coordinate shadedpoly routine worry two possible case need clipping left edge le right edge greater second case easy solve since decrease length line word chop pixel past note clip line calculate step value since changing length change step value well code clipping right side would look something like x  set right coordinate right clipping coordinate  x math required first case tricky one simply set x since first color would wrong increase colorvalue skip pixel past left edge know pixel colorvalue increased step value multiply step value number pixel past left edge add result colorvalue advance color correct value code clipping right edge would look like x  clip left edge  dist x  find number pixel clipped  colorvalue  dist step  add dist color step onto starting value  x  set left coordinate left clippin coordinate clipping performed length line recalculated shadedline routine look like void shadedline int x int firstcolor int x int lastcolor int int length int numcolors int colorvalue int step int x unsigned char far dest  ptr screen  int dist length x x length numcolors lastcolor firstcolor colorvalue firstcolor step long numcolors long length x  set right coordinate right clipping coordinate  x x  clip left edge  dist x  find number pixel clipped  colorvalue  dist step  add dist color step onto starting value  x  set left coordinate left clippin coordinate dest abuf x  make pointer first pixel  length x x  begin assembly optimization  length asm mov cx word ptr length  set length  le di dest  set destination ptr  mov ax word ptr colorvalue  set color  shadedlineloop asm mov e di ah  move color screen  add ax word ptr step  add color  inc di  move next pixel  dec cx  decrease length  jnz shadedlineloop  repeat pixel   issue          example program included use default palette produce nicely shaded polygon define palette shade color example color may contain shade red color contain shade blue shade color use realistic shading look le banding occur banding occurs see distinct edge along color polygon caused color different gouraud shading also involves calculating normal polygon comparing direction lightsource order find realistic value color vertex since deal graphic scope tutorial nt always need take account however base color z value vertex leave completely strictly dealing graphic well may want set color vertex leave throughout rest program hope enjoyed tutorial next topic texture mapping small change code presented believe 