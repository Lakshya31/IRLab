 tilebased game faq version  greg taylor  file tilefaq home site xftpoulufi pubmsdosprogrammingdocs version  released  tilefaq  copyright greg taylor right reserved appendix copyright chris palmer right reserved document freely redistributable provided distributed entirety copyright notice included verbatim restriction work derived document             introduction              fair response initial release file many request additional information cover version faq emphasizes style graphic similar used u u origin many technique presented aimed system limited memory andor speed like pc k barrier document also includes alternative method suggestion code le restrictive system brief hopefully complete overview one method achieving tilebased style method like hear much faq pieced together various implementation tile graphic style                 ii multiple layered map                 essential section master possibility stem one layer map almost traditional effect easily implemented multilayer map compared single layered one one key consideration multilayer map speed drawing routine since may drawing tile several time speed routine performs vital producing fast game coded assembly possible higher level language optimized well possible seethru tile placement routine another important tool major part tilegames would separate placetile routine two independent routine one pixel seethru nt allows place tile nt need seethru option drawn faster                  ii seethru tile routine                  seethru routine written wondering write one brief overview basically copying tile copy nonzero pixel screen nt zero palette value zero become sort standard draw tile color area would like seen thru zero color thus allowing lay one tile another without destroying image beneath seethru routine slower due check zero value used necessary another seethru sort technique seen used programmer termed seeforth routine one checked destination pixel put pixel color nt already pixel ie pixel location value routine useful tile game possibility seen used thought mention                 ii ii multiple layer                 use threelayer map work fairly well thing tile game fourth layer provide even effect two layer map possible well find three optimum number split layer  referenced throughout remainder text layer name type tile used layer  base grass dirt brick stone door water  fringe tree rock table  object sword booty people monster key  sample map variable declaration three layer might  c code define size typedef struct unsigned char base size size unsigned char frng size size unsigned char obj size size maptype perhaps  address layer numerically c code typedef unsigned char maptype size size drawn screen order listed base layer drawn first without use seethru routine since base draw fringe base using seethru routine fringe layer useful tool producing powerful graphic easily fringe tile might tree zerovalues every around tree could place tree base tile allows one tree drawing treeongrass treeondirt even strange treeinthe water possible fringe tile transition like going grasstodirt dirttostone fringe layer allows draw one set transition example grass use grassto transition nice use fringe layer save drawing endless tile table nonpickupable object perfect fringe way placed base tile like possible us layer map enormous drawing layer draw object layer layer store thing move picked etc including monster key townspeople  make easy pick put object without destroying part map                             iii walkability restricting character movement                             usually assign attribute call walkability base tile provides fast easy way check whether move certain space also help control special occurrence relative level ease position map array byte unsigned char value serf tileindex walkability value use set tile split    normal walkable tile dirt grass etc  normal unwalkable tile wall etc   special tile group  special tile group drawing screen simply use rem mod statement equivalent get proper value moding number give value  actual tileindex number come checking tile walkable would divide number yielding value  walking ok walking ok special thing happens step group special thing happens step group first two value simply understood special value might need explaining  allows program special occurrence happen space walked hit special square instance would check special spot list x coords spot triggered special occurrence level map allows easy way throw cool stuff game little work split two group need search special particular map searching effect one note wa walkability value represents section tile unwalkable normally like wall etc make excellent secret wall forth walkability setting also stored separate element map structure increase speed expense memory separate element allows include many setting rating allowing level exit forth without resort listing special method list byte split various category general compromise ease speed memory come system memory much constraint walkability stored seperate element map structure usually better way go mention made walkability value later text                  vi disappearing roof tile                  effect done using multilayer method simply sectioning base tile say  example floor type would another tile memory well normal tile floor covered general floor type covered time drawing screen come upon tile floor tile check see player standing tile type  draw alternate roof tile corresponds floor tile player standing floor tile type draw base fringe object layer normally way roof player disappear enter building also see appendix                         v tilted effect using fringe layer                         like tilted look tile project give bit realistic flavor memory best way achieve effect set aside th layer map called tilt layer something also used roof file management like think since people nt memory four map layer memory discus memorydeficient method draw main portion tilted wall base layer tile use fringe layer hold extra bit tilt tile would special check see fringe layer tile question tiltresult normal fringe tile order drawing tiltresult would want draw object layer player drawing tiltresult tile follow normal order basefringeobj th tilt layer make like easier memory use allows skip check draw normal order since normal fringe tiltresults already split                          vi general comment object layer                         object layer project array layer map unsigned character byte value variable size find enough object cover need number would index particular object meaning object mapspace split byte various object category  example  would monster town people  inanimate object  whatever anyway like intelligence much like walkability assigned various group object usually broken group ease math get value  example break intelligence object info style attribute see walkability section  int index behavior exhibited object   townspeople  wander aimlessly   townspeoplemonsters afraid character  docile monster wander aimlessly attacked point int switched    docile monster picture mad   normal monster charge slow pace   baddie monster charge right  projectile firing monster   key dooropening thing  weapon object   armor like   cash booty   normal plain object like book candle  obj category   objs hold objs  bag chest backpack sample chart might choose lay object get efficient use int value like using intelligence keep track behavior object thus order proper thing object would simple check object int need obj helpful  understand hope many large project find nt enough object case best advised move array unsigned short variable short ints  bit allows value enough object game ever played                      vii multiple object one space                      question raised discussing method another programmer handle multiple object one space never really thought much restricted objs one per space simplest method came special int see section value objs hold object thing like bag backpack treasure chest etc example category index  object would picture assigned normal would independent array object hold could certain max set particular array structure way pick object object list get added inventory chest bag ground could also drop number objs filed independent array bag chest method good way incorporate way multiple object one map space without huge amount additional map layer relatively speedy still memory efficient please note maximum number bag multobjobjects limited number number array structure assign never include number handle one map often time method restrictive nt match play style game alternate method bit complicated requires knowledge use linkedlists nt familiar linkedlists pick nearly introbook programming language choice look linkedlists index  find assuming knowledge linkedlists continue change object layer array list pointer place object maplocation add node list location object removed remove node allow unlimited well memory limited number object particular maplocation           viii cool fx           section discus random cool effect come across relatively simple implement really improve look feel game one effect like rotating palette good flowing water stream smoking chimney run rotating palette change certain color certain order produce good fx without much added programming time  also another cool effect animate tile done array picture instead one assigned tile incrementing thru array playloop example might section fringe layer animated tile one fire would rotate thru say  frame fire burning smoking etc  providing nice effect player animating people monster also nice addition better effect confident palette manipulation routine another good effect achieved lightening darkening palette instance player cave torch providing light could set palette tile get light source torch darker drawn good way make palette say  color copy palette make color palette simple shift lighten darken whole tile another way achieve effect staying single palette color create several referencepalette sort palette create crossreferenced palette darkness level want take color palette darken desired ammount search palette best match keep color index crossreference value reference palette calculated beforehand stored disk real runtime slowdown introduced drawing shadedtile might one setting drawtile routine along seethru check appropriate darkness crossreference palette pixel value draw crossreferenced value screen method superior method allows much dramatic shade color drawback slower checking shade make square actual drawing shaded square slightly slower either method good way shadow passing cloud overhead etc alluded example also provide great way create torchlight effect tile fade black get light source could also fade light grey good fog effect implementing limiteddisplay described appendix document may want combine two algorythms one improve efficiency                         ix smooth loading new map section                          question come lot way dealing splitting map lot little section within mapfile load nine section map memory one time  map chunk memory                         player                          player move new section map shift six section map memory load three new section make smooth scrolling edge without extremely long load time ondisk map incredibly large fact limit ammount disk space variable addressing exceed gig x gig map inmemory map little window displayed map yet another subset window standard memory limit system like do k barrier set inmemory map fixed size access variable ammounts memory usually best adjust available memory thus calculating dimension inmemory map conform memory available way user lot memory benefit load time occuring le often method plea player memory load le often bit headache code variable size mapsegmenting tricky                     ix portability speed v size                     section discussion programming style suggestion concerning mention may useful many tilecoders coding project generally good idea keep code portable possible loosely put mean code using standard function routine try avoid using system compiler specific code run headon lately bought new compiler bit apposed bit compiler used go code completely revise work new system one main problem use type int integer code c mostly bit system bit others solve portability problem ive gone rarely ever using int stead use short short integer bit long long integer bit compiler use also many language allow split code seperate chunk formal circle known unit package split code two way one section standard library game function fxlib section code whatever game working way save trouble cutandpasting code problem come stick standard library function along line system specific segmentation code usally best stuff systemdependent code one library unit need recode one unit porting code another compilersystem example systemspecific code graphic controller mouse keyboard joystick timing course assembly another porting problem  extra effort spent learning portability prevent lot wasted time later revising code  size versus speed endless struggle though computer getting faster memory size speed still odds balance must struck many way going coding various part game varying size memory used speed fast go programmer must decide memory must sacrifice order gain added speed speed must sacrifice shrink ammount memory used method described file devised generally strike pretty good balance size speed though go either way tuning smaller size tuning faster exicution use descretion balance want strike think method faq pretty close optimal middleground                      x last minute idea  thought                      well guess version faq really laid standard questionanswer method reasonable category assist finding info want keep mind summary method tileygames thus probably better method method continuously growing shifting due question people ask effect see game got idea might interested hearing received request finished game using method  unfortunately like many programmer finished single tilerpg game always get new idea better way thing halfway thru start fresh  going nowhere thru horde halfprojects developed method work well ive also requested put together demo method likely currently busy write sample code post xftpoulufi well one shareware game currently market us small offshoot tilemethod nearly complicated method presented file current project include directing multicontinental literally game project implementing form genetic algorhythms alife simulation tilebased strategy wargame name yet game get finished demonstrate several method discussed document amoung layer map palette rotation cool fx single directional tilt neat tilestuffs hope faq give good enough summary basic tilegame concept get startedfinished programming project fun reached questionscommentsadditionsetc via email gtaylor oboeaixcalpolyedu latest version faq found xftpoulufi pubmsdosprogrammingdocstilefaq may code many day never bug gt                     appendix limiting display                     common problem tile based game  player see  example dungeon setting must careful limit shown player else point including secret door map display   assume secret         door likely look        like rest wall   come method choice anyone free dispute offer better solution algorith n moderate constant algorithm look square nt particularily large small overhead need one extra piece information map hasnt discussed tilefaq opaqueness square need able get value see square mean square never visible thing  behind  wont visible see square matter store information algorithm came defined object many attribute one opaqueness editor note gt would implement opaque value attribute tile thus keeping array opaque value say  opaq maxtiles indexed index tile checking opaque attribute wouls simple take tile value say   map position question use value index opaque array multiple layered map use opaqueness base tile ignore higher level however offer variety effect could balance perhaps also important note even checking three value base fringe object opaque attriibutes nonopaque whole tile nonopaque using standard coordinate system map located cartesian plane using x normal notation assuming player position ox oy want draw map player center square radius delta mean want draw delta delta tile pedantic reader define radius square length orthogonal vector origin square throughout remainder explanation include  pedantic people  comment square bracket nt care nt read information square bracket nonpedantic reader build successively larger square starting square one space origin given point x approximate whether viewable finding one two point lie previous square let r radius square containing x find x x lie square radius r x origin turn statement  one two  point easiest implement always two point point lie horizontal vertical diagonal line origin simply use point twice one last thing need sign function sine nt happen know u sign u    nonzero u let sign  u editor note gt strictly defined formula stated best way implement program divide slow operation reach sign value integerbased datatype simple bitshift n bit eg bit integer shift right get sign bit could also implement sign function following code c u sign else u sign else sign restate assume origin ox oy point x let j x ox oy vector ox oy j easily calculate two point point  sign x  sign j x  sign j j point  sign x j point j point diagonal direction x ox oy point horizontalvertical direction x ox oy pretty easy prove statement true convincingly assert provides good n determination square blocked view notice definition sign  mean point collapse point j decided always use two point well use constant algorith see comment algorithm calculation two point almost criminally easy decide tile seen let opaque array delta delta undefined value ie nt initialize remember delta number tile direction radius display drawing pseudocode cheat case delta nt worry kind special case middle delta middle display opaque middle middle delta nt hard delta delta x lie square radius delta calculate two point described call px py px px make sure px py px py map opaque px ox middle py oy middle opaque px ox middle py oy middle ca nt see square opaque x ox middle oy middle ii else opaque x ox middle oy middle iii might want draw tile endif endfor endfor look lot complicated really hardest part implementing loop  x   line little creative easily enough line ii constant used give algorithm little flexibility setting opaqueness unviewable square requiring  blocking  square opaque value algorithm allow looking  around  minor obstacle make routine much strict could use value line ii often give realistic display imho le playable result would like detailed explanation derivation two point something pretty close actual c implementation first attempt writing appendix far formal code send email politely ask forward web browser mosaic netscape lynx could find document http noethermathuwaterloocacrpalmer questionscommentscriticisms directed via email crpalmer undergradmathuwaterlooca  revision history                                      initial release basic info method tileygames                                     added clarification especially depth look memory structure added several new method list                                     touched bit added portingsizespeed appendix  thanks gabor torok scott host method influenced document well countless tilebased game examined 