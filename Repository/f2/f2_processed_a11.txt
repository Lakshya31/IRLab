chapter macro conditional assembly macro facility contains easytouse powerful macro facility facility subsumes capability assembler including operand concatenation repeat indefinite repeat often called irp indefinite repeat character irpc passing macro operand text value comparing macro operand string detecting blank macro operand unlike assembler integrates function main macro facility invoked without clumsy syntax strange character macro call operand simple macro syntax macro must defined used macro definition consists name macro followed word macro followed text macro followed em mark end macro many assembly language require list dummy operand name follow word macro operand denoted text fixed name  limit operand order anything following word macro considered part macro text example clear set register operand zero clear macro sub em clear ax generates sub ax ax instruction clear bx generates sub bx bx instruction movm move second operand first operand operand memory variable movm macro mov al mov al em var db var db movm var var generates mov al var followed mov var al  formatting macro definition call format macro definition flexible macro text consists single instruction definition given single line clear macro given particular advantage however prune unnecessary space blank line comment macro text entering text symbol table recommend spreadout format movm macro program readability special macro operator within macro definition begin hash sign hex byte letter following hash sign given either upper case lower case hashsign operator recognized even within quoted string wish hash sign treated literally start special macro operator must give consecutive hash sign example foo macro db  db  em foo abc produce db followed db abc format macro call line also flexible macro call consists name macro followed operand plugged macro prune leading trailing blank operand macro call operand macro call always separated comma also source line semicolon occurring outside quoted string start comment ignored want include comma blank semicolon operand must enclose operand single quote macro operand substitution macro assembler expect operand macro call follow syntax operand instruction assembler operand parsed reduced numeric value plugged macro definition text called  passing value  default pas value pass text parsing operand done macro processor determine start finish operand text text substituted without regard content  n  appears macro definition text interpreted complete line expanded assembled  first nonblank character macro name comma first operand null occurrence macro text deleted replaced nothing likewise two consecutive comma nonblanks result corresponding null operand also outofrange operand null example null operand two operand provided call null operand macro illegal produce error resulting macro expansion illegal method passing text allows operand text plugged anywhere macro even within symbol name example kfentry creates entry kfuncs table consisting pointer kf action routine also declares corresponding cf symbol index within table entry kfentry macro cf equ kfuncs  dw kf em kfuncs kfentry kfentry code equivalent kfuncs dw kfup dw kfdown cfup equ cfdown equ quoted string operand mentioned want include blank comma semicolon operand enclose operand single quote vast majority case special character need part operand user want quoted final assembled line also therefore quote passed operand override strip quote string precede quoted string hash sign example  dbw macro db dw em dbw e epointer dbw w wpointer note quote passed line would dbw  e  epointer dbw  w  wpointer fetchchar macro lodsb call processchar em fetchchar stosb generates stosb second instruction fetchchar inc di generates inc di second instruction looping operand macro macro facility contains two kind loop loop operand range operand loop character within operand first kind loop rloop discussed section second kind cloop discussed later rloop stretch macrodefinition code repeated macro expanded addition fixed operand specify variable operand whose number change time loop give variable operand one name w x z rloop begin r followed immediately letter w x z naming variable followed number first operand used followed number last operand used rxnn text repeated rloop end er example store macro mov ax ry  repeat running  mov ax er em store var var var var call produce instruction mov ax var mov var ax mov var ax mov var ax  l last operator indefinite repeat recognizes special operator l last operand macro call l appear anywhere macro text big power occurs conjunction rloops yield indefiniterepeat facility common example follows take macro designed one operand easily convert macro accepts number operand placing command rxl  repeat x running l  start macro command er end em finally replace instance macro x see work clear macro clear macro rxl sub x x er em clear ax bx generates sub ax ax sub bx bx one macro possible rloops iterate zero time case looptext skipped completely example clear without operand would produce expanded text character loop seen rloop discus kind loop macro character loop cloop cloop variable w x z represent entire operand represents character within operand start cloop c followed one letter w x z followed single operand specifier  digit letter l another one w x z defined outer loop one complicated specifier defined later chapter following cxn text cloop cloop end ec macro loop every character operand single character substituted instance indicated variable operand example pushc macro cw push wx ec em pushc abc generates instruction push ax push bx push cx coperand quoted macro call quote removed operand passing character loop necessary precede quoted string hash sign case hash sign passed first character  coperand null operand character loop text skipped completely  b    operator far seen specify operand macro fourteen different way  w x z l multiply possibility introducing    b  operator precede specifier    b  get adjacent operand specified operand example bl mean operand last operand word secondtothelast operand az mean operand z operand even repeat limit  b    example bbl thirdtolast operand note operand specifier appear context following within macro example bbl could appear upper limit rloop rzbbl loop z running first operand thirdtolast operand case variable operand cloop    b  specifier denote character current loopingcharacter example given next section multiple increment within loop seen end rloop er end cloop ec present another way end loop way let specify larger increment macro loop counter end loop one additional command e e e e rloops terminated er variable operand advance next operand loop made end rloop e variable operand advance operand one e advance operand e operand e command er common usage feature follows recall generalized clear macro lvariable would take indefinite number operand suppose want thing dbw macro would like dbw take number operand alternate db dws indefinitely operand made possible creating rloop terminated e dbw macro rxl db x dw ax e em dbw e epointer w wpointer two pair line  e terminator mean looping pair operand note crucial usage   operator specify second operand operand pair special note applies dbw macro happens accept dw directive operand generates object code issue error mean dbw accept odd number operand error expected thing alternate byte word ending byte could likewise generalize macro operand indefinite number triple quadruple ending rloop e e operand group would specified x ax aax e aaax cloops terminated e e character pointer advanced specified number character use much way rloops create loop pair triplet quadruplet character example pushc macro cz push z az e em pushc axbxsidi generates push ax push bx push si push di negative rloops introduce another form rloop called qloop  negative repeat loop loop rloop except operand number decrement instead increment loop exit number go finishnumber qloop specified qxnn instead rxnn eq instead er also use multipledecrement form e e e e terminate qloop example movn macro qxl  negative repeat x l  mov bx x eq em movn ax bx cx dx generates three instruction mov cx dx mov bx cx mov ax bx note functionality already built mov instruction macro show would implement already facility  nesting loop macro allows nesting loop within since provide identifier w x z loop operand nest level without restriction  use different letter nesting level nest even deeper example two nested rloops use w indexing letter restriction refer w outer loop within inner w loop challenge anyone come application limitation restriction cause genuine inconvenience implied closing loop loop loop ending macro end iteration count loop may omit er ec eq close open loop see em error example omit er loop version clear macro would make difference  automatically place er code macro definition passing operand value already stated defualt mode passing operand text  character operand copied macro expansion line asis without evaluation may override v operator see vn macro definition evaluate expression given text operand n pas string representing decimal constant answer instead original text operand must evaluate absolute constant value le example jlv macro j label v em jindex jlv nc jindex generates jnc label jindex jlv z jindex generates jz label passing operand size construct sn translated decimal string representing number character operand n one use would make conditionalassembly test whether operand passed see later chapter another use generate length byte preceding string required highlevel language turbo pascal example  lstring macro db  em lstring sample generates db sample generating number operand construct nn translated decimal string represented position number n macro operand note value depend content operand passed macro thus example n would translate simply usage n silly n achieves usefulness n variable w x z l give example n loopcontrol variable next section example nl used generate array string preceded byte telling many string array zstrings macro db nl generates number operand passed rxl db x em zstrings tom dick harry generates db followed string parenthesized operand number seen macro operand usually specified macro definition single character either single digit one special letter w x z l also allows specify constant operand number giving expression enclosed parenthesis rather single character expession must evaluate time macro defined constant use feature translate many program use masm rept directive example following rept construct occurs within masm macro temp rept temp temp masm need explicitlysetup counter db temp endm may translate loop follows rx counter x built loop db nx er rept occur within macro must define macro containing loop may immediately call  note expression enclosed praentheses must contain macro operator thus example specify ny represent operand  must use ay exiting middle macro masm compatibility offer ex operator equivalent masm exitm directive ex typically used conditional assembly block within loop terminate loop early ex code seen macro expansion expansion cease point assembly return source file outer macro nested call could nt use em would signal end macro definition call local label macro assembler local pseudoop used conjunction macro symbol declared local macro unique bizarre symbol name substituted time macro called solves problem duplicate label definition macro called problem solved elegantly class generic local label throughout assembly macro recall symbol consisting single letter followed one decimal digit redefined use label macro definition recommended local label outside macro designated l l within macro definition suggest use label used lnlabel within macro would make sure never call macro within range definition another lnlabel name using mnlabels avoid potential conflict following example local label within macro taken source macro processor  jhash label  check see al hash sign process hash sign term jump label otherwise drop following code jhash macro cmp al scanned character hash sign jne skip call mdefhash process hash sign jmp jump label provided em   l loop eat empty line leading blank call skipblanks skip leading blank line inc si advance source ptr beyond next nonblank jhash l hash sign process eat blank cmp ala blank terminated linefeed je l loop yes nothing line l loop line seen content cmp al reached start comment je l jump yes consume comment jhash l hash sign process get next char  l lodsb fetch next definition char source cmp al blank ja l loop process  debugging macro expansion tool called exmac help troubleshoot program line call macro sure code generated macro call exmac tell see chapter detail conditional assembly conditional assembly feature allows specify block source code assembled according value equated user symbol controlling symbol declared program thus result assemblytime expression declared assembler invocation keep mind difference conditional assembly invoked structuredprogramming feature invoked without hash sign test condition assembly time cause code assembled thus appear program cause code assembled test condition run time possibly jumping code skipped code always appear program conditional assembly line identified hash sign first nonblank character line hash sign followed one four keywords elseif else endif start conditional assembly block line following provide either single name arbitrary expression evaluating absolute constant context single name evaluates true defined equal absolute constant zero name false undefined equated zero expression true nonzero false zero  expression evaluates false following line code skipped next matching elseif else endif expression true following line code assembled normally subsequent matching elseif else encountered code skipped matching endif elseif provides multiplechoice facility ifblocks give number elseifs matching endif elseif name expression following line construct following false assembler look first true construct following elseif assembles block code true elseifs elseblock one assembled use instead operator conditional assembly expression operator performs correct translation name true false value handle case undefined without reporting error else mark beginning code assembled previous block skipped operand else one else ifblock must appear elseifs endif mark end ifblock operand endif legal nested ifblocks ifblocks contained within ifblocks elseif else endif always refer innermost nested ifblock example conditional assembly suppose program come three version one texas one oklahoma one rest nation three program differ limited number place instead keeping three different version source code keep one version use conditional assembly boolean variable texas oklahoma control assembler output sample block would texas db  elseif oklahoma db  else db  endif block code assembled texas false would use exclamation point operator texas db ff endif  conditional assembly macro may conditional assembly block either macro definition macro expansion limitation ifblock macro expansion entire block ie matching endif must appear macro expansion example define macro synonym conditional assembly block apply macro definition provide block normally within definition example x equ baz macro x db else db endif em baz x equ baz sequence code conditional assembly block acted upon macro baz defined macro therefore consists single line db conditional assembly line removed definition thus expansion baz produce objectcode byte even though local label x turned nonzero second invocation conditional assembly block appear macro expansion must literalize hash sign conditional assembly line giving two hash sign x equ baz macro x db else db endif em baz x equ baz entire conditional assembly block stored macro definition acted upon time macro expanded thus two invocation baz produce different object byte since x become nonzero second expansion  usually want conditional assembly block acted upon macro definition time save symbol table space thus use first form single hash sign simulating masm conditional assembly construct microsoft masm assembler abundance confusing conditional assembly directive subsumed expression evaluation policy ifdef covered directive ife ifndef duplicated followed exclamationpoint boolean negation operator ifb ifnb test whether macro operand passed blank  simulated testing size operand sn operator finally ifidn ifdif string comparison macro operand generally subsumed stringcomparison capability operator eq ne example translation construct given next chapter compatibility assembler conditional assembly xref program previous version contained warning xref correctly handle conditionalassembly block controlled variable whose value change assembly starting v corrected writing sym file log conditionalassembly test result xref consult log determine block consider declaring variable assembler invocation facilitate effective use conditional assembly allows declare boolean truefalse symbol command line invokes assembler declaration appear anywhere list source file name distinguished file name leading equal sign declare symbol true value give name equal sign put space equal sign name declare symbol false value give equal sign exclamation point name embed blank example source file src src src assemble texas true invoking follows texas src src src assemble texas explicitly set false follows texas src src src  note texas used conditionalassembly control need include texas invocation undefined texas automatically interpreted false user pointed impossible get equalssign environment variable accepts uparrow hex e character place equalssign invocation variable null invocation variable name ignore equalssign invocation line without error allows generate assembler invocation line using parameter could either boolean variable name null string example previouslymentioned texasoklahomanation example program could invoked via bat file called  amakebat  coded follows  invoke typing one following amake texas amake oklahoma amake third line produce assembler invocation  causing invocation variable declared thus texas oklahoma false exactly want restofthenation version program changing value invocation variable usual prohibition changing value symbol local label apply invocation variable example suppose conditional control variable debug generate diagnostic code debugging true suppose already debugged source file src src still working src may invoke follows src debug src debug src variable debug true assembly src want 