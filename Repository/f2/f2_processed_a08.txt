chapter number expression number base support variety format number noncomputer life write number decimal format ten digit use describe number digit position ten time significant position right number ten called  base  decimal format computer programmer often find convenient use base specify number used program commonlyused base two binary format sixteen hexadecimal format eight octal format hexadecimal format requires sixteen digit extra six digit beyond denoted first six letter alphabet ten b eleven c twelve thirteen e fourteen f fifteen number must always begin digit even base hexadecimal distinguish number symbol happens digit name hexadecimal number would begin letter precede letter zero example hex decimal would written necessary append leading zero many hex number never decimal number decided make hexadecimal default base number leading zero decimal still default base number beginning large number given operand dd dq dt directive readability may freely intersperse underscore character anywhere number default base overridden letter letter end number b xb binary q octal h hexadecimal xd decimal example q octal value  decimal notation octal   letter  decimal decimal show use  q  octal h large constant r real number specified hexadecimal superfluous indicates decimal base hex number decimal xd decimal since xd override default hex format b hex b decimal xb binary  decimal notation b also binary  since  b  decimal digit  last five example illustrate  x  sometimes necessary baseoverride letter  b    letter interpreted hex digit  x  force override interpretation  b    way usage lower case x upper case following override letter simply recommendation treat upperand lowercase letter equivalently radix directive abovementioned set default hex leading zero decimal otherwise overridden radix directive radix directive consists word radix followed number default base number always decimal regardless previous radix command number give default base subsequent number including next radix command number following radix return initial mixed default hex leading zero decimal leading digit compatibility ibm assembler radix appear leading period although curse pinhead designer put period ibm language alternative radix directive provide switch cause start decimal default put command invocation environment variable first radix command program override switch setting following example radix usage number comment decimal notation db  produce  radix seen yet switch specified radix db  produce  radix db  produce  radix db  produce  radix martian programmer heinlein novel db  produce  radix db  produce   floating point initialization allows floating point number operand dd dq dt directive number encoded according ieee standard followed coprocessors format floating point constant follows first decimal number containing decimal point must decimal point else number interpreted integer must also least one decimal digit either left right decimal point else decimal point interpreted addition structure element operator optionally may follow immediately decimal number letter e followed decimal number e stand  exponent  mean  time raised power  may provide e number example  constant onetenth   floating point three hundred e  ie three hundred e e  ie three e floating point hex integer e e scientific notation  time th e tiny number  divided th overview expression operand code instruction data initialization simple register name variable name constant however regularly wish code operand result arithmetic calculation performed either machine program running indexing assembler determine value assemble program full set operator use create expression cover case arithmetic operator byte isolation combination high low addition subtraction multiplication division mod shifting operator shr shl bit logical operator xor boolean negation operator relational operator eq le lt ge gt ne string comparison operator eq ne  attribute operatorsspecifiers size specifier bbyte wword ffar short long attribute specifier offset near bracket segment addressing specifier compatibility operator ptr st builtin value specifier type special data duplication operator dup  see chapter description type expression operand number label address number constant bit number used expression label defined colon also treated constant used expression except forward reference variable variable stand byte wordmemory location may add subtract constant variable constant added address variable typically variable name memory array index expression index expression consists combination base register bx bp andor index register si di optional constant added subtracted usually want precede bracketed expression b w f specify kind memory unit byte word far pointer referring expression stand memory unit whose address runtime value base andor index register added constant see effective address section beginning chapter detail indexed memory arithmetic operator highlow syntax high operand low operand operator called  byte isolation  operator operand must evaluate bit number high return high order byte number low low order byte example mov al high al tenhex equ low ff tenhex  operator applied following identity apply low low q low q low high q high q high low q high high q syntax operand operand operator  byte combination  operator return word whose high byte left operand whose low byte right operand example expression hexadecimal operator exclusive added cover following situation suppose initializing register immediate value suppose want initialize ah ascii value al decimal could code two instruction mov ah mov al realize single load ax register would save program space execution time without operator would code mov axa disguise type individual byte operand thinking code properly mov ax addition combination syntax operand operand operandoperand operand ptr operand operand operand shown syntax addition accomplished four way plus sign dot operator ptr operator simply juxtaposing two operand next dot ptr operator provided compatibility intelibm assembler dot used structure field notation ptr used expression byte ptr see chapter recommendation concerning ptr either operand constant answer expression typing operand offset added example bvar byte variable bvar byte variable byte beyond bvar example db  simple addition ctrl equ  mov al ctrl nice notation controld mov dx bp smem  smem unindexed structure dq   floating point addition  subtraction syntax operand operand subtraction operator may operand absolute number b variable name type result absolute number difference two operand subtraction also allowed floating point number answer floating point difference multiplication division syntax operand operand multiplication operand operand division operand mod operand modulo may use operator absolute floating point number result always type either operand may numeric expression long expression evaluates absolute floating point number example cmp al compare al mov bx bx dt   shifting operator syntax operand shr count shift right operand shl count shift left bit count bit number shift operator perform  bitwise  shift operand operand shifted  count  bit either right left bit shifted operand set expression  bit count  equivalent  shl count  ie bit return mask single bit whose number  count  operand must numeric expression evaluate absolute number example mov bx facbh shr bx fach al bit al al mask bit  logical operator syntax operand operand operand xor operand operand operand operand logical operator may used absolute number always return absolute number logical operator operate individual bit bit answer depends corresponding bit operand function performed follows answer bit either operand bit answer bit operand bit example xb xb xb xor  exclusive  answer bit operand bit different answer bit operand bit example xb xor xb xb answer bit operand bit answer bit either operand bit example xb xb xb answer bit opposite operand bit operand bit operand bit example xb xb boolean negation operator syntax operand exclamationpoint operator rather reversing individual bit operand considers entire operand boolean variable negated operand nonzero bit answer operand zero answer ffff  intended used conditional assembly expression described chapter also special action applied undefined name answer defined value ffff meaning true symbol undefined similarly applied defined quantity absolute constant answer meaning false operand undefined relational operator syntax operand eq operand equal operand ne operand equal operand lt operand le operand le operand le equal operand gt operand greater operand ge operand greater equal relational operator may operand absolute number b variable name type result relational operation always absolute number return bit result true false example mov al eq al false mov ax le ax ffffh true string comparison operator syntax string eq string equal string ne string equal string string equal ignoring case order subsume string comparison facility offered assembler special conditionalassembly directive ifidn ifdif allows relational operator eq ne accept string argument syntax accepted string must bounded using delimiter either single quote string double quote string match eq return true ne return false string must length every character must match exactly  additional aexclusive feature operator return true character string differ bit masked value thus may use compare macro parameter string containing nothing letter comparison true whether macro parameter uppercase lowercase checking made detect nonletters use string containing nonletters may get false true result also accepted applied nonstrings well  corresponding value interpreted twobyte string bit masked away comparison attribute operatorsspecifiers b w q memory variable specifier syntax b operand q operand operand b operand q w operand operand operand w operand operand operand b w f q convert operand byte word doubleword far quadword tenbyte variable respectively operand constant variable type example arrayptr db dup wvar dw mov al arrayptr b load first byte arrayptr array al mov al wvar b load low byte wvar al mov ax w load ax memory word loc lds bx load d bx doubleword loc jmp f jump far byte location fld bx load tenbyte number bx stack compatibility intelibm assembler accepts verbose synonym byte word dword far qword tbyte b w f q respectively short long operator syntax short label long label  short operator used specify label referenced jmp instruction within byte end instruction long operator specifies opposite label within byte appropriate operator sometimes must used label forward referenced instruction nonlocal label forward referenced assembler assumes require two byte represent relative offset label instruction including opcode byte three byte correctly using short operator save byte code use forward reference label within specified range error occur following example illustrates use short operator jmp fwdlab three byte instruction jmp short fwdlab two byte instruction jmp l two byte instruction assumed local label assembler assumes forward reference local label short may sometimes forced override assumption label fact within byte jmp long provided jmp long l three byte instruction bothered possibility specify l switch cause pessimistically generate three byte jmp forward reference unless specifically told short note long effect operand unconditional jmp instruction conditional jump conditional jump nt byte form conditional jump short one run problem chance code getting control  time rearrange break intervening code separate procedure insist upon leaving code intact replace conditional jump  cond jmp  offset operator syntax offset varname offset used convert variable constant pointer variable example declared xx dw want load si pointer variable xx code mov si offset xx simpler instruction mov si xx move variable content xx si constant pointer xx  near operator syntax near operand near convert operand type code label defined appearing beginning program line colon near provided mainly compatibility intelibm assembler square bracket operator syntax operand square bracket around operand give operand memory variable type square bracket generally used enclose name base index register bx bp si di size memory variable deduced context expression square bracket also used turn numeric constant memory variable example mov b bx  move imm value mem byte bx mov al move byte memory location al mov al move immediate value al colon operator syntax constant operand segreg operand segorgroupname operand colon operator used attach segment register value operand segment register value appears left colon rest operand appears right colon three form colon operator first form constant segment register value form used create operand long intersegment jmp call instruction example instruction jmp ffff jump coldboot reset location processor context jmp call first form legal operand dd directive equ directive equ case restriction offset part right colon must value le simply nt room symbol table entry segment register value byte offset dont think hurt restriction since reference segment usually jump table beginning segment  second form segment register name left colon segment override form provided compatibility intelibm assembler generate segment override byte see form unless operand right colon already default segment register given override prefer explicit method override exclusive simply place segment register name instruction mnemonic example prefer e mov al bx mov al e bx third form segment group name colon form ignored provided compatibility turbo c like include spurious dgroup override satisfy masm assumechecking st operator st ignored whenever occurs expression provided compatibility intel ibm assembler example code fld st st taken fld  type operator syntax type operand type operator return operand byte variable operand word variable operand doubleword variable operand quadword variable operand tenbyte variable number byte allocated structure operand structure name see struc next chapter common usage type operator represent number byte named structure example declared structure named line described next chapter defines byte storage two way might refer value symbolically follows mov cx type line load size line cx db type line dup allocates area memory line specifier return value current location counter provided compatibility intelibm assembler dollar sign standard familiar specifier purpose equivalent near typically used byte word specifier create alternatetyped symbol memory location  bvar equ byte wvar dw nt recommend use wish retain intel compatibility use le verbose label directive bvar label byte wvar dw concerned compatibility lesser assembler offer variety le verbose form concise db without operand bvar db wvar dw cryptic always bvar equ b operator precedence consider expression see expression could perform multiplication first giving answer  could addition first giving answer  fact multiplication first assigns higher precedence multiplication addition following list specifies order precedence assigns expression operator expression evaluated left right following precedence rule may override order evaluation precedence use parenthesis example could override precedence parenthesizing addition  symbol referred operator treated assembler operand builtin value include b w f st similar vein segment override term segment register name followed colon recorded scanned acted upon entire containing expression scanned evaluated two operator adjacent rightmost operator must precedence otherwise parenthesis must used example expression bit illegal leftmost operator bit higher precedence two adjacent operator bit   code bit  highest precedence   parenthesized expression period offset seg type ptr high low bit multiplication division mod shr shl addition subtraction unary b binary relational eq ne lt le gt ge logical logical logical xor colon long pointer short long dup  lowest precedence  