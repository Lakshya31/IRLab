internet worm program analysis purdue technical report csdtr eugene h spafford department computer science purdue university west lafayette  spaf cspurdueedu abstract evening november someone infected internet worm program program exploited flaw utility program system based bsdderived version unix flaw allowed program break machine copy thus infecting system infection eventually spread thousand machine disrupted normal activity internet connectivity many day report give detailed description component worm programdata function based study two completely independent reversecompilations worm version disassembled vax assembly language almost source code given paper current concern state  immune system  internet host description detailed enough allow reader understand behavior program paper contains review security flaw exploited worm program give recommendation eliminate mitigate future use report also includes analysis coding style method used author worm draw conclusion ability intent copyright eugene h spafford right reserved permission hereby granted make copy work without charge solely purpose instruction research copy must include copy title page copyright notice reproduction publication use strictly prohibited without express written permission november internet worm program analysis purdue technical report csdtr eugene h spafford department computer science purdue university west lafayette  spaf cspurdueedu introduction evening november internet came attack within sometime round pm est program executed one host connected internet program collected host network user information broke machine using flaw present system software breaking program would replicate replica would also attempt infect system although program would infect sun microsystems sun system vax computer running variant bsd unix program spread quickly confusion consternation system administrator user discovered system infected although unix long known security weakness cf ritc gram reid scope breakins came great surprise almost everyone program mysterious user site appeared unusual file left usrtmp directory machine strange message appeared log file utility sendmail mail handling agent noticeable effect however system became loaded running process became repeatedly infected time went machine became loaded unable continue processing machine failed completely swap space process table exhausted late thursday night personnel university california berkeley massachusetts institute technology  captured  copy program began analyze people site also began study program developing method eradicating common fear program somehow tampering system resource way could readily detected cure sought system file altered information destroyed est thursday morning le hour infection started network computer system research group berkeley developed interim set step halt spread included preliminary patch sendmail mail agent suggestion rename one c compiler loader prevent use suggestion published mailing list usenet although spread hampered system disconnecting internet attempt  quarantine  pm est thursday another simple effective method stopping infection without renaming system utility discovered purdue also widely published software patch posted berkeley group time mend flaw enabled program invade system remained analyze code caused problem november national computer security center held hastilyconvened workshop baltimore topic discussion program meant internet community meeting invited topic discussed yet made public however one thing know decided present meeting would distribute copy reverseengineered code general public felt program exploited many littleknown technique making generally available would provide attacker framework build another program although stance wellintended serve delaying tactic november aware least five version decompiled code widespread distribution binary sure least ten time many version already completed progress required skill tool readily available within community believe group capability reconstruct source code system administrator programmer manager interested program managed establish system spread quickly individual valid interest seeing code especially software vendor interest duplicate program sure hole used program properly plugged furthermore examining code may help administrator vendor develop defense future attack despite claim contrary individual copy reverseengineered code report intended serve interim role process detailed description program work provide source code could used create new worm program aid individual seeking better understanding code worked yet form used create new worm without considerable effort section appendix c contain specific observation flaw system exploited program fix companion report issued week contain history worm spread internet analysis result study performed three separate reverseengineered version worm code two version c code one vax assembler three agree minor detail one c version code compiles binary identical original code except minor difference significance state certainty one version worm program benign intent worm write file system except transferring target system also transmit information infected system site copy worm program since berkeley computer system research group already published official fix flaw exploited program worry specific attack used many vendor also issued appropriate patch remains convince remaining vendor issue fix user install terminology seems considerable variation name applied program described paper use term worm instead virus based behavior member press used term virus possibly experience date form security problem usage reinforced quote computer manager programmer also unfamiliar terminology purpose clarifying terminology let define difference two term give citation origin worm program run propagate fully working version machine derived word tapeworm parasitic organism life inside host sap resource maintain virus piece code add program including operating system run independently requires  host  program run activate clear analog biological virus virus considered alive usual sense instead invade host cell corrupt causing produce new virus program loosed internet clearly worm  worm concept worm program spread machine machine apparently first described john brunner classic science fiction novel shockwave rider brun called program tapeworm lived  inside  computer spread machine  researcher xerox parc built experimented worm program reported experience article communication acm shoc worm built parc designed travel machine machine useful work distributed environment used time break system although  get away  test people seem prefer call internet worm virus destructive believe worm nondestructive everyone agrees internet worm destructive however since intent effect sometimes difficult judge using naming criterion clearly insufficient worm continues clear choice describe kind program  virus first use word virus knowledge describe something infects computer david gerrold science fiction short story god machine story later combined expanded form book harlie one gerr subplot book described program named virus created unethical scientist computer infected virus would randomly dial phone found another computer would break system infect copy virus program would infiltrate system software slow system much became unusable except infect machine inventor plan sell program named vaccine could cure virus prevent infection disaster occurred noise phone line caused virus mutate vaccine ceased effective term computer virus first used formal way fred cohen usc cohe defined term mean security problem attache code turn something produce virus quote paper  define computer virus program infect program modifying include possibly evolved copy  claimed first computer virus  born  november written security seminar course interested reader may also wish consult denn dewd discussion term flaw misfeatures  specific problem action internet worm exposed specific security flaw standard service provided bsdderived version unix specific patch flaw widely circulated day since worm program attacked internet flaw patch discussed  fingerd get finger program utility allows user obtain information user usually used identify full name login name user whether user currently logged possibly information person telephone number reached fingerd program intended run daemon background process service remote request using finger protocol harr bug exploited break fingerd involved overrunning buffer daemon used input standard c library routine read input without checking bound buffer involved particular get call take input buffer without bound checking call exploited worm get routine routine flaw family routine scanffscanfsscanf may also overrun buffer decoding input unless user explicitly specifies limit number character converted incautious use sprintf routine overrun buffer use strcatstrcpy call instead strncatstrncpy routine may also overflow buffer although experienced c programmer aware problem routine continue use worse format sense codified historical inclusion unix c language formally forthcoming ansi language standard c hazard call network server privileged program using may possibly compromised careful precalculation inappropriate input important step removing hazard would first develop set replacement call accept value bound programsupplied buffer argument next system server privileged application examined unchecked us original call call replaced new bounded version note audit already performed group berkeley fingerd timed server used get call patch fingerd already posted appendix c contains new version fingerd written specifically report may used replace original version version make call get  sendmail sendmail program mailer designed route mail heterogeneous internetwork allm program operates number mode one interest operating daemon process mode program  listening  tcp port  attempt deliver mail using standard internet protocol principally smtp simple mail transfer protocol post request detected daemon enters dialog remote mailer determine sender recipient delivery instruction message content bug exploited sendmail functionality provided debugging option code worm would issue debug command sendmail specify set command instead user address recipient message normally allowed present debugging code allow tester verify mail arriving particular site without need activate address resolution routine debug option sendmail often used complexity configuring mailer local condition many vendor site administrator leave debug option compiled sendmail program immense importance berkeleyderived unix system handle complex task mail routing delivery yet despite importance widespread use system administrator know little work story often related system administrator attempt write new device driver otherwise modify kernel o yet willingly attempt modify sendmail configuration file little wonder bug present sendmail allow unexpected behavior flaw found reported attention focused program known sure bug discovered patch circulated one obvious approach would dispose sendmail come simpler program handle mail actually purpose verification developing suite cooperating program would better approach aligned unix philosophy effect sendmail fundamentally flawed anything related function complex difficult understand berkeley computer system research group new version sendmail many bug fix fix security flaw version sendmail available ftp host  ucbarpaberkeleyedu  present file ftppubsendmailtarz end november note version shipped debug option disabled default however help system administrator wish enable debug option although researcher berkeley believe fixed security flaw inherent facility one approach could taken program would prompt user password super user root debug command given static password never compiled program would mean password might present multiple site seldom changed site without access ftp otherwise unable obtain new version official patch sendmail enclosed appendix  problem although worm exploited flaw two server program behavior served illustrate fundamental problem yet widely addressed interest promoting better security problem discussed interested reader directed work gram broader discussion related issue  server general security flaw exploited worm becoming obvious many system service configuration command file owned userid program like sendmail service facility often owned nonuser id mean possible abuse one service might possible abuse many one way deal general problem every daemon subsystem run separate userid way command data file subsystem could protected way subsystem could write perhaps read access file effectively implementation principle least privilege although might add extra dozen user id system small cost pay already sup ported unix paradigm service separate id include sendmail news finger ftp uucp yp  password key attack worm program involved attempt discover user password able determine success encrypted password user publicly readable file allows attacker encrypt list possible password compare actual password without passing system function effect security password provided large part prohibitive effort trying combination letter unfortunately machine get faster cost attempt decrease dividing task among multiple processor reduces time needed decrypt password currently feasible use supercomputer precalculate probable password store optical medium although currently portable scheme would allow someone appropriate resource access account could read password field consult database preencrypted password density storage medium increase problem get severe clear approach reducing risk attack approach already taken variant unix would shadow password file encrypted password saved file readable system administrator privileged call performs password encryption comparison appropriate delay  second instance would prevent attempt  fish  password additionally threshold could included check repeated password attempt process resulting form alarm raised shadow password file used combination encryption rather place technique however one problem simply replaced different one combination two method stronger either one alone another way strengthen password mechanism would change utility set user password utility currently make minimal attempt ensure new password nontrivial guess program could strengthened way would reject choice word currently online dictionary based account name highlevel description worm section contains highlevel overview worm program function description section assumes reader familiar unix somewhat familiar network facility unix section describes individual function structure detail worm consists two part main program bootstrap vector program described appendix b start description point host infected point worm running another machine either succeeded establishing shell new host connected back infecting machine via tcp connection connected smtp port transmitting sendmail program infection proceeded follows  socket established infecting machine vector program connect eg socket number  challenge string constructed random number eg  file name base also constructed using random number eg   vector program installed executed using one two method across tcp connection shell worm would send following command two line beginning  cc  sent single line pathbin usrbin usrucb cd usrtmp echo gorch sed int zzq xc echo gorch text vector programenclosed appendix b int zz cc x xc x  rm f x xc echo done would wait string  done  signal vector program running b using smtp connection would transmit two line beginning  cc  sent single line debug mail devnull rcpt  sed e  binsh exit  data cd usrtmp cat xc eof text vector programenclosed appendix iii eof cc x xc x  rm f x xc quit infecting worm would wait minute designated port vector contact  vector program connected  server  sent challenge string transferred three file sun binary version worm vax version source code vector program file copied running vector program became via execl call shell input output still connected server worm  server worm sent following command stream connected shell pathbin usrbin usrucb rm f sh f sh px else psh fi binary file transferred two case although code written allow would send following form command sequence cc p x suno p p x suno x vaxo x lc rm f p rm would succeed linked version worm failed start execution server determined host infected closed connection otherwise would try binary file binary file tried would send rm command object file clear away evidence attempt infection  new worm infected host proceeded  hide  obscuring argument vector unlinking binary version killing parent argument invocation read memory worm binary file encrypted file reading deleted file disk  next new worm gathered information network interface host local machine connected built list memory including information canonical alternate name address gathered information making direct ioctl call running netstat program various argument also read various system file looking host name add database  randomized list constructed attempted infect host directly connected network created list possible host number attempted infect host existed depending type host gateway local network worm first tried establish connection telnet rexec port determine reachability attempted one infection method  infection attempt proceeded one three route rsh fingerd sendmail attack via rsh done attempting spawn remote shell invocation order trial usrucbrsh usrbinrsh binrsh successful host infected step b attack via finger daemon somewhat subtle connection established remote finger server daemon specially constructed string byte passed daemon overflowing input buffer overwriting part stack standard bsd version running vax computer overflow resulted return stack frame main routine changed return address pointed buffer stack instruction written stack location pushl f sh pushl ef bin movl sp r pushrl pushrl pushrl r pushrl movl sp ap chmk b code executed main routine attempted return execve  binsh   vaxen resulted worm connected remote shell via tcp connection worm proceeded infect host step sun simply resulted core file since code place corrupt sun version fingerd similar fashion c worm tried infect remote host establishing connection smtp port mailing infection step b step attempted soon one method succeeded host entry internal list marked infected method attempted  next entered state machine consisting five state state run short program looped back step attempting break host via sendmail finger rsh first four five state attempt break user account local machine fifth state final state occurred attempt made break password fifth state worm looped forever trying infect host internal table marked yet infected four state worm read etchostsequiv file rhosts file find name equivalent host marked internal table host next worm read etcpasswd file internal data structure also examined forward file user home directory included host name internal table host try oddly similarly check user rhosts file b worm attempted break user password using simple choice worm checked obvious case password used account name gecos field try simple password assume user entry password file like account abcedfghijklm user name usraccount binsh word tried potential password would account accountaccount user name user name tnuocca respectively account name account name concatenated first last name user user name leading capital letter turned lower case account name reversed experience described gram indicates system user naive password security choice may work user password step section describes done password  hit  achieved c third stage process involved trying break password user trying word present internal dictionary word see appendix dictionary word tried account random order  hit  handled described step fourth stage entered attempt failed word file usrdictwords worm would see password account addition word dictionary began upper case letter letter converted lower case word also tried password  password broken account worm would attempt break remote machine user account worm would scan forward rhosts file user point identify name remote host account used target user attempted two attack worm would first attempt create remote shell using rexec service attempt would made using account name given forward rhosts file user local password took advantage fact user often password account multiple machine b worm would rexec current host using local user name password would try rsh command remote host using username taken file attack would succeed case remote machine hostsequiv file user rhosts file allowed remote execution without password remote shell created either way attack would continue step use made user password throughout execution main loop worm would check worm running machine worm would attempt connect another worm local predetermined tcp socket connection succeeded one worm would randomly set pleasequit variable causing worm exit reached partway third stage password cracking delay part reason many system multiple worm running even though worm would check local worm would defer selfdestruction significant effort made break local password one every seven worm would become immortal rather check local worm probably done defeat attempt put fake worm process tcp port kill existing worm also contributed load machine infected worm attempted send udp packet host ernieberkeleyedu approximately every infection based random number comparison code incorrect however information ever sent whether intended ruse whether actually reason byte sent currently known however code uninitialized byte intended message possible author eventually intended run monitoring program ernie breaking account doubt program could obtain sending host number singlebyte message whether sent tcp udp packet however evidence program found possible connection simply feint cast suspicion personnel berkeley worm would also fork regular basis kill parent served two purpose first worm appeared keep changing process id single process accumulated excessive amount cpu time secondly process running long time priority downgraded scheduler forking new process would regain normal scheduling priority mechanism always work correctly either locally observed instance worm second accumulated cpu time worm ran hour would flush host list entry flagged immune already infected way host added list implies single worm might reinfect machine every hour tour worm following brief highlevel description routine present worm code description cover significant functionality program describe auxiliary routine used describe parameter algorithm involved however give user complete view worm functioned  data structure worm global data structure worth mentioning additionally way handled local data interest  host list worm constructed linked list host record record contained array character pointer allow storage host namesaliases record also contained array six long unsigned integer host address record contained flag field flag bit used code appear x host gateway x host infected x host infected  reachable unix wrong machine type x host  equivalent  sense appeared context like rhosts file  gateway list worm constructed simply array gateway ip address use system netstat command address used infect directly connected network use list described explanation scangateways rtinit  interface list array record filled information network interface active current host included name interface outgoing address netmask destination host link pointtopoint interface flag  pwd linked list record built hold user information structure held account name encrypted password home directory gecos field link next record blank field also allocated decrypted password found  object program maintained array  object  held file composed worm rather file stored disk program read file internal structure record list contained suffix file name eg  suno  size file encrypted content file use structure described  word minidictionary word present worm use password guessing see appendix word stored array every word masked xor bit pattern x thus dictionary would show invocation string program binary object file  embedded string every text string used program without exception masked xor bit pattern x every time string referenced referenced via call x x function decrypted requested string static circular buffer returned pointer decrypted version also kept text string program appearing invocation string simply clearing high order bit eg xor x displaying program binary would produce intelligible text reference x omitted following text realize every string encrypted evident string placed program manner masked string present inline code preprocessor modified version compiler must used represents significant effort author worm suggests quite strongly author wanted complicate prevent analysis program discovered  routine description given arranged alphabetic order name routine exactly used author code name based function routine name chosen original routine declared static name information present object file reader wish trace functional ow worm begin description routine main doit presented first reason function routine arbitrarily grouped follows setup utility main doit crypt haddaddr haddname haddrhost hclean hnamehost ifinit loadobject makemagic netmaskfor permute rtinit supportsrsh supportstelnet network password attack attacknetwork attackuser crack crack crack crack cracksome ha hg hi hl hul infect scangateways sendworm tryfingerd trypassword tryrsh trysendmail waithit camouflage checkother othersleep sendmessage xorbuf  main program started first thing change argument vector make look like shell running next set resource limit failure would drop core file loaded file named command line object structure memory using call loadobject file one object loaded worm would immediately call exit next code unlinked object file file named sh worm file tmpdumb apparently remnant earlier version program possibly used restraint log testingthe file otherwise referenced program finished zeroing argument vector next code would call ifinit interface discovered routine program would call exit program would get current process group process group parent process id passed command line would reset process group send kill signal parent last routine doit invoked  doit main worm code first variable set current time call time random number generator initialized return value next routine hg hl invoked infect host one failed infect host routine ha invoked next routine checkother called see worm host routine sendmessage also called cast suspicion folk berkeley code entered infinite loop call would made cracksome followed call othersleep parameter cracksome would called point process would fork parent would exit leaving child continue next routine hg ha hi would called infect host one combination routine failed infect new host routine hl would called infect local host thus code aggressive always infecting least one host pas loop logic faulty however known gateway host infected bad set host number tried ha code would call hl every time loop behavior one reason host became overloaded worm process every pas loop worm would likely forced infect another local host considering multiple worm could run host time one would exit could lead exponential growth worm lan environment next routine othersleep called timeout check made see worm run hour call made hclean finally check made pleasequit nextw variable set othersleep checkother crack respectively pleasequit nonzero nextw greater worm would exit  attacknetwork routine designed infect random host subnet first network interface checked see target host network current host directly connected routine immediately returned based class netmask eg class class b code constructed list likely network number special algorithm used make good guess potential class host number constructed host number placed list list randomized using permute network class b permutation done favor low numbered host two separate permutationsthe first six host output list guaranteed chosen first dozen lownumbered host number generated first entry permuted list one examined ip address entry retrieved global list host list host list marked already infected immune ignored otherwise check made see host supported rsh command identifying existing bsdderived networking service calling supportsrsh host support rsh entered host list already present call infect made host successful infection occurred routine returned early value true   attackuser routine called user password broken incorrect code may work properly every architecture subroutine call missing argument however sun vaxen code work missing argument supplied extra argument previous call order argument stack match two routine largely coincidence worked routine attempted open forward file user home directory host user name present file called hul routine thing rhosts file present user home directory  checkother routine see another worm present machine companion routine othersleep first random value checked probability routine returned without ever anythingthese worm become immortal sense never participated process thinning multiple local worm otherwise worm created socket tried connect local  worm port   connection successful exchange challenge made verify side actually fellow worm random value written side value read socket sum value sent plus value read even local worm set pleasequit variable thus marking eventual self destruction socket closed worm opened new socket port destined self destruct set otherfd socket listen worm error encountered procedure worm involved set otherfd  returned routine meant error caused worm immortal  crack routine first scanned etchostsequiv file adding new host global list host setting ag field mark equivalent call made namehost getaddrs next similar scan made rhosts file using exact call code called setpwent open etcpasswd file loop performed long password could read every th entry call made othersleep timeout user attempt made open file forward home directory user read hostnames therein hostnames also added host list marked equivalent encrypted password home directory gecos field user stored pwd structure user entry read endpwent routine invoked cmode variable set  crack routine tried break password looped account tried next group account tested loop call made othersleep parameter zero time loop index modulo zero ie every call repeated call made trypassword value discussed earlier b account tried variable cmode set  crack routine used minidictionary attempt break user password see appendix dictionary first permuted using permute call word decrypted place xoring byte x decrypted word passed trypassword routine user account word reencrypted global index named nextw incremented point next dictionary entry nextw index also used doit determine enough effort expended worm could   go gently good night  word left variable cmode set two interesting point note routine reverse word tried although would seem like logical thing word encrypted decrypted place rather temporary buffer le efficient copy masking since reencryption ever need done discussed next section many example unnecessary effort present program furthermore entire minidictionary decrypted rather word time would seem lessen benefit encrypting word since entire dictionary would present memory plaintext time word tried  crack last password cracking routine opened usrdictwords word found called trypassword account first letter word capital converted lower case retried word tried variable cmode incremented routine returned routine call othersleep interspersed thus leading process ran long time checking worm local machine also note routine try reverse word either  cracksome routine simple switch statement external variable named cmode implemented five strategy discussed  paper state zero called crack state one called crack state two called crack state three called crack default case simply returned  crypt routine took key salt performed unix password encryption function block zero bit return value routine pointer character string character representing encoded password routine highly optimized differs considerably standard library version routine called following routine compkeys munge de ipi routine setupe also present associated code never referenced appears duplicate functionality munge function  haddaddr routine added alternate address host entry global list already present  haddname routine added host alias name given host entry duplicate entry suppressed  haddrhost host address provided routine checked entry global host list see already present pointer host entry returned parameter flag set new entry initialized argument address pointer returned  hclean routine traversed host list removed entry marked infected immune leaving host yet tried  hnamehost like haddrhost except comparison done name alias  ha routine tried infect host remote network first checked see gateway list entry called rtinit next constructed list ip address gateway host responded trytelnet routine list host address randomized permute address list constructed address masked value returned netmaskfor result passed attacknetwork routine attack successful routine exited early return value true  hg routine attempted infect gateway machine first called rtinit reinitialize list gateway gateway called main infection routine infect gateway argument soon one gateway successfully infected routine returned true  hi routine tried infect host whose entry host list marked equivalent routine traversed global host list looking entry calling infect host successful infection returned early value true  hl routine intended attack host directlyconnected network alternate address current host routine attacknetwork called argument consisting address logically anded value netmask address success caused routine return early return value true  hul function attempted attack remote host via particular user first checked make sure host current host already marked infected next called getaddrs sure address used examined username punctuation character returned found called othersleep argument next code tried attack described  call made sendworm either attack succeeded establishing shell remote machine  ifinit routine constructed list interface using ioctl call summary obtained information interface running including destination address pointtopoint link netmask interface initialized pointer first nonloopback address found entered alternate address address list  infect main infection routine first host argument checked make sure current host currently infected determined immune next check made sure address host could found calling getaddrs address found host marked immune routine returned false next routine called othersleep timeout following tried succession call tryrsh tryfingerd trysendmail call tryrsh tryfingerd succeeded file descriptor established invocation passed argument sendworm call three infection attempt succeeded infect returned early value true otherwise routine returned false  loadobject routine read object file object structure memory file opened size found call library routine fstat buffer malloc appropriate size call read made read content file buffer encrypted call xorbuf transferred object array suffix name eg suno lc vaxo saved field structure size object  makemagic routine used library random call generate random number use challenge number next tried connect telnet port  target host using alternate address currently known host successful connection made library call getsockname called get canonical ip address current host relative target next attempt made establish tcp socket using port number generated taking output random number generator modulo connection successful routine returned port number file descriptor socket canonical ip address current host challenge number  netmaskfor routine stepped interface array checked given address interface found address reachable connected interface netmask returned netmask associated interface otherwise return default netmask based network type class class b class c  othersleep routine checked global variable named otherfd variable le zero routine simply called sleep provided timeout argument returned otherwise routine waited select system call value timeout timeout expired routine returned otherwise select return code indicated input pending otherfd descriptor meant another worm current machine connection established exchange  magic  number made verify identity local worm wrote random number produced random worm via socket reply read check made ensure response came localhost  file descriptor closed random value sent plus response odd number otherfd variable set  pleasequit variable set meant local worm would die condition right cf doit would longer attempt contact worm local machine sum even worm destined die  permute routine randomized order list object done executing loop item list iteration loop random number generator called modulo number item list item list indexed value swapped item list indexed current loop value via call bcopy  rtinit initialized list gateway started setting external counter ngateways zero next invoked command  usrucbnetstat r n  using popen call code looped output received netstat command line read call othersleep made timeout zero input line parsed destination gateway gateway valid ip address loopback address  discarded value compared gateway address already known duplicate skipped also compared list local interface local network discarded duplicate otherwise added list gateway counter incremented  scangateways first code called permute randomize gateway list next looped gateway first whichever le call made othersleep timeout zero gateway ip address searched host list new entry allocated host none currently existed gateway flag set flag field host entry call made library routine gethostbyaddr ip number gateway name alias address field added host list already present call made gethostbyname alternate address added host list loop executed second loop started effectively thing first clear reason done unless remnant earlier code stub future addition  sendmessage routine made call random time returned without anything th case opened stream socket host  ernieberkeleyedu  tried send uninitialized byte using sendto call would work using udp send tcp socket  sendworm routine sent worm code connected tcp circuit remote machine first checked make sure object table held copy lc code see appendix b next called makemagic get local socket established generate challenge string encoded wrote script detailed previously finally called waithit returned result code routine object file shipped across link decrypted memory first call xorbuf reencrypted afterwards  supportsrsh routine determined target host specified argument supported bsd derived rsh protocol creating socket attempting tcp connection port remote machine timeout connect failure caused return false otherwise socket closed return value true  supportstelnet routine determined host reachable supported telnet protocol ie probably router similar  dumb  box similar supportsrsh nature code established socket connected remote machine port returned false error timeout occurred otherwise socket closed true returned  tryfingerd routine tried establish connection remote finger daemon given host connecting port connection succeeded sent across overfull buffer described b waited see side became shell returned file descriptor caller otherwise closed socket returned failure code  trypassword routine called crypt password attempt compared result encrypted password pwd entry current user match found unencrypted password copied pwd structure routine attackuser invoked  tryrsh function created two pipe forked child process child process attempted rexec remote shell host specified parameter using specified username password child process tried invoke rsh command attempting run order  usrucbrsh   usrbinrsh   binrsh  remote shell succeeded function returned file descriptor open pipe otherwise closed file descriptor killed child sigkill reaped call wait  trysendmail routine attempted establish connection smtp port  remote host successful conducted dialog explained b called waithit routine see infection  took  return code checked line transmitted return code indicated problem routine aborted sending  quit  message  waithit function acted bootstrap server vector program remote machine waited second socket created makemagic routine connection made closed socket returned failure code likewise first thing received challenge string shipped bootstrap program socket closed routine returned routine decrypted object file using xorbuf sent across connection vector program see appendix b script transmitted compile run vector described  remote host successfully infected infected flag set host entry socket closed otherwise routine sent rm command string delete object file function returned success failure infection  xorbuf routine somewhat peculiar performed simple encryptiondecryption function xoring buffer passed argument first byte xorbuf routine code would work machine split id space tagged architecture analysis code  structure style examination reverseengineered code worm instructive although reading original code reveal characteristic author one conclusion may surprise people quality code mediocre might even considered poor instance place call made function either many argument many routine local variable either never used potentially used initialized least one location struct passed argument rather address struct also dead code routine never referenced code executed condition never met possibly bug appears author never used lint utility program many place code call system routine return code never checked success many place call made system heap routine malloc result immediately used without check although program configured leave core file evidence fatal failure occurred lack simple check return code indicative sloppiness also suggests code written run minimal testing certainly possible check written code elided subject conditional compilation flag however would little reason remove check production version code structure chosen internal data also revealing everything represented linked list structure search done linear pass appropriate list list could get quite long doubtless considerable cpu time spent worm maintaining searching list little extra code implement hash bucket form sorted list would added little overhead program yet made much efficient thus quicker infect host le obvious system watcher linear list may easy code experienced programmer advanced c student able implement hash table list hash bucket little difficulty effort duplicated spot example code tried break password even password account found earlier stage execution worm would encrypt every word dictionary attempt match similar redundancy found code construct list host infect location code appears author meant execute particular function used wrong invocation use udp send tcp socket one glaring example another example beginning program code sends kill signal parent process surrounding code give strong indication user actually meant killpg instead used wrong call one section code appears particularly wellthought involves crypt routine used check password noted seel code nine time faster standard berkeley crypt function many interesting modification made algorithm routine appear written author rest code additionally routine involved support encryption anddecryptioneven though encryption needed worm support assumption routine written someone author program included code would interesting discover code originated came worm program program could much virulent author experienced le rushed herhis coding however seems likely code developed long period time conclusion drawn author sloppy careless perhaps release worm premature  problem functionality little argument program functional fact wish le capable however lucky sense program flaw prevented operating fullest instance error code would fail infect host local area network even though might identify host another example restricted functionality concern gathering hostnames infect noted already code failed gather host name user rhosts file early also attempt collect host name user system file containing name eg etchostslpd many operation could done  smarter  case using linear structure already mentioned another example would sort user password salt used salt present one password password could checked parallel single pas made dictionary machine password share salt instance special advantage taken root password compromised root password broken possible fork child set uid environment variable match designated user process could attempt rsh attack described earlier report instead root treated account suggested treatment root may conscious choice worm author without knowing true motivation author impossible decide however considering design intent program find difficult believe exploitation would omitted author thought attack used finger daemon could extended sun version program explanation come mind done author lacked motivation ability time resource develop version sun however recent meeting professor rick rashid carnegiemellon university heard claim robert morris alleged author worm revealed fingerd bug system administrative staff cmu well year ago assuming report correct worm author indeed mr morris obvious sufficient time construct sun version code fact asked three purdue graduate student shawn ostermann steve j chapin jim n griffoen develop sun version attack three hour worm author certainly must access sun else would able provide sun binary accompany operational worm motivation also factor considering everything else present program time resource available reason immediately rule lacked knowledge implement sun version attack seemsunlikely given inconsistent nature rest code certainly possibility however case raise new question author worm original author vax fingerd attack perhaps obvious shortcoming code lack understanding propagation load reason worm spotted quickly caused much disruption replicated exponentially network worm carried history admittedly check place see current machine already infected one every seven worm would never die even existing infestation furthermore worm marked selfdestruction would continue execute point made least one complete pas password file many approach could taken author slow growth worm prevent reinfestation little gained explaining absence worm program telling either author understanding program would propagate else shehethey care existence worm mechanism limit growth tends indicate lack understanding rather indifference algorithm used worm reasonably clever one particular interesting note trying password builtin list trying break connected host worm would randomize list candidate trial thus one worm present local machine would likely try candidate different order thus maximizing coverage implies however action pleasequit variable author overly concerned presence multiple worm machine point multiple worm allowed effort maximize spread infection also support contention author understand propagation load effect worm design vector program  thinning  protocol use internal state machine clever nonobvious overall structure program especially code associated ip address indicates considerable knowledge networking routine available support knowledge evidenced code would indicate extensive experience networking facility coupled error worm code related networking support thesis author careful programmerthe error part code probably error ignorance inexperience  camouflage great care taken prevent worm program stopped seen caution new file introduced machine including use random challenge seen fact every string compiled worm encrypted prevent simple examination evidenced care file associated worm deleted disk earliest opportunity corresponding content encrypted memory loaded evidenced continual forking process faulty check instance worm local host code also evidence precaution providing copy anyone seeking stop worm set resource limit dump core file keep internal data encrypted used luckily method obtaining core file data image researcher able obtain information needed disassemble reverseengineer code doubt however author worm intended make task difficult possible  specific comment specific comment worth making directed particular aspect code rather program whole  sendmail attack many site tend experience substantial load heavy mail traffic especially true site mailing list exploders thus administrator site configured mailer queue incoming mail process queue periodically usual configuration set sendmail run queue every minute attack sendmail would fail machine unless vector program delivered nearly empty queue within second processed reason infecting worm would wait server socket two minute delivering  infecting mail  thus system delayed queue vector process would get built time transfer main worm program target vector process would fail connection attempt exit nonzero status additionally attack sendmail invoked vector program without specific path program invoked  foo  instead  foo  done shellbased attack result system default path used sendmail shell contain current directory   invocation code would fail noted failure interrupt processing subsequent command rm file may many system administrator discovered copy vector program source code usrtmp directory  machine involved already noted attack made sun machine vax machine running bsd unix observed least one mailing list sun code compiled mc flag sun machine would fallen victim worm matter curiosity machine targeted attack particular many pyramid sequent gould sun sun machine net binary file also included worm could spread much location ohio state completely spared effect worm  known  machine type worm could infect since author program knew break arbitrary unix machine seems odd heshe attempt compile program foreign architecture include worm  portability consideration author worm may much experience writing portable unix code including shell script consider shell script used compile vector following command used f sh use character synonym test function universal unix user experience writing portable shell file tend spell operator test rather rely therebeing link file named   particular system also know test operator builtin many shell thus faster external variant test invocation used worm code also us f flag test presence file named sh provided u worm  condom  published thursday night creating directory name sh usrtmp cause test fail later attempt create executable file name experienced shell programmer tend use e exists flag circumstance detect directory socket device named fifo etc colloquialism present code bespeak lack experience writing portable code one example code loop file unit closed vector program start executing main program start executing program code following executed close portable way accomplish task closing file descriptor berkeleyderived system execute getdtablesize close even efficient getdtablesize   close number file unit available thus open may vary system system  summary many example drawn code point obvious author worm program may moderately experienced unix programmer mean  unix wizard  many claiming code employ clever technique trick doubt original work worm author code seems product inexperienced sloppy programmer person person put program together appears lack fundamental insight algorithm data structure network propagation time sophisticated knowledge network feature facility code appear tested although anything unit testing would simple else prematurely released actually possible conclusion correct presence much dead duplicated code coupled size data structure slot object code array argues program intended comprehensive conclusion clear code worm deliberately designed two thing infect many machine possible difficult track stop question way accident although release may premature still unknown worm future version accomplish task although author alleged robert morris publicly confessed matter definitively proven considering probability civil criminal legal action confession explanation unlikely forthcoming time soon speculation centered motivation diverse revenge pure intellectual curiosity desire impress someone must remain speculation time however since access definitive statement author least must question psychological makeup someone would build run software many people stated author code must  computer genius  sort bothered supposition since first hearing examined code depth convinced program evidence support claim code apparently unfinished done someone clever particularly gifted least way usually associate talented programmer designer many bug mistake code would made careful competent programmer code evidence clear understanding good data structuring algorithm even security flaw unix contain clever exploitation two specific flaw system utility hardly evidence genius general code impressive  success  probably due large amount luck rather programming skill possessed author chance favored u however effect worm largely benign easily stopped code tested developed someone experienced coupled something destructive toll would considerably higher easily think several dozen people could written program done far fewer error made considerably virulent thankfully individual responsible dedicated professional would consider act learn securing system help determine incident ever need analyze attack also point need better mechanism place coordinate information security flaw attack response incident largely ad hoc resulted duplication effort failure disseminate valuable information site needed many site administrator discovered problem reading newspaper watching television major source information many site affected seems usenet news group mailing list put together worm first discovered although useful method ensure timely widespread dissemination useful information  especially since depended internet work three week incident site still reconnected internet second time six month major panic hit internet communitythe first occurred may rumor swept community  logic bomb  planted sun software disgruntled employee many many site turned system clock back shut system prevent damage personnel sun microsystems responded admirable fashion conducting inhouse testing isolate threat issuing information community deal situation unfortunately almost everyone else seems watched event unfold glad one deal situation worm shown u affected event shared environment need develop better information method outside network next crisis whole episode cause u think ethic law concerning access computer technology use developed quickly always simple determine proper boundary moral action may many senior computer professional started career year ago breaking computer system college place employment demonstrate expertise however time changed mastery computer science computer engineering involves great deal shown using intimate knowledge flaw particular operating system entire business dependent wisely computer system people money career possibly even life may dependent undisturbed functioning computer society afford consequence condoning encouraging behavior threatens damage computer system professional computer scientist computer engineer afford tolerate romanticization computer vandal computer criminal incident also prompt discussion distribution security related information particular since hundred site  captured  binary form worm since personnel site utility knowledge enables reverseengineer worm code ask long expect beneficial keep code unpublished mentioned introduction least five independent group produced reverseengineered version worm expect many done attempted especially current version kept private even none version published formal way hundred individual access copy end year historically trying ensure security software secrecy proven ineffective long term vital educate system administrator make bug fix available way compromise security method prevent dissemination information appear completely contrary goal last important note nature internet unix helped defeat worm well spread immediacy communication ability copy source binary file machine machine widespread availability source expertise allowed personnel throughout country work together solve infection even despite widespread disconnection part network although immediate reaction people might restrict communication promote diversity incompatible software option prevent recurrence worm would entirely wrong reaction increasing obstacle open communication decreasing number people access indepth information prevent determined attackerit decrease pool expertise resource available fight attack attitude would contrary whole purpose open researchoriented network worm caused breakdown ethic well lapse securitya purely technological attempt prevention address full problem may cause new difficulty acknowledgment much analysis performed reverseengineered version worm code following people involved production version donald j becker harris corporation keith bostic berkeley donn seeley university utah chris torek university maryland dave pare fx development team mit mark w eichin stanley r zanarotti bill sommerfeld ted t jon rochlis ken raeburn hal birkeland john kohl disassembled version worm code provided purdue staff purdue university computing center rich kulawiec particular thanks individual reviewed early draft paper contributed advice expertise becker kathy heaphy brian kantor r j martin richard demillo especially keith bostic steve bellovin thanks individual thanks apology anyone credited reference allm allman eric sendmailan internetwork mail router university california berkeley issued bsd unix documentation set brun brunner john shockwave rider harper row cohe cohen fred  computer virus theory experiment  proceeding th national computer security conference pp  denn denning peter j  computer virus  american scientist vol pp  mayjune dewd dewdney k  core war bestiary virus worm threat computer memory  scientific american vol pp  may gerr gerrold david harlie one ballentine book first edition gram grampp fred robert h morris  unix operating system security  bell laboratory technical journal vol part pp  oct harr harrenstien k  namefinger  rfc sri network information center december morr morris robert ken thompson  unix password security  communication acm vol pp  acm november post postel jonathan b  simple mail transfer protocol  rfc sri network information center august reid reid brian  reflection recent widespread computer breakins  communication acm vol pp  acm february ritcritchie dennis  security unix  u nt def ix nt def supplementary document seel seeley donn  tour worm  technical report computer science dept university utah november unpublished report shoc shoch john f jon hupp  worm program  early experience distributed computation  communication acm vol pp  acm march appendix dictionary follows minidictionary word contained worm tried attempting break user password looking list sense revealing actually raise significant question list chosen assumption expressed many people list represents word commonly used password seems unlikely common choice password usually include fantasy character list contains none likely choice eg  hobbit   dwarf   gandalf   skywalker   conan  name relative friend often used see woman name like  jessica   caroline   edwina  instance common name  jennifer   kathy  almost men name  thomas  either  stephen   steven   eugene  additionally none initial letter capitalized although often used password also interest obscene word dictionary yet many report concerted password cracking experiment revealed significant number user use word phrase password list contains least one incorrect spelling  commrades  instead  comrade  also believe  markus  misspelling  marcus  word appear standard dictionary nonenglish name  jixian   vasant   puneet  etc also unusual word list would expect considered common  anthropogenic   imbroglio   umesh   rochester   fungible   cerulean  etc imagine list derived data gathering limited set password probably known author computing environment dictionarybased bruteforce attack used crack selection hundred password taken small set machine approach gathering password could also usedethernet monitor trojan horse login program etc however may cracked one broken would added dictionary interestingly enough many word standard online dictionary usrdictwords word useful supplement main dictionary based attack worm used strategy would suspect limited use time unusual composition might useful determination author code one approach would find system user local dictionary containing word another would find system significant quantity password could broken list aaa academia aerobics airplane albany albatross albert alex alexander algebra alias alphabet ama amorphous analog anchor andromache animal answer anthropogenic anvil anything aria ariadne arrow arthur athena atmosphere aztec azure bacchus bailey banana banana bandit bank barber baritone bass bassoon batman beater beauty beethoven beloved benz beowulf berkeley berliner beryl beverly bicameral bob brenda brian bridget broadway bumbling burgess campanile cantor cardinal carmen carolina caroline cascade castle cat cayuga celtic cerulean change charles charming charon chester cigar classic cluster coffee coke collins commrades computer condo cookie cooper cornelius couscous creation creosote cretin daemon dancer daniel danny dave december defoe deluge desperate develop dieter digital discovery disney dog drought duncan eager easier edge edinburgh edwin edwina egghead eiderdown eileen einstein elephant elizabeth ellenemeraldengine engineer enterprise enzyme ersatz establish estate euclid evelyn extension fairway felicia fender fermat fidelity finite fisher flake float flower flower foolproof football foresight format forsythe fourier fred friend frighten fun fungible gabriel gardner garfield gauss george gertrude ginger glacier gnu golfer gorgeous gorge gosling gouge graham gryphon guestguitargumption guntis hacker hamlet handily happening harmony harold harvey hebrides heinlein hello help herbert hiawatha hibernia honey horse horus hutchins imbroglio imperial include ingres inna innocuous irishman isi japan jessica jester jixian johnny joseph joshua judith juggle julia kathleen kermit kernel kirkland knight ladle lambda lamination larkin larry lazaruslebesguelee leland leroy lewis light lisa louis lynne macintosh mack maggot magic malcolm mark markus marty marvin master maurice mellon merlin mets michael michelle mike minimum minsky mogul moose morley mozart nancy napoleon nepenthe ness network newton next noxious nutrition nyquist oceanography ocelot olivetti olivia oracle orca orwell osirisoutlawoxford pacific painless pakistan pam paper password patricia penguin peoria percolate persimmon persona pete peter philip phoenix pierre pizza plover plymouth polynomial pondering pork poster praise precious prelude prince princeton protect protozoa pumpkin puneet puppet rabbit rachmaninoff rainbow raindrop raleigh random rascal really rebecca remote rick ripple robotics rochesterrolexromano ronald rosebud rosemary rose ruben rule ruth sal saxon scamper scheme scott scotty secret sensor serenity shark sharon sheffield sheldon shiva shiver shuttle signature simon simple singer single smile smile smooch smother snatch snoopy soap socrates sossina sparrow spit spring springer squire strangle stratford stuttgart subway success summer supersuperstage support supported surfer suzanne swearer symmetry tangerine tape target tarragon taylor telephone temptation thailand tiger toggle tomato topography tortoise toyota trail trivial trombone tuba tuttle umesh unhappy unicorn unknown urchin utility vasant vertigo vicky village virginia warren water weenie whatnot whiting whitney william williamsburg willie winston wisconsinwizardwombat woodwind wormwood yacov yang yellowstone yosemite zap zimmerman appendix b vector program worm brought machine infected via action small program call vector program individual referring grappling hook program people referred program since suffix used copy source program would transferred victim machine using one method discussed paper would compiled invoked victim machine three command line argument canonical ip address infecting machine number tcp port connect machine get copy main worm file magic number effectively acted onetimechallenge password  server  worm remote host port receive magic number back starting transfer would immedi ately disconnect vector program prevent one attempting  capture  binary file spoofing worm  server  code also go effort hide zeroing argu ment vector immediately forking copy failure occurred transferring file code deleted file already transferred exited one key item note code vector designed able transfer file used three make one wonder extensive version worm planned later date version might carried command file password data possibly local virus trojan horse program follows pair program unable decode dependability reference bsd acronym berkeley software distribution unix registered trademark laboratory vax trademark digital equipment corporation second edition book published  updated  omit subplot virus page probably coincidence internet worm loosed november eve  birthday  note widely used alternative sendmail mmdf also viewed complex large many user perceived flexible sendmail necessary establish special addressing handling rule bridging heterogeneous network strictly speaking password encrypted block zero bit repeatedly encrypted using user password result encryption saved see morr detail list would likely include word dictionary reverse word large collection proper name rexec remote command execution service requires usernamepassword combination supplied part request compiled port number host  loopback using tcp port host  interestingly although program coded get address host remote end pointtopoint link use seems made information nt suspicious enough appears bug probable assumption routine hl would handle infection local host hl call routine thus local host never infected via route puzzling appropriate file scan equivalent host would rhosts file forward file private communication someone present meeting thought sequent symmetry gould np infected multiple copy worm present awesome awful thought effect noticed locally worm broke mostly unloaded vax spectacular effect machine one two order magnitude capacity frightening thought developed kevin braunsdorf rich kulawiec purdue pucc rick adam center seismic study commented may someday hear worm loosed impress jodie foster without information valid speculation raise disturbing question everyone access computer rational sane future attack may reflect throughout paper writing author instead author occurs mail usenet posting medium coverage incident assumed author singular unaccustomed working together program natural inclination find hard believe one individual could poor judgement also noted people spoke seemed assume worm author male leave others speculate value observation 